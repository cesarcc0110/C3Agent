{"instruction": "Write a MySQL query to find the name of a customer whose last name is 'Smith' and has the highest credit limit.", "input": "", "output": "SELECT name\nFROM Customers\nWHERE lastname = 'Smith'\nORDER BY creditlimit DESC\nLIMIT 1;"}
{"instruction": "Change the data type of the following list to a dictionary.", "input": "list = ['John', '26', 'Movie Watch', 'Jane', '31', 'Book Reader', 'Charlotte', '25', 'Music Listener']", "output": "people_dict = {\n    'John': {'age': 26, 'hobby': 'Movie Watch'},\n    'Jane': {'age': 31, 'hobby': 'Book Reader'}, \n    'Charlotte': {'age': 25, 'hobby': 'Music Listener'}\n}"}
{"instruction": "Edit this code snippet to reverse a string in Python.", "input": "def reverse_string(s):\n    # Edit here\n    return reversed_string", "output": "def reverse_string(s):\n    reversed_string = \"\"\n    for char in s:\n        reversed_string = char + reversed_string\n    return reversed_string"}
{"instruction": "Modify the 'Bike' class so that when instances are created they are assigned a unique ID.", "input": "", "output": "# Define a class for a bike\nclass Bike:\n _id = 0\n\n def __init__(self, color, make, description): \n  Bike._id += 1\n  self.id = Bike._id\n  self.color = color\n  self.make = make\n  self.description = description"}
{"instruction": "Change the color of the text to blue.", "input": "Text: The quick brown fox", "output": "<span style=\"color:blue;\">The quick brown fox</span>"}
{"instruction": "Edit the given HTML code so that the header of the web page is centered.", "input": "<html>\n   <head>\n      <title>Centering a header</title>\n   </head>\n   <body>\n      <h1>This header is not centered</h1>\n   </body>\n</html>", "output": "<html>\n   <head>\n      <title>Centering a header</title>\n   </head>\n   <body>\n      <h1 style=\"text-align: center;\">This header is now centered</h1>\n   </body>\n</html>"}
{"instruction": "What would you change in the following function to sort a list of numbers in increasing order?", "input": "let arr = [ 4, 2, 5, 1, 3 ]\n\nfunction bubbleSort(arr) {\n  for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < arr.length - i - 1; j++) {\n        if (arr[j] > arr[j + 1]) {\n            let temp = arr[j];\n            arr[j] = arr[j + 1];\n            arr[j + 1] = temp\n        }\n      }\n  }\n}", "output": "let arr = [ 4, 2, 5, 1, 3 ]\n\nfunction bubbleSort(arr) {\n  for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < arr.length - i - 1; j++) {\n        if (arr[j] < arr[j + 1]) {\n            let temp = arr[j];\n            arr[j] = arr[j + 1];\n            arr[j + 1] = temp\n        }\n      }\n  }\n}"}
{"instruction": "Analyze the following CSS code for possible errors.", "input": "body{\n color: #FFFFFF;\n font-size: small;\n padding: 12px;\n}", "output": "No errors found."}
{"instruction": "Modify the given code to handle errors in the following Python script.", "input": "num = int(input('Enter a number'))\nprint(num * 5)", "output": "try:\n    num = int(input('Enter a number'))\n    print(num * 5)\nexcept Exception as e:\n    print(\"Error: {}\".format(e))"}
{"instruction": "Edit the following code to make it run without errors.", "input": "def squared(num):\n    return num * num\n \nnum = 5\nprint(squared(5)", "output": "def squared(num):\n    return num * num\n \nnum = 5\nprint(squared(5))"}
{"instruction": "Edit this HTML code so that the header text is represented correctly.", "input": "<h2>This is a Heading</h2>", "output": "<h2><span style=\"font-weight:bold;\">This is a Heading</span></h2>"}
{"instruction": "Edit the following HTML page so the text appears in bold.", "input": "<html>\n  <head>\n    <title>Text Sample</title>\n  </head>\n  <body>\n    <p>This is a sample text.</p>\n  </body>\n</html>", "output": "<html>\n  <head>\n    <title>Text Sample</title>\n  </head>\n  <body>\n    <p><b>This is a sample text.</b></p>\n  </body>\n</html>"}
{"instruction": "Edit the following CSS code to update the color to green.", "input": "p{\n  color: red;\n}", "output": "p{\n  color: green;\n}"}
{"instruction": "Edit the following HTML document and add a CSS style to changes the background color to blue.", "input": "<html>\n  <head>\n  </head>\n  <body>\n    <h1>Hello, World!</h1>\n  </body>\n</html>", "output": "<html>\n  <head>\n    <style>\n      body {\n        background-color: blue;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>Hello, World!</h1>\n  </body>\n</html>"}
{"instruction": "Edit this HTML page to make the page have a centered heading", "input": "<html>\n<head>\n<title>Sample Page</title>\n</head>\n<body>\n  <h1>Heading</h1> \n</body>\n</html>", "output": "<html>\n<head>\n<title>Sample Page</title>\n</head>\n<body>\n  <h1 style=\"text-align: center;\">Heading</h1> \n</body>\n</html>"}
{"instruction": "Edit the given code to make it more readable", "input": "while(i <= num) {\n  output += i;\n  i++\n}", "output": "let i = 0;\nwhile(i <= num) {\n  output += i;\n  i++;\n}"}
{"instruction": "Edit the following array in JavaScript so that all the strings are in uppercase.", "input": "let array = ['cat', 'dog', 'fish'];", "output": "let array = ['CAT', 'DOG', 'FISH'];"}
{"instruction": "Edit the given CSS code to achieve the desired effect.", "input": "CSS code to change the colour of font in a text box to red:\n\ntextarea {\n color: #000;\n}", "output": "textarea {\n color: #ff0000;\n}"}
{"instruction": "Edit the code to make sure the output error messages are informative.", "input": "def myfunc(param):\n if type(param) != str:\n     print(f\"{param} is not valid input type\")", "output": "def myfunc(param):\n if not isinstance(param, str):\n     print(f\"Expected a string for parameter 'param' but received type '{type(param).__name__}'\")"}
{"instruction": "Create a website layout with three columns and fixed size main section.", "input": "", "output": "<style> \n  .container {\n    display: flex; \n  }\n\n  .column {\n    flex: 1; \n  }\n\n  .main {\n    flex: 2;\n  }\n</style>\n\n<div class=\"container\"> \n  <div class=\"column\"> </div>\n  <div class=\"main\"> </div>\n  <div class=\"column\"> </div>\n</div>"}
{"instruction": "Create a code that edits a list by adding two to each element", "input": "[1, 2, 3]", "output": "def add_two(input_list):\n    new_list = []\n    for num in input_list:\n        new_list.append(num + 2)\n    return new_list"}
{"instruction": "Debug the following Python code", "input": "def f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1", "output": "\"\"\"\nDebug the following Python code\n\ndef f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1\n\"\"\"\n\n# incorrect indentation of the else statement\ndef f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1   # correct indentation"}
{"instruction": "Write a SQL query to list the names of all the customers with credit score greater than 800.", "input": "", "output": "SELECT name FROM customer WHERE credit_score > 800;"}
{"instruction": "Edit the following html code by bolding and italicizing the \"Hello World\" text.", "input": "<h1>Hello World</h1>", "output": "<h1><b><i>Hello World</i></b></h1>"}
{"instruction": "There is a string of code. Can you tell me if there are syntax errors in it?", "input": "def foo():\n    print('bar", "output": "true"}
{"instruction": "Fix the code so that it increments the number by 10 each time.", "input": "num = 0\nwhile num <= 10:\n    num += 1", "output": "num = 0\nwhile num <= 10:\n    num += 10"}
{"instruction": "Suggest a way to gracefully handle errors in Python code.", "input": "", "output": "In Python, errors can be handled gracefully using try and except blocks. The try block contains the code that might throw an exception and the except block is used to handle the exception. In addition, the finally block is used to perform any clean up after the code is executed. Additionally, custom exception classes can be implemented and used to handle errors more granularly."}
{"instruction": "Edit the following code to sort the list of numbers in ascending order", "input": "let numbers = [3, 1, 2, 5, 4]", "output": "let numbers = [3, 1, 2, 5, 4]\n\nnumbers.sort(by: {$0 < $1})"}
{"instruction": "Edit a JavaScript function to perform an action based on another action in the code.", "input": "function myFunction(arr) { \n  return arr.reverse();\n}", "output": "function myFunction(arr) { \n  arr.reverse();\n  return arr;\n}"}
{"instruction": "Create a program in JavaScript to edit the existing string by replacing some of its character.", "input": "string = \"Hello world!\"\nreplacement = \"Bye world!\"", "output": "let str = \"Hello world!\";\n\nlet changedStr = str.replace(\"Hello\", \"Bye\");\nconsole.log(changedStr); // Bye world!"}
{"instruction": "Identify the error in the following function:", "input": "Replace all spaces in a string with a given character.\n\ndef replace_space (original_string, character):\nnew_string = original_string.replace( \" \", character )\nreturn new_string", "output": "The code is correct. There is no error."}
{"instruction": "Editor a Swift code to add item into an array.", "input": "var array = [5, 7, 15]", "output": "var array = [5, 7, 15]\narray.append(21)\nprint(array)"}
{"instruction": "Change the provided dataset into a 3-dimensional tensor, in order to feed it into a Convolutional Neural Network model.", "input": "Dataset containing 10,000 grayscale images of size 32x32", "output": "import numpy as np \n  \n# Creating the 3D tensor \nX = np.zeros((10000, 32, 32)) \n  \n# Initializing it with the grayscale images \nX[:,:,:] = dataset"}
{"instruction": "Write a postfix expression to an infix expression", "input": "3 4 + 5 *", "output": "def postfix_to_infix(expression):\n    stack = []\n    for c in expression.split():\n        if c in \"+-*/\":\n            operand1 = stack.pop()\n            operand2 = stack.pop()\n            stack.append(\"({} {} {})\".format(operand2, c, operand1))\n        else:\n            stack.append(c)\n    return stack[0]\n\nif __name__ == '__main__':\n    expression = '3 4 + 5 *'\n    print(postfix_to_infix(expression))"}
{"instruction": "Modify the given code to sanitize the user input.", "input": "string = raw_input(\"Enter your text here: \")", "output": "import re\n\ndef sanitize(string):\n    string = re.sub(r'[^\\w\\s]','',string)\n    return string\n\nstring = sanitize(raw_input(\"Enter your text here: \"))"}
{"instruction": "Debug the following for loop for computing the sum of numbers from 0 to 10.", "input": "for num in range(0:11)\n  sum = sum + num", "output": "sum = 0\nfor num in range(0, 11):\n    sum = sum + num"}
{"instruction": "Modify the following JavaScript code to remove all whitespaces from a given string.", "input": "var mystring = \" This is a  string  with  extra spaces \";", "output": "var mystring = mystring.replace(/\\s/g,'');"}
{"instruction": "Modify the following code to make it more efficient by using a while loop.", "input": "num = 10\ni = 1\n\nwhile i <= 10:\n    print(i * num)\n    i += 1", "output": "num = 10\ni = 0\n\nwhile i < 10:\n    i += 1\n    print(i * num)"}
{"instruction": "Construct an algorithm to find the longest common prefix string amongst an array of strings.", "input": "`<code>['leet', 'leets', 'lee', 'leeston', 'leeve']</code>`", "output": "\"\"\"\nConstruct an algorithm to find the longest common prefix string amongst an array of strings\n\"\"\"\ndef longest_common_prefix(strs):\n    prefix = strs[0]\n    i = 0\n    while i < len(prefix):\n        for string in strs:\n            if i >= len(string) or string[i] != prefix[i]:\n                return prefix[0:i]\n        i += 1\n    return prefix\n\nif __name__ == '__main__':\n    print(longest_common_prefix(['leet', 'leets', 'lee', 'leeston', 'leeve']))"}
{"instruction": "Fix the bug in the following code that causes the output to be incorrect.", "input": "def calculate_sum(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\nnumbers = [2, 3, 5]\nresult = calculate_sum(numbers)\n\nprint(f'Sum of {numbers} is {result}')", "output": "def calculate_sum(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\nnumbers = [2, 3, 5]\nresult = calculate_sum(numbers)\n\nprint(f'Sum of {numbers} is {result}.')"}
{"instruction": "Edit the following code to print the last element of the list.", "input": "arr = [1, 2, 3]\ni = 0\nwhile i < len(arr):\n    print(arr[i])\n    i += 1", "output": "arr = [1, 2, 3]\ni = 0\nwhile i < len(arr):\n    print(arr[i])\n    i += 1\nprint(arr[len(ar)-1])"}
{"instruction": "Edit the Python code to reverse a linked list.", "input": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None", "output": "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef reverse_list(head):\n    prev = None\n    while head != None:\n        next = head.next\n        head.next = prev\n        prev = head\n        head = next\n    return prev"}
{"instruction": "Modify the following code so that it takes a user input for the numbers for which to calculate the sum.", "input": "", "output": "def sum_numbers():\n    number_list = []\n    input_numbers = input(\"Please enter the numbers you want to sum up (enter q to exit): \")\n    while input_numbers != \"q\":\n        number_list.append(int(input_numbers))\n        input_numbers = input(\"Please enter the numbers you want to sum up (enter q to exit): \")\n    return sum(number_list)"}
{"instruction": "Change the second element of a tuple.", "input": "my_tuple = (1,2,3)", "output": "my_tuple = (1, 2, 5)"}
{"instruction": "What is a text editor?", "input": "", "output": "A text editor is a computer program used for entering, editing, formatting and displaying text. Some text editors support syntax coloring, code completion and autopairing for programming languages. Text editors are used for programming, writing, composition, web design and many other forms of text-related work."}
{"instruction": "Modify the following code so that the output is 4, 4.", "input": "import math \ndef f(x): \n    return math.sqrt(x) * math.sqrt(x+1)\n  \nprint(f(3))", "output": "import math \ndef f(x): \n    return math.pow(x, 2)\n  \nprint(f(4))"}
{"instruction": "Modify the given line of code to print the message \"Hello World!\"", "input": "print(\"Good Luck!\")", "output": "print(\"Hello World!\")"}
{"instruction": "Produce a code to change the case of a given string.", "input": "string = \"Hello World\"", "output": "def changeCase(string):\n  return string.swapcase()"}
{"instruction": "Debug the following C code so that it compiles and runs successfully.", "input": "#include <stdio.h>\nint main {\n    printf(\"Hello World!\");\n    return 0;", "output": "#include <stdio.h>\nint main(void) {\n    printf(\"Hello World!\");\n    return 0; \n}"}
{"instruction": "Modify the following Keras model to add one 1D convolutional layer before the last layer.", "input": "model = Sequential()\nmodel.add(Dense(64, activation='relu', input_dim=100))\nmodel.add(Dense(1, activation='sigmoid'))", "output": "model = Sequential()\nmodel.add(Dense(64, activation='relu', input_dim=100))\nmodel.add(Conv1D(32, 3))\nmodel.add(Dense(1, activation='sigmoid'))"}
{"instruction": "What is a syntax error in programming?", "input": "", "output": "A syntax error is an error in writing code which causes the code to be incorrect according to the programming language's syntax rules. This type of error prevents the code from being executed and can be identified by the compiler or interpreter. Examples of syntax errors include: putting a string in the wrong form, forgetting to add a semicolon at the end of a line, or missing a bracket."}
{"instruction": "Modify the given code to find the factorial of a specified number.", "input": "def factorial_(num):\n    \"\"\"Find the factorial of a given number\"\"\"\n    # TODO\n    return 1", "output": "def factorial_(num):\n    \"\"\"Find the factorial of a given number\"\"\"\n\n    # initialize the value of factorial\n    factorial = 1\n\n    # multiply the number with the numbers \n    # below its value to get the factorial\n    for i in range(1, num+1):\n        factorial *= i\n    \n    return factorial"}
{"instruction": "Edit the following JavaScript code so that it rounds a number to the nearest integer.", "input": "function roundNumber(x) {\n return x + 0.5;\n}", "output": "function roundNumber(x) {\n return Math.round(x);\n}"}
{"instruction": "Edit the following Java code to round a number to two decimal places.", "input": "double num = 3.14159;", "output": "double num = 3.14159;\nnum = Math.round(num * 100.0) / 100.0;\nSystem.out.println(num);\n// Output: 3.14"}
{"instruction": "Modify the previous code so that it is now optimized for time complexity?", "input": "def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater)", "output": "def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        i = 1\n        for j in range(1, len(arr)):\n            if arr[j] < pivot:\n                arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n        arr[0], arr[i-1] = arr[i-1], arr[0]\n        left = quick_sort(arr[:i-1])\n        right = quick_sort(arr[i:])\n        return left + [arr[i-1]] + right"}
{"instruction": "How can you find the severity of a given error?", "input": "", "output": "Error severity can be found by looking at the error code or message provided. The higher the code or the more detailed the message, the more severe the error is. In addition, if the error message indicates the impact of the error on the system or application, it can be used to measure the severity of the error."}
{"instruction": "Edit this line of code to make it work according to our requirements.", "input": "print(\"Hello\",[1,2,3],sep='|')", "output": "print(\"Hello\",\"|\".join([str(x) for x in [1,2,3]]))"}
{"instruction": "You've been asked to edit a string by replacing all occurrences of a certain character with another character.", "input": "string = \"happy happy\" \nfind = \"p\" \nreplace = \"s\"", "output": "#include <iostream>\n#include <string>\n\nvoid replace_chars(std::string& str, char find, char replace) \n{\n    for (int i = 0; i < str.size(); i++)\n    {\n        if (str[i] == find) \n            str[i] = replace; \n    }\n}\n\nint main() \n{ \n    std::string str = \"happy happy\"; \n    char find = 'p'; \n    char replace = 's';\n    replace_chars(str, find, replace); \n    std::cout << str; \n    return 0; \n}"}
{"instruction": "Edit the following code for optimal performance.", "input": "def sum_nums():\n    result = 0 \n    for i in range(10):\n        result += i\n    return result", "output": "def sum_nums():\n    result = 0\n    n = 10\n    while n > 0:\n        result += (n - 1)\n        n -= 1\n    return result"}
{"instruction": "Edit the following HTML code to display a border around the element with the ID 'test-element'.", "input": "<div id=\"test-element\">Hello World</div>", "output": "<div id=\"test-element\" style=\"border:1px solid #000\">Hello World</div>"}
{"instruction": "Analyze the following code snippet and explain the cause of the error.", "input": "int arr[10];\n\nfor (int i=0; i<=10; i++) {\n    arr[i] = i*i;\n}", "output": "This code has an off-by-one error in the loop terminator. The loop should be written as follows: \n\nfor (int i=0; i<10; i++) {\n    arr[i] = i*i;\n} \nThis will prevent the array from attempting to access the nonexistent arr[10] and the resulting out of bounds error."}
{"instruction": "Change the For loop statement below to a While loop statement:", "input": "for i in range(0, 5):", "output": "i = 0\nwhile i < 5: \n    i += 1"}
{"instruction": "Edit the following code to make it generate a random number between 1 and 10.", "input": "import random\n\ndef generate_random_number():\n    return random.randint(0, 11)", "output": "import random\n\ndef generate_random_number():\n    return random.randint(1, 10)"}
{"instruction": "How do you debug an application in Python?", "input": "", "output": "Debugging an application in Python can be done using a variety of methods such as using a debugger like pdb, setting breakpoints, using logging, using the assert statement, etc. Additionally, tools like PyCharm and Visual Studio Code come with built-in debugging capabilities."}
{"instruction": "Edit the following program so that it prints out the result of x multiplied by y.", "input": "x = 7\ny = 5\nprint(x + y)", "output": "x = 7\ny = 5\nprint(x * y)"}
{"instruction": "Create a program in C++ to find the max and min of an array of fixed size.", "input": "array = [3, 5, 8, 6, 10, 1]", "output": "#include <iostream>\nusing namespace std;\n\n// Function to find maximum and minimum of an array\nvoid minMax(int arr[], int n) \n{ \n    int max = arr[0]; \n    int min = arr[0]; \n  \n    for (int i = 1; i < n; i++) \n    { \n        if (arr[i] > max) \n            max = arr[i]; \n  \n        if (arr[i] < min) \n            min = arr[i]; \n    } \n  \n    cout << \"Maximum element = \" << max << endl; \n    cout << \"Minimum element = \" << min; \n} \n\nint main() \n{ \n    int arr[] = {3, 5, 8, 6, 10, 1}; \n    int n = sizeof(arr) / sizeof(arr[0]); \n  \n    minMax(arr, n); \n  \n    return 0; \n}"}
{"instruction": "Change all the values in a list to lowercase.", "input": "mylist = ['Dog', 'Cat', 'Rabbit']", "output": "mylist = [x.lower() for x in mylist]\nprint(mylist)"}
{"instruction": "Modify the given code to debug 'NameError: name 'x' is not defined'.", "input": "nums = range(20)\nfor x in nums:\n    if x % 2 == 0:\n        print(square(x))", "output": "nums = range(20)\nfor x in nums:\n    if x % 2 == 0:\n        print(x**2)"}
{"instruction": "Edit the existing Python code to convert Fahrenheit (F) degrees to Celsius (C) degrees.", "input": "def convert(F):\n return F + 32", "output": "def convert(F):\n return (F-32)*5/9"}
{"instruction": "Change the variable name of the given example to a lowercase variable.", "input": "let MyFavoriteMovie = 'The Matrix';", "output": "let myFavoriteMovie = 'The Matrix';"}
{"instruction": "Edit the provided code so that it prints 10 rows and 10 columns of stars.", "input": "for row in range(5):\n    for col in range(5):\n        print(\"*\")", "output": "for row in range(10):\n    for col in range(10):\n        print(\"*\", end=\"\")\n    print()"}
{"instruction": "Compile the given piece of code and identify any errors.", "input": "int main() \n{\n cout << \"Hello World!\";\n  return 0;\n }", "output": "No errors present."}
{"instruction": "Edit the code to create a class for a profile.", "input": "class Profile {\n\n}", "output": "class Profile {\n  constructor(name, email, avatar_url) {\n    this.name = name;\n    this.email = email;\n    this.avatar_url = avatar_url;\n  }\n\n  updateName(name) {\n    // update the profile's name\n    this.name = name;\n  }\n  \n  updateEmail(email) {\n    // update the profile's email address\n    this.email = email;\n  }\n  \n  updateAvatar(url) {\n    // update the profile's avatar url\n    this.avatar_url = url;\n  }\n  \n  getName() {\n    // return the profile's name\n    return this.name;\n  }\n  \n  getEmail() {\n    // return the profile's email\n    return this.email;\n  }\n  \n  getAvatarUrl() {\n    // return the profile's avatar url\n    return this.avatar_url;\n  }\n}"}
{"instruction": "Modify the given code to set the third parameter to 0", "input": "def foo(x, y, z):\n    print(x, y, z)", "output": "def foo(x, y, z = 0):\n    print(x, y, z)"}
{"instruction": "Change the following code to a yield statement so that it can be used as a generator.", "input": "def fibonacci():\n  a, b = 0, 1\n  while True:\n    yield a\n    a, b = b, a + b", "output": "def fibonacci(): \n  a, b = 0, 1\n  while True: \n    a, b = b, a + b \n    yield a"}
{"instruction": "Describe an effective way to debug a JavaScript program.", "input": "", "output": "A good approach to debugging a JavaScript program is to start by checking for syntax errors. This can be done by using an integrated development environment (IDE) or text editor with built-in syntax checking capabilities. Additionally, the JavaScript console can be used to inspect variables and view output. It is also useful to set breakpoints in the code and step through the code line-by-line to identify the cause of any issues."}
{"instruction": "Create an Angular Directive for a text box that alerts when its contents change.", "input": "", "output": "import { Directive, ElementRef, HostListener } from '@angular/core';\n\n@Directive({\n selector: '[appNotifyOnChange]'\n})\nexport class NotifyOnChangeDirective {\n constructor(private el: ElementRef) { }\n\n@HostListener('input', ['$event'])\nonChange(event) {\n alert('Value changed to: ' + event.target.value);\n}\n}"}
{"instruction": "Edit the given python code to execute the arithmetic operation.", "input": "a = 8\nb = a+2", "output": "a = 8\nb = a + 2\nc = a * b\nprint(c)"}
{"instruction": "Convert this expression in to postfix notation.", "input": "A + B * C", "output": "ABC*+"}
{"instruction": "Debug the following code to check if it has any syntax errors.", "input": "for (int i = 0; i < 5; i++)\n    println(\"Hello World\");", "output": "for (int i = 0; i < 5; i++) {\n    System.out.println(\"Hello World\");\n}"}
{"instruction": "Change the code so it will output the multiplication result when \"multiply\" is clicked.", "input": "<button class=\"button\" onclick=\"calc()\">Multiply</button>\n\n<script>\n    let result;\n    function calc() {\n        // TODO: Output the multiplication result\n    }\n</script>", "output": "<button class=\"button\" onclick=\"calc()\">Multiply</button>\n\n<script>\n    let result;\n    function calc() {\n        result = 4*9\n        alert(`The result of the multiplication is: ${result}`)\n    }\n</script>"}
{"instruction": "Edit the following HTML to link the page with a stylesheet", "input": "<!DOCTYPE html>\n<html>\n<head>\n <title>My Page</title>\n</head>\n<body>\n\n</body>\n</html>", "output": "<!DOCTYPE html>\n<html>\n<head>\n <title>My Page</title>\n <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n</head>\n<body>\n\n</body>\n</html>"}
{"instruction": "Edit the given Python program to print the sum of two given numbers", "input": "firstNumber = 5\nsecondNumber = 10\n\nprint(\"The difference is: \", firstNumber - secondNumber)", "output": "firstNumber = 5\nsecondNumber = 10\n\nprint(\"The sum is: \", firstNumber + secondNumber)"}
{"instruction": "Suggest a way to debug these lines of code.", "input": "// code\nint i = 0;\nwhile (i<10)\n{\n\ti++;\n\tSystem.out.println(\"Something is wrong!\");\n}", "output": "One way to debug these lines of code is to add print statements before and after the loop to print the value of \"i\" both before and after the loop. Then, inside the loop, you can print out the value of \"i\" just before the ``println`` statement and you can also print out the value of ``i`` after the loop is exited. This will help you see which iteration is causing the issues."}
{"instruction": "Modify the code so that it checks if the number input is an integer or a decimal.", "input": "number = input(\"Please input a number: \")", "output": "number = input(\"Please input a number: \")\n\nif type(number) == int:\n    print(\"Input is an integer\")\nelse:\n    print(\"Input is a decimal\")"}
{"instruction": "You need to write a CSS rule to change the background color of all divs in a web page.", "input": "", "output": "div {\n  background-color: blue;\n}"}
{"instruction": "Edit the following code snippet to add if/else logic for printing a success message.", "input": "num1 = 5\nnum2 = 6\nif num1 > num2:\n  print(\"The number is greater than 5.\")", "output": "num1 = 5\nnum2 = 6\nif num1 > num2:\n  print(\"The number is greater than 5.\")\nelse:\n  print(\"Success! The number is less than or equal to 5.\")"}
{"instruction": "Change the function to eliminate passing by reference", "input": "def f(arr):\n    arr.remove(arr[0])", "output": "def f(arr):\n    arr_copy = arr[::]\n    arr_copy.remove(arr_copy[0])\n    return arr_copy"}
{"instruction": "Edit the following code to use a dictionary instead of a list.", "input": "list = [1, 3, 5]\ntotal = 0\nfor num in list:\n    total += num", "output": "dict = {1:1, 3:3, 5:5}\ntotal = 0\nfor num in dict.values():\n    total += num"}
{"instruction": "Change the background color of the second element in a list in CSS.", "input": "", "output": "ul li:nth-child(2){\n  background-color: #e6e6e6;\n}"}
{"instruction": "Modify the following code to kill a thread after 10 seconds.", "input": "import threading \nfrom time import sleep\n  \ndef worker(): \n    try: \n        while True: \n            print(\"Thread\") \n            sleep(1) \n\nthreads = [] \nfor x in range(40): \n    t = threading.Thread(target=worker) \n    threads.append(t) \n    t.start()", "output": "import threading \nimport signal \nfrom time import sleep \n\ndef exitThread(signum, frame): \n    raise SystemExit \n\ndef worker(): \n    try: \n        signal.signal(signal.SIGALRM, exitThread) \n        signal.alarm(10) \n        while True: \n            print(\"Thread\")  \n            sleep(1) \n\nthreads = [] \nfor x in range(40): \n    t = threading.Thread(target=worker) \n    threads.append(t) \n    t.start()"}
{"instruction": "Edit this code to create a function which prints the Fibonacci series.", "input": "", "output": "def Fibonacci(n): \n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \nfor n in range(10):\n    print(Fibonacci(n))"}
{"instruction": "Edit the code to extract the data from the given dictionary.", "input": "data = {\n'name': 'John',\n'age': 23,\n'address': {\n  'street': '123 Main Street',\n  'city': 'Los Angeles'\n  }\n}", "output": "name = data['name']\nage = data['age']\nstreet = data['address']['street']\ncity = data['address']['city']"}
{"instruction": "Create a sass function to change the text color of a web page", "input": "", "output": "@function text-color($text-color, $background-color) {\n  // Calculate how much Black and White needs to be in the text to be readable\n  $res: 0;\n  $black: 0;\n  $white: 0;\n\n  @if (lightness($background-color) > 50) {\n    // Use black on light backgrounds\n    $black: 100%;\n    $white: (1 - ( (255 - ( lightness($text-color) * 2.55)) / ( lightness($background-color) * 2.55 ) ) ) * 100%;\n  } @else {\n    // Use white on dark backgrounds\n    $black: (1 - (( lightness($text-color) * 2.55) / ( 255 - (lightness($background-color) *  2.55)))) * 100%;\n    $white: 100%;\n  }\n\n  $res: ( $black < $white ) ? mix(black, $text-color, $black) : mix(white, $text-color, $white );\n\n  @return $res;\n\n}"}
{"instruction": "Generate a function to convert an infix expression to a postfix expression.", "input": "\"A + B * C\"", "output": "def infix_to_postfix(exp):\n  stack = []\n  postfix_exp = \"\"\n  # Convert the expression to a list\n  exp_list = exp.split()\n\n  for char in exp_list:\n    # If the character is an operand, append it \n    if char in ['A', 'B', 'C']:\n      postfix_exp += char\n    # If the character is an operator, push it to the stack\n    elif char in ['+', '-', '*', '/']:\n      stack.append(char)\n    # When the closing parentheses is encountered, pop all the operators from the stack\n    elif char == ')':\n      while stack[-1] != '(': \n        postfix_exp += stack.pop() \n      stack.pop() #pop the opening parentheses\n\n  # Pop all the operators in the stack\n  while stack:\n    postfix_exp += stack.pop()\n  \n  return postfix_exp\n\nexp = \"A + B * C\" \nresult = infix_to_postfix(exp) \nprint(result) #ABC*+"}
{"instruction": "Edit the following code to ensure that the conditions in the if-else statement are met.", "input": "if (x == 2 && y == 2) {\n   console.log(\"x equals y\");\n}", "output": "if (x == 2 && y == 2) {\n   console.log(\"x equals y\");\n} else if (x != 2 && y != 2) {\n   console.log(\"x does not equal y\");\n}"}
{"instruction": "Write a JavaScript function to modify given list and convert all elements to lowercase.", "input": "['Hello', 'WoRld', '!']", "output": "function toLowerCase(list) {\n  return list.map(el => el.toLowerCase());\n}\n\ntoLowerCase(['Hello', 'WoRld', '!']); // => [\"hello\", \"world\", \"!\"]"}
{"instruction": "Edit the given HTML structure to center the content in the page.", "input": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>My First Web Page</title>\n</head>\n<body>\n\n</body>\n</html>", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>My First Web Page</title>\n</head>\n<body style =\"text-align:center;\">\n\n</body>\n</html>"}
{"instruction": "Given an array of strings, find the longest common prefix string.", "input": "arr = [\"Code\", \"Coder\", \"Codecademy\", \"Codesigner\"]", "output": "\"\"\"\nGiven an array of strings, find the longest common prefix string.\n\"\"\"\ndef longest_common_prefix(arr): \n    if len(arr) == 0: \n        return \"\" \n \n    min_length = len(min(arr, key = len)) \n  \n    result = \"\" \n    i = 0\n    while i < min_length: \n        char = arr[0][i] \n        for j in range(1, len(arr)): \n            if arr[j][i] != char: \n                return result \n        result += char \n        i += 1\n    return result\n\nprint(longest_common_prefix(arr)) # Code"}
{"instruction": "Edit the following HTML page to add a new heading and a link.", "input": "<html>\n <head>\n  <title>Example Site</title>\n </head>\n <body>\n  <h1>Hello World!</h1>\n  <p>This is a Sample Page.</p>\n </body>\n</html>\nLink: http://example.com\nHeading: Sample Page", "output": "<html>\n <head>\n  <title>Example Site</title>\n </head>\n <body>\n  <h1>Hello World!</h1>\n  <h2>Sample Page</h2>\n  <p>This is a Sample Page</p>\n  <a href=\"http://example.com\">Link</a>\n </body>\n</html>"}
{"instruction": "Modify the CSS in the given HTML code to style the web page", "input": "<html>\n <head>\n  <title>Styled Page</title>\n </head>\n <body>\n  <h1>Styled Page</h1>\n </body>\n</html>", "output": "<html>\n <head>\n  <title>Styled Page</title>\n  <style type=\"text/css\">\n    body {\n        background-color: white;\n    }\n    h1 {\n        font-family: 'Arial', sans-serif;\n        font-size: 30px;\n        color: black;\n        text-align: center;\n    }\n  </style>\n </head>\n <body>\n  <h1>Styled Page</h1>\n </body>\n</html>"}
{"instruction": "In the following code, identify the bug and suggest a fix.", "input": "def add_two_strings(string1, string2):\n    return string1 + string2", "output": "def add_two_strings(string1, string2):\n    \"\"\"A function to add two strings together and return the concatenated result.\"\"\"\n    if isinstance(string1, str) and isinstance(string2, str):\n        return string1 + string2\n    else:\n        raise TypeError(\"Both arguments must be strings\")"}
{"instruction": "How could you modify the following JavaScript code to generate a random number between 0 and 10?", "input": "var randomNum = Math.random()", "output": "var randomNum = Math.floor(Math.random() * (11 - 0)) + 0;"}
{"instruction": "Edit this CSS code to make the background-color of the body green.", "input": "body {\n    font-family: sans-serif;\n    width: 75%;\n    margin: 0 auto;\n}", "output": "body {\n    font-family: sans-serif;\n    width: 75%;\n    margin: 0 auto;\n    background-color: green;\n}"}
{"instruction": "Name the error in the example code.", "input": "Example Code:\ndef do_math():\nnum1 = 5\nnum2 = 3\nsum = num1 + num2\nreturn", "output": "The error is \"Missing Return Statement\"."}
{"instruction": "Edit the given Python code to make the algorithm run faster.", "input": "def slow_algo(n):\n    result = 0\n    for i in range(n):\n        result += i\n    return result", "output": "def fast_algo(n):\n    result = (n * (n + 1))// 2\n    return result"}
{"instruction": "Modify the following code to include a try/except statement.", "input": "def read_file(filename):\n    with open(filename) as f:\n        return f.read()", "output": "def read_file(filename):\n    try:\n        with open(filename) as f:\n            return f.read()\n    except FileNotFoundError:\n        print(f\"File {filename} was not found.\")"}
{"instruction": "Modify the following CSS code to change the background color of the element to \"#FFC0CB\"", "input": ".main-page {\n    background-color: #FFF;\n}", "output": ".main-page {\n    background-color: #FFC0CB;\n}"}
{"instruction": "Modify the code to account for a list containing only one item.", "input": "def sum_list(list):\n    result=0\n    for number in list:\n        result+=number\n    return result", "output": "def sum_list(list):\n    if len(list) == 0:\n        return 0\n    elif len(list) == 1:\n        return list[0]\n    else:\n        result=0\n        for number in list:\n            result+=number\n        return result"}
{"instruction": "Create a SQL query to edit the contents of the \"employee\" table", "input": "Update the column \"salary\" of the employee with ID = 5", "output": "UPDATE employee\nSET salary=10000\nWHERE id=5;"}
{"instruction": "How do you perform error handling in JavaScript?", "input": "", "output": "In JavaScript, error handling can be done with try...catch statements. The syntax of the try...catch statement consists of a try block followed by one or more catch clauses. The try block contains the code that may throw an error, whereas the catch block contains the code that will be executed if an error is thrown. The error object can be used to get information about the error."}
{"instruction": "How does error handling work in Java?", "input": "", "output": "Error handling in Java is done using Exceptions. When something unexpected happens, a special type of object called an Exception is thrown. In Java, errors are handled by writing code to catch the Exception and resolving it. The code to handle Exceptions is usually placed in a try-catch block, which defines what to do in the event of an error. This allows the program to continue running without crashing."}
{"instruction": "Debug the following code snippet in Python to find the maximum number accross a list of integers.", "input": "lst = [-1, 5, 10, 0, -9]", "output": "def find_maximum(lst):\n  max_value = float('-inf')\n  for i in lst:\n    if i > max_value:\n      max_value = i\n  return max_value\n\nprint(find_maximum(lst))"}
{"instruction": "Edit this piece of code to work with negative numbers", "input": "def sum_positive(arr): \n    result = 0\n    for num in arr:\n        if num >= 0:\n            result += num\n    return result", "output": "def sum_positive(arr): \n    result = 0\n    for num in arr:\n        if num != 0:\n            result += abs(num)\n    return result"}
{"instruction": "Edit the code to print out the HTML code for a table with three columns.", "input": "", "output": "<table>\n<tr>\n <th>Column 1</th>\n <th>Column 2</th>\n <th>Column 3</th>\n</tr>\n<tr>\n <td>Row 1 Column 1</td>\n <td>Row 1 Column 2</td>\n <td>Row 1 Column 3</td>\n</tr>\n</table>"}
{"instruction": "Debug the following code to correct a logical error.", "input": "def sort_list(nums):\n    sorted_nums = []\n    for i in range(len(nums)):\n        print(max(nums))\n        sorted_nums.append(max(nums))\n        nums.remove(max(nums))\n    return sorted_nums", "output": "def sort_list(nums):\n    sorted_nums = []\n    for i in range(len(nums)):\n        max_num = max(nums)\n        sorted_nums.append(max_num)\n        nums.remove(max_num)\n    return sorted_nums"}
{"instruction": "Edit the following code to print out the maximum value from an array of numbers.", "input": "[7, 8, 2, 9, 4]", "output": "arr = [7, 8, 2, 9, 4]\nmax_val = 0\nfor num in arr:\n    if num > max_val:\n        max_val = num\nprint(max_val) # Outputs 9"}
{"instruction": "Edit the following code to remove the syntax error so that the program will run correctly.", "input": "def double(x):\nreturn x * 2", "output": "def double(x):\n    return x * 2"}
{"instruction": "Test the following Python code for any errors.", "input": "def calculate_mean(numbers):\n    total_sum = 0;\n    for n in numbers:\n        total_sum += n\n    mean = total_sum / 10   # length of numbers", "output": "No errors have been found in the code."}
{"instruction": "Edit the following C code to remove any syntax errors.", "input": "int main()\n{\n  int a,b;\n  printf(\"Enter two numbers:\");\n  scanf(\"%d &d\", &a, &b)\n  printf(\"Product = %d\", a*b)\n  return 0;\n}", "output": "int main()\n{\n  int a,b;\n  printf(\"Enter two numbers:\");\n  scanf(\"%d %d\", &a, &b);\n  printf(\"Product = %d\", a*b);\n  return 0;\n}"}
{"instruction": "Edit the following code in Java to include a new method \u201cprintName()\u201d.", "input": "public class Person {\n    String name;\n    void displayAge(){\n        System.out.println(\"age is: \"+ age);   \n    }\n}", "output": "public class Person {\n    String name;\n    \n    void displayAge(){\n        System.out.println(\"age is: \"+ age);   \n    }\n    \n    void printName(){\n        System.out.println(\"Name: \"+ name);\n    }\n}"}
{"instruction": "Describe the process of debugging in C programming.", "input": "", "output": "Debugging is the process of finding and fixing errors in a program's code. In C programming, debugging involves finding and fixing syntax errors, logical errors, and runtime errors. To debug a C program, you must use a debugging tool such as a debugger or a print statement. The debugging process involves setting breakpoints, examining the current state of the program, modifying data, and stepping through the code to analyze its execution."}
{"instruction": "Edit the code in Python so that the function returns the highest odd number in the list.", "input": "def highest_odd_number(numbers):\n    highest = 0\n    for number in numbers:\n        if number % 2 != 0 and number > highest:\n            highest = number\n    return number", "output": "def highest_odd_number(numbers):\n    highest = 0\n    for number in numbers:\n        if number % 2 != 0 and number > highest:\n            highest = number\n    return highest"}
{"instruction": "Change the following array so that it orders in ascending order", "input": "array = [3, 7, 1, 8, 4]", "output": "array.sort()"}
{"instruction": "Edit the given function so that it returns the sum of all numbers in the input array.", "input": "def get_sum(arr):\n    return arr[0]", "output": "def get_sum(arr):\n    sum = 0\n    for item in arr:\n        sum += item\n    return sum"}
{"instruction": "Modify the following code to print out \"The result is 30\".", "input": "int a = 10\nint b = 20\nConsole.WriteLine(\"The result is \" + a + b)", "output": "int a = 10;\nint b = 20;\nConsole.WriteLine(\"The result is \" + (a + b).ToString());"}
{"instruction": "Use the given test data to debug the following code.", "input": "def check_odd_even(number):\n    if number % 2 == 0:\n        print(\"even\")\n    else:\n        print(\"odd\")\n\nTest data: \n1. number: 4 \n2. number: -7", "output": "Test 1:\ncheck_odd_even(4)\n\nOutput:\n'even'\n\nTest 2:\ncheck_odd_even(-7)\n\nOutput:\n'odd'"}
{"instruction": "Change the HTML element to have a font size of 10px", "input": "<p>Hello World!</p>", "output": "<p style=\"font-size:10px;\">Hello World!</p>"}
{"instruction": "Change the following list of strings into a single combined string.", "input": "my_list = [\"Hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]", "output": "# Create the string from the list\nmy_string = ' '.join(map(str, my_list)) \n# Print the string\nprint(my_string) # Hello world this is a test"}
{"instruction": "Write a CSS rule that changes the color of all the links in a webpage to blue.", "input": "", "output": "a {\n  color: blue;\n}"}
{"instruction": "Change the value of the third element in the following array.", "input": "int[] arr = {1, 3, 4, 5};", "output": "arr[2] = 10;"}
{"instruction": "Write a function in JavaScript to validate a credit card number.", "input": "", "output": "function validateCreditCardNumber(number) {\n    // remove any spaces or dashes\n    number = number.replace(/\\s/g, \"\"); // remove any spaces\n    number = number.replace(/-/g, \"\"); // remove any dashes\n    // check for valid credit card length\n    if (number.length != 16) {\n        return false;\n    }\n    // check that each number is a valid number\n    for (let i = 0; i < 15; i++) {\n        let n = parseInt(number[i]);\n        if (isNaN(n)) {\n            return false;\n        }\n    }\n    // validate the credit card\n    let sum = 0;\n    for (let i = 0; i < 15; i++) {\n        let n = parseInt(number[i]);\n        if (i % 2 == 0) {\n            n *= 2;\n            if (n > 9) { \n                n = (n % 10) + 1;\n            }\n        }\n        sum += n;\n    }\n    let last = parseInt(number[15]);\n    let check = 10 - (sum % 10);\n    return last == check;\n}"}
{"instruction": "Edit the following code to calculate the standard deviation of a given list", "input": "", "output": "def calculate_std_dev(nums):\n    mean = sum(nums)/len(nums)\n    sum_deviation = 0\n    for num in nums:\n        diff = num - mean\n        squared_deviation = diff ** 2\n        sum_deviation += squared_deviation\n    std_dev = (sum_deviation/(len(nums)-1)) ** 0.5\n    return std_dev"}
{"instruction": "Describe what a software bug is.", "input": "", "output": "A software bug is a mistake, error or an unexpected behavior or result in a computer program or system that causes it to produce an incorrect or unexpected result, or to behave in unintended ways. It is generally caused by errors in the source code or the semantic understanding of the code that is written. A software bug can occur at any level of the software development process, from the design stage to the compilation stage, and can be caused by incorrect specifications, poor coding, incorrect debugging or incorrect implementation."}
{"instruction": "Edit this HTML snippet such that it displays 'Hello World' in bold.", "input": "<div>Hello World</div>", "output": "<div><b>Hello World</b></div>"}
{"instruction": "Change the given code so that it prints the sentence \"Hello, World!\"", "input": "print(\"Goodbye, World!\")", "output": "#Change the given code so that it prints the sentence \"Hello, World!\"\n\nprint(\"Hello, World!\")"}
{"instruction": "edit the code so that it prints out the result", "input": "val = 5\nsum = 0\nsum = sum + val", "output": "val = 5\nsum = 0\nsum += val\nprint(sum) # prints 5"}
{"instruction": "Change the syntax of the code so that it prints the smallest and largest numbers from a given array.", "input": "list1 = [2, 5, 3, 1]  \nprint(list1)", "output": "list1 = [2, 5, 3, 1]  \nprint(min(list1), max(list1))"}
{"instruction": "Change the following program so that it prints the squares of numbers from 0 to 10.", "input": "for i in range(10):\n print(i)", "output": "for i in range(11):\n print(i*i)"}
{"instruction": "Modify the following JavaScript code to find all of the prime numbers from 1 to 100", "input": "for (let i = 1; i <= 10; i++) {\n    console.log(i);\n}", "output": "for (let i = 1; i <= 100; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n        if (i % j == 0) {\n            isPrime = false;\n            break;\n        }\n    }\n    if (isPrime) {\n        console.log(i);\n    }\n}"}
{"instruction": "Edit the Python code so that it prints out the total number of elements in the list.", "input": "list = [1, 2, 3, 4, 5]", "output": "list = [1, 2, 3, 4, 5]\nprint(\"Total number of elements in the list: \", len(list))"}
{"instruction": "Edit the following code to print true if the condition is met, false if not.", "input": "a = 5\nb = 3\n\nif (a > b):\n    print(\"true\")", "output": "a = 5\nb = 3\n\nif (a > b):\n    print(True)\nelse:\n    print(False)"}
{"instruction": "Edit the following HTML string so that it sets the background color of the page to \"blue\".", "input": "<html>\n<body>\n</body>\n</html>", "output": "<html>\n<body style=\"background-color: blue;\">\n</body>\n</html>"}
{"instruction": "Make changes to this code to fix the bug.", "input": "def example_function(a, b):\n    c = 0\n    for i in range(a, b+1):\n        c -= i\n    return c", "output": "def example_function(a, b):\n    c = 0\n    for i in range(a, b+1):\n        c += i\n    return c"}
{"instruction": "Modify the code to display a simple error message whenever a parameter is passed as string.", "input": "function sum(a, b) {\n  return a + b;\n}", "output": "\"\"\"\nModify the code to display a simple error message whenever a parameter is passed as string\n\"\"\"\n\nfunction sum(a, b) {\n  // Test if either a or b is a string\n  if (typeof a === 'string' || typeof b === 'string') {\n    throw new Error('Parameters must be numbers');\n  }\n  return a + b;\n}"}
{"instruction": "Correct any errors in the following code.", "input": "def get_student_avg (studentss):\n    for stdent in studentss:\n        sum = 0\n        for grade in stdent['grades']:\n            sum += grade\n        avg = sum // len studnet['grades']\n        stdent['avg']= avg", "output": "def get_student_avg (studentss):\n    for student in studentss:\n        sum = 0\n        for grade in student['grades']:\n            sum += grade\n        avg = sum // len(student['grades'])\n        student['avg']= avg"}
{"instruction": "Modify the following Java code to print the second element in a given array.", "input": "int[] arr = {1, 2, 3, 4, 5};", "output": "int[] arr = {1, 2, 3, 4, 5};\nSystem.out.println(arr[1]);"}
{"instruction": "Change the variable \"str\" below to upper case.", "input": "let str = 'hello world!';", "output": "let str = 'HELLO WORLD!';"}
{"instruction": "Debug the following PHP code which tries to connect to a remote host.", "input": "$host = \"myserver.com\";\n$user = \"admin\";\n$password = \"123456\";\n\n$conn = new mysql_connect($host,$user,$password);\n\nif(!$conn) \n  die(\"Unable to connect!\");", "output": "$host = \"myserver.com\";\n$user = \"admin\";\n$password = \"123456\";\n\n// Connecting, selecting database\n$conn = mysql_connect($host, $user, $password) or die('Could not connect: ' . mysql_error());"}
{"instruction": "Edit the provided HTML structure to add an ordered list inside the body with 3 list items.", "input": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title>My Webpage</title>\n</head>\n<body>\n\n</body>\n</html>", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title>My Webpage</title>\n</head>\n<body>\n<ol>\n  <li>List Item 1</li>\n  <li>List Item 2</li>\n  <li>List Item 3</li>\n</ol>\n</body>\n</html>"}
{"instruction": "Edit the code to check whether the given number is a triangle number.", "input": "def is_triangle_number(num):\n    return num == num", "output": "def is_triangle_number(num):\n    number = 0\n    for i in range(num+1):\n        number += i\n        if number == num:\n            return True\n    return False"}
{"instruction": "Modify the following function to return the maximum value in a list.", "input": "def max_list(lst):\n    max = 0\n    for x in lst:\n        max = x\n    return max", "output": "def max_list(lst):\n    max = None\n    for x in lst:\n        if max is None or x > max:\n            max = x\n    return max"}
{"instruction": "Edit the following code to add a sharing feature that posts to Facebook.", "input": "def share(message):\n    #code here", "output": "def share(message):\n    import facebook\n    graph = facebook.GraphAPI(access_token=<ACCESS_TOKEN>)\n    graph.put_object(parent_object='me', connection_name='feed', message=message)"}
{"instruction": "Identify the bug in the following code and provide a solution.", "input": "def calculate_average(numbers):\n    sum = 0\n    for number in numbers:\n       sum += numbers\n    return sum/len(numbers)", "output": "The bug in the code is that the variable \"number\" is not used inside the for loop. Instead, the variable \"numbers\" is used. To fix this, the line \"sum += numbers\" should be replaced with \"sum += number\". This will ensure that the correct variable is used inside the loop and the code will execute as expected."}
{"instruction": "Edit the following HTML code to add the class \"highlighted\" to the paragraph.", "input": "<p>This is a test paragraph</p>", "output": "<p class=\"highlighted\">This is a test paragraph</p>"}
{"instruction": "Create a function to edit a given string, replacing all the vowels with a given character.", "input": "String: \"Hello world\"\nCharacter: 'x'", "output": "\"\"\"\nCreate a function to edit a given string, replacing all the vowels with a given character.\n\"\"\"\ndef replace_vowels(string, replacement_character):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = \"\"\n    for char in string:\n        if char in vowels:\n            new_str += replacement_character\n        else:\n            new_str += char\n    return new_str\n\nif __name__ == '__main__':\n    string = \"Hello world\"\n    replacement_character = 'x' \n    print(replace_vowels(string, replacement_character))"}
{"instruction": "Write a CSS program to change the text color of a given element from red to blue.", "input": "<div>This is an example text</div>", "output": "<div style=\"color: blue;\">This is an example text</div>"}
{"instruction": "Debug the following Java program to get the output \"Can you try again?", "input": "public class TryAgain {\n  public static void main (String[] args) {\n     x = 4;\n     System.out.println(x = 4);\n  }\n}", "output": "public class TryAgain {\n  public static void main (String[] args) {\n     int x = 4;\n     System.out.println(\"Can you try again?\");\n  }\n}"}
{"instruction": "Compute the edit distance between two provided words using the Levenshtein algorithm.", "input": "word1 = \"cat\"\nword2 = \"bat\"", "output": "def levenshteinDistance(word1, word2):\n  m = len(word1)\n  n = len(word2)\n  \n  dp = [[0 for i in range(n + 1)] for j in range(m + 1)] \n  \n  for i in range(m + 1): \n    for j in range(n + 1): \n      if i == 0: \n        dp[i][j] = j\n        \n      elif j == 0: \n        dp[i][j] = i\n      \n      elif word1[i - 1] == word2[j - 1]: \n        dp[i][j] = dp[i - 1][j - 1] \n      \n      else: \n        dp[i][j] = 1 + min(dp[i][j - 1],  \n                            dp[i - 1][j],  \n                            dp[i - 1][j - 1]) \n\n  return dp[m][n]"}
{"instruction": "Edit the code below so that the variable 'name' cannot be modified after the first print statement.", "input": "name = \u201cAlice\u201d\nprint(name)\nname = \u201cBob\u201d", "output": "name = \u201cAlice\u201d\nprint(name)\nname = \"Alice\""}
{"instruction": "Debug the following code to print the correct output.", "input": "num = [2, 5, 12, 8]\noutput = []\n\nfor n in num:\n  output.apend(n**2)\n\nprint(output)", "output": "num = [2, 5, 12, 8]\noutput = []\n\nfor n in num:\n  output.append(n**2)\n\nprint(output)"}
{"instruction": "Modify the given code to be able to print an asterisk pyramid as specified in the output.", "input": "rows = 5\n\nfor i in range(0, rows):\n    for j in range(0, i + 1):\n        print(\"*\", end=' ')\n    print(\"\\r\")", "output": "rows = 5\n\nfor i in range(0, rows):\n    for j in range(0, rows-i-1):\n        print(end=\" \")\n    for j in range(0, i + 1):\n        print(\"*\", end=' ')\n    print(\"\\r\")"}
{"instruction": "Modify the following code to print out all even numbers in the list.", "input": "lst = [1, 2, 3, 4, 5]", "output": "for i in lst:\n    if i % 2 == 0:\n        print(i)"}
{"instruction": "Amend the following Python code to add error handling to the function print_score.", "input": "def print_score(score):\n    print(f'The score is {score}')", "output": "def print_score(score):\n    try:\n        score = int(score)\n        print(f'The score is {score}')\n    except ValueError:\n        print(\"The score must be an integer.\")"}
{"instruction": "Edit the following code to increment a variable by one when its value is less than 10.", "input": "int i = 5;", "output": "int i = 5;\nif (i < 10) {\n    i++;\n}"}
{"instruction": "Given a string, change the spaces between words to underscores", "input": "String: \"This is a string\"", "output": "String str = \"This is a string\";\nString newStr = str.replaceAll(\"\\\\s\", \"_\");\nSystem.out.println(newStr);  // This_is_a_string"}
{"instruction": "Modify the code in Python to convert a lower case string to an upper case string.", "input": "'hello world'", "output": "string = 'hello world'\nstring = string.upper()\nprint(string)"}
{"instruction": "Edit the following code to print out all even numbers from 1 to 10.", "input": "for i in range(1,11):\n    print(i)", "output": "for i in range(1,11):\n    if i % 2 == 0:\n        print(i)"}
{"instruction": "Change the background color of all element with the class \"container\" to blue.", "input": "", "output": "document.querySelectorAll(\".container\").forEach(function(container){\n  container.style.backgroundColor = \"blue\";\n});"}
{"instruction": "Modify the following code so that it prints the Fibonacci numbers up to the given number", "input": "x = 10", "output": "def fibonacci(x):\n    a = 0\n    b = 1\n    if x < 0:\n        return []\n    elif x == 0:\n        return 0\n    elif x == 1:\n        return [0, 1]\n    else:\n        c = a + b\n        res = [a, b, c]\n        while c < x:\n            a = b\n            b = c\n            c = a + b\n            res.append(c)\n        return res"}
{"instruction": "Fix the code by making changes with the appropriate syntax.", "input": "def add_two_numbers(a, b)\n\treturn a + b", "output": "def add_two_numbers(a, b):\n    return a + b"}
{"instruction": "Change the following code snippet to generate a random integer from 0 to 10.", "input": "", "output": "import random\n\nrandom_int = random.randint(0, 10)"}
{"instruction": "Classify this code error as a runtime error or a compile error", "input": "def foo(x):\n    if x > 0\n        print(\"x is positive\")", "output": "Compile error"}
{"instruction": "Edit the following code so that it prints the sum of all elements of given array", "input": "arr = [1,5,8,4,2]\ndef sumArray(arr):\n    for i in len(arr):\n        print(arr[i])", "output": "arr = [1,5,8,4,2]\ndef sumArray(arr):\n    total = 0\n    for i in arr:\n        total += i\n    print(total)"}
{"instruction": "Edit the following JavaScript code snippet to add an event listener to the button such that when it is clicked, an alert message is shown.", "input": "let button = document.querySelector(\"#button\");", "output": "let button = document.querySelector(\"#button\");\nbutton.addEventListener(\"click\", function(){\n alert(\"Button was clicked!\");\n});"}
{"instruction": "Edit the below program to print the square of numbers from 0 to 10.\n\ndef printSquare():\n  for i in range(10):\n    print(i)", "input": "", "output": "def printSquare():\n  for i in range(10):\n    print(i**2)"}
{"instruction": "Identify the bug in the following python code:\n\ndef foo(x):\n    x[0] = 2", "input": "[0, 1, 2]", "output": "This code is trying to modify an immutable object (a tuple) as it is attempting to assign a value to the first element in a tuple. The correct way to do this is with a list, not a tuple. The code should be changed to:\n\ndef foo(x):\n    x[0] = 2\n    \nwhere the input x is a list instead of a tuple."}
{"instruction": "Modify the previous program to also print the sum of the subarray elements", "input": "arr = [1, 4, 6, 8, -5, 7], k = 11", "output": "max_sum = 0 \nstart = 0 \nend = 0\n\n# Loop through each element of the array\nfor i in range(len(arr)): \n    sum = 0\n  \n    # Find maximum sum subarray\n    for j in range(i, len(arr)): \n        sum += arr[j] \n        if (sum > max_sum and sum <= k): \n            max_sum = sum \n            start = i \n            end = j \n  \n# Print maximum subarray and its sum\nprint(\"Maximum sum subarray with sum <=\", k, \"is\") \nprint(\"[\", end=\"\") \nfor i in range(start, end+1): \n    print(arr[i], end=\", \") \nprint(\"]\")\nprint(\"Sum of the subarray elements:\", max_sum)"}
{"instruction": "Modify the program to take input from the user and create a two-dimensional array in Python.", "input": "", "output": "rows, cols = (int(x) for x in input(\"Enter size of 2D array: \").split())\narr = [[None for x in range(cols)] for y in range(rows)]\nfor i in range(rows):\n    for j in range(cols):\n        arr[i][j] = int(input(\"Enter element: \"))"}
{"instruction": "Modify the following code to get the desired output.", "input": "for i in range(1, 7):\n    for j in range(1, i):\n        print(j)", "output": "for i in range(1, 7):\n    for j in range(1, i+1):\n        print(j, end=' ')\n    print()"}
{"instruction": "Change this code so that it uses an appropriate data structure.", "input": "x = 0 \ny = 0", "output": "coordinates = (0,0)"}
{"instruction": "Edit the given C++ code to find and print the maximum number in an array of integers.", "input": "int a[5] = {2, 3, 4, 5, 1};", "output": "int a[5] = {2, 3, 4, 5, 1};\n\nint maxNum = a[0];\n\nfor(int i = 1; i < 5; i++)\n{\n if(a[i] > maxNum)\n  maxNum = a[i];\n}\n\n// maximum number is:\ncout << maxNum << endl;"}
{"instruction": "Select what section of the code must be changed for the following C++ code snippet to compile correctly.", "input": "int main() {\n    std:cout << \"Hello World!\";\n    return 0;\n}", "output": "The section of the code that must be changed is: std:cout << \"Hello World!\";\nThe correct expression should be: std::cout << \"Hello World!\";"}
{"instruction": "Edit the following JSON code to include the given data.", "input": "{\n  \"users\": \n  [\n    { \n      \"name\": \"John\"\n    } \n  ]\n}\n\nNew data to add:\nname: \"Jane\",\nage: 25", "output": "{\n  \"users\": \n  [\n    { \n      \"name\": \"John\"\n    },\n    { \n      \"name\": \"Jane\",\n      \"age\": 25\n    }\n  ]\n}"}
{"instruction": "Change the following loop so that it prints out the numbers from 10 to 1 in descending order.", "input": "for i in range(1, 11):\n    print(i)", "output": "for i in range(10, 0, -1):\n    print(i)"}
{"instruction": "Edit the following piece of code to form a valid sentence.", "input": "This poet is one of America's most loved poets.", "output": "This poet is one of America's most beloved poets."}
{"instruction": "Edit a JSON object so that it stores information about a person in a defined format.", "input": "{\n  name: John\n}", "output": "{ \n  \"name\": \"John\", \n  \"age\": 0,\n  \"address\": {\n    \"street\": \"\",\n    \"city\": \"\",\n    \"state\": \"\",\n    \"zip\": \"\"\n  }, \n  \"phone\": \"\"\n}"}
{"instruction": "Modify the code to make it compatible with Python 3.", "input": "mylist = range(20)\n\nfor i in mylist:\n    print i", "output": "mylist = list(range(20))\n\nfor i in mylist: \n    print(i)"}
{"instruction": "Modify the following function to print out the 'type' of each argument.", "input": "def print_args(arg1, arg2):\n    print(\"Arg 1:  %s\" % arg1)\n    print(\"Arg 2:  %s\" % arg2)", "output": "def print_args(arg1, arg2):\n    print(\"Arg 1: %s\" % str(type(arg1))) \n    print(\"Arg 2: %s\" % str(type(arg2))) \n    print(\"Arg 1:  %s\" % arg1)\n    print(\"Arg 2:  %s\" % arg2)"}
{"instruction": "How will you modify the following Ruby code to convert a given number to its corresponding alphabetical letter?", "input": "num = 56", "output": "num += 64\nletter = num.chr\nputs letter\n# Output: '8'"}
{"instruction": "Edit the following code to return a Promise in the getMessage() function", "input": "function getMessage() {\n    const fullName = getName();\n    // TODO: return a Promise\n}", "output": "function getMessage() {\n    const fullName = getName();\n    // return a Promise\n    return new Promise ((resolve, reject) => {\n       resolve(fullName);\n    });\n}"}
{"instruction": "Edit the given Python code to compute the mean of the given list of numbers.", "input": "my_list = [10, 20, 30, 40, 50]\nsum = 0.0\n\nfor x in my_list:\n  sum += x", "output": "my_list = [10, 20, 30, 40, 50]\nsum = 0.0\n\nfor x in my_list:\n  sum += x\n\nmean = sum / len(my_list)"}
{"instruction": "Change the following code so that it will only return the words that contain more than 5 characters.", "input": "def get_words(text):\n     return text.split(\" \")", "output": "def get_words(text):\n    return [word for word in text.split(\" \") if len(word) > 5]"}
{"instruction": "Create a HTML page using a basic text editor", "input": "", "output": "<html>\n<head>\n  <title>My Title</title>\n</head>\n<body>\n  <h1>Hello World!</h1>\n</body>\n</html>"}
{"instruction": "Modify the program to support calculating Fibonacci numbers up to the nth number.", "input": "", "output": "def FibonacciSeries(n):\n    if n <= 0:\n        return [0]\n    elif n == 1:\n        return [0,1]\n    else:\n        series = [0,1]\n        for i in range(2, n):\n            curr_num = series[i-1] + series[i-2]\n            series.append(curr_num)\n        return series"}
{"instruction": "Edit the program below to print out the square root of a number.", "input": "#include <iostream> \n \nint main() \n{ \n    int number; \n  \n    std::cout << \"Enter an integer: \"; \n    std::cin >> number; \n  \n    // Add code to print square root of the number \n  \n    return 0;\n}", "output": "#include <iostream> \n#include <cmath>\n \nint main() \n{ \n    int number; \n  \n    std::cout << \"Enter an integer: \"; \n    std::cin >> number; \n  \n    // Add code to print square root of the number \n    std::cout << \"Square root of \" << number << \" is: \" << sqrt(number) << std::endl;\n  \n    return 0;\n}"}
{"instruction": "Using the comment as a guide, edit the code that prints \"X out of 10\" to print \"X out of Y\".", "input": "x = 5\nprint(\"x out of 10\")\n#TODO: replace 10 with the correct variable", "output": "x = 5\nprint(\"x out of \" + str(x))"}
{"instruction": "What is a stack overflow error and how can it be avoided?", "input": "", "output": "A stack overflow error occurs when too many functions are called or variables are used during the execution of a program, resulting in a stack overflow. This error is caused because the stack memory area is too full, and thus it can't store any more data. It can be avoided by using a larger stack, optimizing code to use less function calls, and using fewer local variables. Additionally, using recursive functions and a language with automatic memory management can help prevent stack overflow errors."}
{"instruction": "Modify the Python code below to solve the following error: \"TypeError: 'str' object is not callable\".", "input": "\"\"\"\ndef greet(name):\n    print('Hello', name())\ngreet('John')\n\"\"\"", "output": "def greet(name):\n    print('Hello', name)\ngreet('John')"}
{"instruction": "Edit a piece of code to fix a syntax error.", "input": "def loopList(list) \n  for i in range(5) \n    sum += list i\n  \n  return sum", "output": "def loopList(list): \n  sum = 0\n  for i in range(5):\n    sum += list[i] \n  \n  return sum"}
{"instruction": "Write a CSS code snippet to change the font-size of all the headings to double the original size.", "input": "", "output": "h1, h2, h3, h4, h5, h6 {\n  font-size: 2em;\n}"}
{"instruction": "Change the following text from uppercase to lowercase.", "input": "MY NAME IS JOHN", "output": "my name is john"}
{"instruction": "Edit the HTML structure shown below to include a form tag with an input for a user's name.", "input": "<!DOCTYPE html>\n<html>\n<head>\n <title>My Webside</title>\n</head>\n<body>\n\n</body>\n</html>", "output": "<!DOCTYPE html>\n<html>\n<head>\n <title>My Webside</title>\n</head>\n<body>\n <form>\n  <input type=\"text\" name=\"name\" placeholder=\"Enter your name here\">\n </form>\n</body>\n</html>"}
{"instruction": "Modify the following code to take in a list of numbers and return the average.", "input": "", "output": "def average(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total / len(numbers)"}
{"instruction": "Edit the following C program so that it prints the factorial of a number.", "input": "#include <stdio.h>\n \nint main()\n{\n    int i, num;\n    \n    scanf(\"%d\", &num);", "output": "#include <stdio.h>\n \n//Computes the factorial of a given number\nint factorial(int num)\n{\n    if(num == 0 || num ==1)\n        return 1;\n    return num * factorial(num-1);\n}\n\nint main()\n{\n    int num;\n    scanf(\"%d\", &num);\n    printf(\"Factorial = %d\", factorial(num));\n    return 0;\n}"}
{"instruction": "Edit the following PHP code to add an if-statement.", "input": "$name = 'John';\necho \"My name is \" . $name;", "output": "if (isset($name)) { \n    echo \"My name is \" . $name;\n}"}
{"instruction": "Edit the following code to generate a boolean array with True for odd numbers and False for even numbers", "input": "a = [1, 2, 3, 4, 5]", "output": "import numpy as np\n\na = [1, 2, 3, 4, 5]\nb = np.array([i % 2 for i in a])"}
{"instruction": "Change the following regular expression so that it matches terms beginning with 'g'", "input": "^g", "output": "^g\\w+"}
{"instruction": "Edit the code to make sure that the sum is printed in the console.", "input": "function add(a, b) {\n  let result = a+b;\n  return result;\n}", "output": "function add(a, b) {\n    let result = a+b;\n    console.log('The sum is: ', result);\n    return result;\n  }"}
{"instruction": "Edit the code to correctly define the type of `age`", "input": "const age;", "output": "const age: number;"}
{"instruction": "Fix the following function to make it comply with PEP8 standards.", "input": "def f(x):\nk= x+4\nreturn k", "output": "def f(x):\n    k = x + 4\n    return k"}
{"instruction": "Analyze the given C++ code to identify possible errors.", "input": "int main()\n{\nint x = 0;\nwhile (x <= 10)\n  x = x + 1\nreturn 0;\n}", "output": "There is a missing semicolon after the \"x = x + 1\" line, needed to terminate the while loop."}
{"instruction": "Modify the following program to print the number of occurrences of the character e in string s.", "input": "String s = \"Hello World!\"", "output": "String s = \"Hello World!\";\nint count = 0;\n\nfor (int i=0; i < s.length(); i++) {\n    if (s.charAt(i) == 'e') {\n        count++;\n    }\n}\nSystem.out.println(\"The number of occurrences of character 'e' in the string is: \" + count);"}
{"instruction": "Correct the syntax error in the following HTML structure.", "input": "<div>\n<h1>My Web Page</h>\n<div/>", "output": "<div>\n<h1>My Web Page</h1>\n</div>"}
{"instruction": "Update the following code to fix a syntax error.", "input": "def add_two_number(a,b):\n    return a + b;", "output": "def add_two_numbers(a, b):\n    return a + b"}
{"instruction": "Derive the Hamming distance between two strings using the edit distance algorithm.", "input": "s1 = 'saturday', s2 = 'sunday'", "output": "The Hamming distance between the two strings 'saturday' and 'sunday' is 3. The edit distance algorithm is used to calculate the minimum number of substitution, deletion, and insertion operations required to make two strings identical. In this example, 3 substitution operations are required, making the Hamming distance 3."}
{"instruction": "Modify the given Swift code to compute the product of two numbers and print the result", "input": "a = 5\nb = 8", "output": "var a = 5\nvar b = 8\n\nvar result = a * b\nprint(\"The product of a and b is: \\(result)\")"}
{"instruction": "Analyze the following code and answer the following question: Is there a bug in this code?", "input": "def foo(num):\n  if num == 0:\n    return 1\n  else:\n    return foo(num - 1)", "output": "Yes, there is a bug in this code. The function `foo` does not have a base case and will cause an infinite recursion if it is called with a non-zero argument. The base case should be if `num == 0` then `return 1` else `return foo(num - 1)`."}
{"instruction": "Edit the following line of code to turn the sentence into plural form.", "input": "sentence = \"I have one friend\"", "output": "sentence = \"I have two friends\""}
{"instruction": "Edit the statements given below so that they can be compiled and run without any errors.", "input": "public class Test {\n    public static void main(String[] args) {\n    System.out.println(\"Hello World\");\n    int x;\n    System.out.println(x);\n    }\n}", "output": "public class Test {\n    public static void main(String[] args) {\n    System.out.println(\"Hello World\");\n    int x = 0;\n    System.out.println(x);\n    }\n}"}
{"instruction": "Suggest ways to debug the following code", "input": "x = 'Address'\n    print(\"Topic:\", x)", "output": "- Add four spaces of indentation before the print statement to make it part of the block \n- Check the spelling of x to ensure there is no typo \n- Check the documentation for the correct syntax to print the value of x \n- Check the scope of x to ensure the value has been properly set outside the loop \n- Run the code in a debugger to find any issues that may arise during code execution"}
{"instruction": "Identify errors in the following code and suggest corrections.", "input": "def fucntion_1():\n    param1 = input(\"enter-parameter\")\n    print(\"The parameter is:\" + param1)", "output": "def function_1():\n    param1 = input(\"Enter parameter: \")\n    print(\"The parameter is: \" + param1)\n\nThe issue with the code is that it has a misspelling in the function name (fucntion_1 instead of function_1). The input prompt also lacks a space after \"Enter-parameter\" and a colon should be used at the end of the prompt. Finally, there should be a space between \"The parameter is:\" and the variable param1 in the print statement."}
{"instruction": "Modify the following SQL query so that it returns all the customers whose first names begin with the letter \"A\".", "input": "SELECT * \nFROM Customer", "output": "SELECT * \nFROM Customer\nWHERE first_name LIKE \"A%\""}
{"instruction": "Edit the following function so that it counts the even numbers in the given array.", "input": "arr = [1, 2, 3, 4]", "output": "def countEvens(arr):\n count = 0\n for num in arr:\n  if num % 2 == 0:\n   count += 1\n return count"}
{"instruction": "Change the Python code to find the occurrences of an item in a list", "input": "def count(list_of_items, item): \n    return len(list_of_items)", "output": "def count(list_of_items, item): \n    count = 0\n    for i in list_of_items:\n        if i == item:\n            count += 1\n    return count"}
{"instruction": "Modify the following block of code to set a maximum length of the list", "input": "list = [1, 2, 3, 4, 5, 6]", "output": "list = [1, 2, 3, 4, 5, 6][:5]"}
{"instruction": "Modify the following HTML to open the page with a single button in center that says \"GO!\".", "input": "<body>\n<h1>Welcome!</h1>\n</body>", "output": "<body>\n<h1>Welcome!</h1>\n<div align=\"center\">\n    <button type=\"button\" onclick=\"window.open('https://example.com/')\">GO!</button> \n</div>\n</body>"}
{"instruction": "What are the steps to debug a code?", "input": "", "output": "\"\"\"\nThe steps to debug a code are:\n\n1. Identify the errors in the code. \n2. Identify the source of the errors. \n3. Examine the context of the errors. \n4. Determine possible solutions. \n5. Test each solution and check the results. \n6. Refine the solution by repeating steps 4 and 5 until the issue is resolved. \n\"\"\""}
{"instruction": "Explain how to convert an expression from postfix notation to infix notation", "input": "", "output": "Infix notation is a way of writing an expression in which the operators are placed between the operands, such as 2 + 5, whereas postfix notation is a way of writing an expression in which the operators are placed after the operands, such as 2 5 +. To convert an expression from postfix notation to infix notation, scan the expression from left to right. If an operand is encountered, simply push it onto a stack. If an operator is encountered, pop two operands from the stack and place the operator in between them. Finally, push the resulting expression back onto the stack and repeat this until the end of the expression is reached."}
{"instruction": "Edit the following code to remove the bugs.", "input": "def reverse_string(user_string): \n  if len(user_string) == 0: \n    return \"\" \n  else: \n    return reverse_string(user_string[1:]) + user_string[0] \n    \nprint(reverse_string(\u201ctest\u201d))", "output": "def reverse_string(user_string): \n  reversed_string = ''\n  if len(user_string) == 0: \n    return \"\" \n  else: \n    reversed_string = reverse_string(user_string[1:]) + user_string[0] \n    return reversed_string\n\nuser_string = 'test'\nprint(reverse_string(user_string))"}
{"instruction": "Debug the following bash script to ensure it works as intended.", "input": "#!/bin/bash\n\necho \"Show a list of running processes\"\nps", "output": "#!/bin/bash\n\necho \"Show a list of running processes\"\nps aux | grep -v grep | awk '{print $2 \"  \" $11}'"}
{"instruction": "Modify the following code so that it takes a list of numbers and calculates their median.", "input": "def median(data):", "output": "def median(data):\n    data.sort()\n    length = len(data)\n    if length == 0:\n        return 0\n    if length % 2 == 0:\n        return (data[length // 2] + data[length // 2 - 1]) / 2\n    elif length % 2 == 1:\n        return data[length // 2]"}
{"instruction": "Edit the sentence using the correct punctuation.", "input": "The apple is red", "output": "The apple is red."}
{"instruction": "Modify the given code to multiply two n x n matrices.", "input": "def multiply(m1, m2, n):\n    result = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        for j in range(n): \n            result[i][j] = 0", "output": "def multiply(m1, m2, n):\n    result = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                result[i][j] += m1[i][k] * m2[k][j]\n    return result"}
{"instruction": "Please fix the following broken HTML code.", "input": "<html>\n  <head>\n    <title>Test HTML Page\n  </head>\n  <body>\n/body>\n</html>", "output": "<html>\n  <head>\n    <title>Test HTML Page</title>\n  </head>\n  <body>\n  </body>\n</html>"}
{"instruction": "Modify the code snippet to filter all records from a table using SQL.", "input": "Table Name: StudentTable\nFilter Type: Accepted", "output": "SELECT * FROM StudentTable WHERE Accepted='True';"}
{"instruction": "Given the following dictionary, change the value of the key \"a\" to \"apples\".", "input": "my_dict = {\"a\": \"bananas\", \"b\": \"pears\"}", "output": "my_dict = {\"a\": \"apples\", \"b\": \"pears\"}"}
{"instruction": "Modify the following Java code to reverse a given string.", "input": "public class SimpleStringReverser {\n    public static String reverse(String str) {\n        String result = \"\";", "output": "public class SimpleStringReverser {\n    public static String reverse(String str) {\n        String result = \"\";\n        for(int i = str.length() - 1; i >= 0; i--) {\n            result += str.charAt(i);\n        }\n        return result;\n    }\n}"}
{"instruction": "Modify the following code as required to display the message \u201cHello World\u201d on the screen.", "input": "print(\"Hello\")", "output": "print(\"Hello World\")"}
{"instruction": "Create a HTML function that changes the color of a given element.", "input": "", "output": "function changeColor(element, color){\n    element.style.backgroundColor = color;\n}"}
{"instruction": "Edit the following code to include user input.", "input": "def hello_world():\n    # Prints \"Hello, World!\"\n    print(\"Hello, World!\")", "output": "def hello_world():\n    # Prompt user for input\n    user_input = input(\"Please enter your name: \")\n\n    # Prints \"Hello, {user_input}!\"\n    print(\"Hello, {}!\".format(user_input))"}
{"instruction": "Change the following PHP code to use the new syntax from PHP 7", "input": "<?php\n$joined=join(array(\u2018a\u2019,\u2019b\u2019,\u2019c\u2019));\necho $joined;", "output": "<?php\n$joined = implode(array('a', 'b', 'c'));\necho $joined;"}
{"instruction": "Modify the following code to return the sum of an array", "input": "let numbers = [1, 2, 3]", "output": "let numbers = [1, 2, 3]\n\nfunction sumArray(arr) {\n    let total = 0;\n    for(let i = 0; i < arr.length; i++) {\n        total += arr[i];\n    }\n    return total;\n} \n\nconsole.log(sumArray(numbers));"}
{"instruction": "Change the following code to convert the temperature from Fahrenheit to Celsius.", "input": "def convert_fahrenheit_to_celsius(temperature):\n    return temperature - 32", "output": "def convert_fahrenheit_to_celsius(temperature):\n    return (temperature - 32) * 5 / 9"}
{"instruction": "Debug this Python code and explain why it was not running.", "input": "def string_split(string, n):\nwords = string.split(\" \")\nfor x in words[:n]:\nprint(\" \".join(words[:x]))", "output": "def string_split(string, n):\n    words = string.split(\" \")\n    for x in range(n):\n        print(\" \".join(words[:x]))\n\nThe code was not running as initially written because the range used in the for loop was not provided. Inside the for loop, the variable x needed to be given a range (e.g. range(n)) so that it can iterate over each of the elements of the words list properly. The loop should have looked like this: for x in range(n):."}
{"instruction": "Edit the existing CSS stylesheet by adding a regular font family rule.", "input": "", "output": "body {\n   font-family: Arial, Helvetica, sans-serif;\n}"}
{"instruction": "Change the following Java code to Swift.", "input": "public static int addTwoIntegers(int a, int b) {\n    return a+b;\n}", "output": "func addTwoIntegers(a: Int, b: Int) -> Int {\n    return a + b\n}"}
{"instruction": "Edit this program to print the product of two numbers.", "input": "a = 10\nb = 5\n\nprint(\"The sum of a and b is \", a + b)", "output": "a = 10\nb = 5\n\nprint(\"The product of a and b is \", a * b)"}
{"instruction": "Change the following if-else expression to a ternary operator", "input": "a = 10\nb = 5\n\nif a > b:\n    c = a\nelse:\n    c = b", "output": "c = a if a > b else b"}
{"instruction": "Edit the following code to find the maximum of three numbers", "input": "a = 3\nb = 5\nc = 7", "output": "a = 3\nb = 5 \nc = 7\n\nmaximum = max(a, b, c)\nprint(\"The maximum of three numbers is: \", maximum)"}
{"instruction": "Change the following list of strings to uppercase in Python.", "input": "List: ['one', 'two', 'three']", "output": "list_strings = [\"one\", \"two\", \"three\"]\n\nlist_strings = [string.upper() for string in list_strings]\n\nprint(list_strings)"}
{"instruction": "Edit the following Java program to read 5 integers from the user and display the largest one.", "input": "", "output": "import java.util.*;\n\npublic class LargestOfFive {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int [] numbers = new int [5];\n\n        for(int i=0; i<5; i++) {\n            System.out.print(\"Enter an integer: \");\n            numbers[i] = sc.nextInt();\n        }\n        sc.close();\n\n        int largest = numbers[0];\n\n        for (int i=1; i<5; i++) {\n            if (numbers[i] > largest) \n                largest = numbers[i];\n        } \n\n\n        System.out.println(\"The largest number is \" + largest);\n    }\n\n}"}
{"instruction": "Identify any type error that is present in the following code.", "input": "def sum_of_values(num_list): \n    total = 0\n    for value in num_list:\n        total += value \n    return total/len(num_list)\n\nsquare_value = sum_of_values(5)", "output": "Type error: The function sum_of_values() takes a list as an argument, but the argument provided is an integer (5)."}
{"instruction": "Change the following code to use the ternary operator.", "input": "def compare_num(a, b):\n    if a < b:\n        return -1\n    elif a == b:\n        return 0\n    else:\n        return 1", "output": "def compare_num(a, b):\n    return -1 if a < b else 0 if a == b else 1"}
{"instruction": "Edit this HTML code to only display the title.", "input": "<html>\n<head>\n    <title>HTML Document</title>\n</head>\n<body>\n    <h1>Hello World!</h1>\n</body>\n</html>", "output": "<html>\n<head>\n    <title>HTML Document</title>\n</head>\n</html>"}
{"instruction": "Edit the following JavaScript code to make it able to log even numbers.", "input": "const myArray = [1, 2, 3, 4, 5]\nfor (let i = 0; i < myArray.length; i++) {\n  console.log(myArray[i])\n}", "output": "const myArray = [1, 2, 3, 4, 5]\nfor (let i = 0; i < myArray.length; i++) {\n  if (myArray[i] % 2 == 0) {\n    console.log(myArray[i])\n  }\n}"}
{"instruction": "Edit the Python code block below to print the text in reverse.", "input": "word = \"Hello\"\nprint (word)", "output": "word = \"Hello\"\nprint (word[::-1])"}
{"instruction": "Change the following code so that it accepts a list as an argument and prints each element of the list.", "input": "def print_list(arr):\n\ti = 0\n\twhile (i < len(arr)):\n\t\tprint arr[i]\n\t\ti +=1", "output": "def print_list(arr):\n\tfor ele in arr:\n\t\tprint(ele)"}
{"instruction": "Modify the following code to turn it into an Insertion Sort algorithm.", "input": "def sort_numbers(arr):\n    pass", "output": "def insertion_sort(arr): \n    for i in range(1, len(arr)):\n        x = arr[i]\n        j = i-1\n        while j >= 0 and arr[j] > x:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = x\n    return arr"}
{"instruction": "Can you modify the program so that it prints out all words in the sentence along with their count?", "input": "\"The quick brown fox jumped over the lazy dog.\"", "output": "def print_words_with_count(sentence):\n  word_count = {}\n  words = sentence.split()\n  \n  for word in words:\n    if word not in word_count:\n      word_count[word] = 1\n    else:\n      word_count[word] += 1\n  \n  for word, count in word_count.items():\n    print(\"Word: %s  Count: %d\" % (word, count))"}
{"instruction": "Modify the following JavaScript for loop so it will loop through the array in reverse order.", "input": "for (let i = 0; i < array.length; i++) { \n    console.log(array[i]); \n}", "output": "for (let i = array.length - 1; i >= 0; i--) { \n    console.log(array[i]); \n}"}
{"instruction": "Change the following code so that it will still print the same output but with a better runtime complexity.", "input": "def find_duplicates(list):\n    duplicates = []\n    for i in range(len(list)):\n        current = list[i]\n        for j in range(len(list)):\n            if i != j and list[j] == current:\n                duplicates.append(current)\n    return duplicates", "output": "def find_duplicates(list):\n    duplicates = []\n    seen = set()\n    for i in range(len(list)):\n        current = list[i]\n        if current in seen:\n            duplicates.append(current)\n        else:\n            seen.add(current)\n    return duplicates"}
{"instruction": "Change the following linked list into an array.", "input": "Linked list: 1->3->5->7->9", "output": "# Create a linked list\nclass Node: \n    def __init__(self, data): \n        self.data = data\n        self.next = None\n\n# Function to convert linked list to array\ndef list_to_array(head): \n    arr = []\n    if head is None: \n        return arr\n    cur = head\n    while cur is not None: \n        arr.append(cur.data) \n        cur = cur.next\n    return arr\n\narr = list_to_array(head) \nprint(arr)"}
{"instruction": "Edit the text below and print a new sentence using the same words.", "input": "The moon is bright and beautiful.", "output": "Beautiful and bright, the moon shines."}
{"instruction": "Edit the following Java code to create a method which will calculate the area of a rectangle, given its width and length.", "input": "public class Rectangle {\n  private double width;\n  private double length;", "output": "public class Rectangle {\n  private double width;\n  private double length;\n \n  public double calculateArea() {\n    return width * length;\n  }\n}"}
{"instruction": "Debug the following code by finding the syntax error.", "input": "def calculate_value(nums):\n    result = 0\n    for num in nums\n        result += num\n    return result", "output": "def calculate_value(nums):\n    result = 0\n    for num in nums: # missing colon\n        result += num\n    return result"}
{"instruction": "Debug the following code to make it compile properly.", "input": "def addNumbers(num1, num2)\n  return num1 + num2", "output": "def addNumbers(num1, num2):\n  return num1 + num2"}
{"instruction": "Edit the code to display the output \u201cWelcome to coding!\u201d", "input": "print(\"Welcome to code\")", "output": "print(\"Welcome to coding!\")"}
{"instruction": "Edit the given code to add a new element to the list.", "input": "list = [1, 2, 3]", "output": "list = [1, 2, 3]\nlist.append(4) # Adding new element"}
{"instruction": "Edit the Python code snippet to remove the syntax error.", "input": "def calculate_area(length, width):\n    area = length * width\n    return \u201cThe area is\u201d + area", "output": "def calculate_area(length, width):\n    area = length * width\n    return \"The area is \" + str(area)"}
{"instruction": "Modify the C++ program below to print the average value of an array.", "input": "int array[4] = {2, 3, 5, 7};", "output": "#include <iostream> \n \nint main() \n{ \n    int array[4] = {2, 3, 5, 7}; \n    int sum = 0; \n    for(int i = 0; i < 4; i++)\n    {\n        sum += array[i];\n    }\n    double avg = (double)sum / 4;\n    std::cout << \"Average value of array : \" <<  avg; \n    return 0; \n}"}
{"instruction": "What are the two main types of bug tracking tool?", "input": "", "output": "The two main types of bug tracking tools are issue tracking systems and bug tracking systems. Issue tracking systems are used for managing customer service or support requests. Bug tracking systems are used for managing and tracking software bugs. Both tools are designed to help developers keep track of software issues, prioritize work, assign tasks, and report on progress."}
{"instruction": "Investigate the syntax error in this R script and fix it.", "input": "x <- c(1, 2, 3", "output": "x <- c(1, 2, 3)"}
{"instruction": "Write a CSS rule that changes the text color for all headings on a page.", "input": "", "output": "h1, h2, h3, h4, h5, h6 {\n   color: red;\n}"}
{"instruction": "Modify the following SQL query so that it only returns the customers from the city \"New York\".", "input": "SELECT * \nFROM Customer", "output": "SELECT * \nFROM Customer\nWHERE city = \"New York\""}
{"instruction": "Modify the given code to ensure that the input is a number", "input": "num = input(\"Enter a number: \")", "output": "num = input(\"Enter a number: \")\ntry:\n    num = int(num)\nexcept ValueError:\n    print(\"Input must be a number\")"}
{"instruction": "Edit the following string by replacing the spaces with an underscore.", "input": "This is a sample string", "output": "This_is_a_sample_string"}
{"instruction": "Change the code to allow two parameters to be passed.", "input": "function sum(a) {\n  return a;\n}", "output": "function sum(a, b) {\n  return a + b;\n}"}
{"instruction": "Edit the given HTML code to add a footnote section.", "input": "<code>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Example</title>\n</head>\n<body>\n    <h1>This is a Heading</h1>\n    <p>This is a paragraph.</p>\n</body>\n</html>", "output": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Example</title>\n</head>\n<body>\n    <h1>This is a Heading</h1>\n    <p>This is a paragraph.</p>\n    <footer>\n        <p> Copyright (c) Example.com. All Rights Reserved.</p> \n    </footer>\n</body>\n</html>"}
{"instruction": "Edit the following sentence so that it becomes grammatically correct.", "input": "Sentence: I was leaving to work.", "output": "I was leaving for work."}
{"instruction": "Change the following SQL query so that it only returns rows from the 'employees' table where the salary is higher than 50000.", "input": "SELECT * FROM employees", "output": "SELECT * FROM employees WHERE salary > 50000;"}
{"instruction": "Generate a SQL query to find the names of all users whose credit scores are lower than 50.", "input": "", "output": "SELECT name\nFROM users\nWHERE credit_score < 50"}
{"instruction": "Edit the provided code to yield the correct output.", "input": "def hello_world():\n    string = \"Hello World\"\n    print(string.lower())", "output": "def hello_world():\n    string = \"Hello World\"\n    print(string.upper())"}
{"instruction": "Edit the provided code so that the output is 2021.", "input": "x = 2020\ny = 1\n\nprint(x + y)", "output": "x = 2020\ny = 1\n\nprint(x + y + 1)"}
{"instruction": "Change the following variable to a string.", "input": "a_variable = 8", "output": "a_variable = str(8)"}
{"instruction": "Modify the Python code so that it can be used to find the GCD of 3 numbers.", "input": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n\n    return a", "output": "def gcd(a, b, c): \n    if(b==0 and c==0): \n        return a \n    if(c==0): \n        return gcd(b, a % b) \n    return gcd(gcd(a, b), c)"}
{"instruction": "Look at the given code and find the bug in it.", "input": "def add_numbers(x,y):\n    return x + y + 1", "output": "The bug in the given code is that it adds 1 extra to the result of the function. To fix this, the return statement should be modified to: return x + y."}
{"instruction": "Edit the given Python code to remove duplicate items from the given list.", "input": "my_list = [1, 2, 2, 3, 4, 5, 4]", "output": "def remove_duplicate(my_list):\n    return list(set(my_list))\n\nmy_list = [1, 2, 2, 3, 4, 5, 4]\nprint(remove_duplicate(my_list)) # Output [1, 2, 3, 4, 5]"}
{"instruction": "Write CSS code to change the background color of a div element.", "input": "", "output": "#myDiv {\n    background-color: #00F;\n}"}
{"instruction": "Edit the following HTML to change the font of the page", "input": "<html>\n    <head>\n        <title>My Page</title>\n    </head>\n    <body>\n        <h2>Hello World!</h2>\n    </body>\n</html>", "output": "<html>\n    <head>\n        <title>My Page</title>\n        <style>\n            body {\n                font-family: Arial, sans-serif;\n            }\n        </style>\n    </head>\n    <body>\n        <h2>Hello World!</h2>\n    </body>\n</html>"}
{"instruction": "Edit this HTML code to add a link element in the head of the page.", "input": "<html>\n  <head>\n    <title>Example page</title>\n  </head>\n  <body>\n  </body>\n</html>", "output": "<html>\n  <head>\n    <title>Example page</title>\n    <link href=\"style.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n  </body>\n</html>"}
{"instruction": "Change the given program code to swap the values of two variables 'a' and 'b'.", "input": "let a = 8;\nlet b = 12;", "output": "let a = 12;\nlet b = 8;"}
{"instruction": "Edit the code given below so it can compute the sum of two numeric inputs.", "input": "def add_two_numbers(x, y):\n\t# TODO: Write code that computes and returns the sum of two numeric inputs", "output": "def add_two_numbers(x, y):\n  # Compute and return the sum of two numeric inputs\n  return x + y"}
{"instruction": "Using CSS, change the text color of all elements with class \u201cmain-heading\u201d to red.", "input": "", "output": ".main-heading {\n  color: red;\n}"}
{"instruction": "Debug the following piece of code so that the program functions properly.", "input": "def sub_array(array, num):\n    for i in range(len(array) - 1, 0, -1):\n        if array[i] == num:\n            del array[i]", "output": "def sub_array(array, num):\n    for i in range(len(array) - 1, 0, -1):\n        if array[i] == num:\n            del array[i]\n        else:\n            break"}
{"instruction": "Edit the program to print the given date in the format \"dd/mm/yyyy\".", "input": "year = 2020\nmonth = 5\nday = 3", "output": "# Print date in dd/mm/yyyy format\nprint(\"{:02d}/{:02d}/{:04d}\".format(day, month, year))"}
{"instruction": "Edit the following code snippet so that it prints \"Hello World\" three times", "input": "#include <iostream>\n\nint main(){\n    std::cout << \"Hello world\" << std::endl;\n    return 0;\n}", "output": "#include <iostream>\n\nint main(){\n    for(int i=0; i < 3; i++)\n        std::cout << \"Hello world\" << std::endl;\n    return 0;\n}"}
{"instruction": "Read the following code and debug the errors.", "input": "def double_up(str):\n  double_str = str + \" \" + str\n  strlen = len(str)\n  print(double_str[strlen])", "output": "def double_up(str):\n  double_str = str + \" \" + str\n  strlen = len(str)\n  print(double_str[strlen - 1])"}
{"instruction": "Create a function to evaluate a given expression written in infix notation.", "input": "exp = \"5 + (7 * 8) / 3\"", "output": "def eval_exp(exp): \n    stack = [] \n  \n    for char in exp: \n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or char in \"0123456789\": \n            stack.append(char)\n  \n        else: \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + char + val1))) \n  \n    return int(stack.pop()) \n\nprint(eval_exp(exp))"}
{"instruction": "You need to edit a given code in JavaScript to add multiple classes to a div element.", "input": "<div class=\"main-div\"></div>", "output": "<div class=\"main-div main-class second-class third-class\"></div>"}
{"instruction": "Debug this Java code and explain what was wrong.", "input": "public static int add(int a, int b){\n  int c = a b;\n  return c;\n}", "output": "The code contained a syntax error. In the second line of the code, the operator being used was \"b\" instead of \"+\". The correct line should be \"int c = a + b;\". This error was causing the program to return the wrong value, as it was attempting to perform the wrong calculation."}
{"instruction": "Edit the given C program to print the output in a tabular form using printf.", "input": "#include<stdio.h>\n \nint main(){\n   \n   int n=5;\n   int i;\n   int arr[n];\n   \n   //Adding elements in array\n   for(i=0;i<n;i++){\n      arr[i] = i + 20;\n   }\n   \n   //Printing elements in array\n    for(i=0;i<n;i++){\n      printf(\"%d\\n\",arr[i]);\n   }\n  \n   return 0;\n}", "output": "#include<stdio.h>\n \nint main(){\n   \n   int n=5;\n   int i;\n   int arr[n];\n   \n   //Adding elements in array\n   for(i=0;i<n;i++){\n      arr[i] = i + 20;\n   }\n   \n   //Printing elements in array\n    for(i=0;i<n;i++){\n      printf(\"Number %d: %d\\t\", i+1, arr[i]);\n   }\n  \n   return 0;\n}"}
{"instruction": "Fix any code errors in the given function.", "input": "def addToList list: num\n  list.append(num)\n  return list", "output": "def addToList(List, num):\n  List.append(num);\n  return List"}
{"instruction": "Write a code to get the current US Dollar to Euro exchange rate from the European Central Bank.", "input": "", "output": "\"\"\"\nGet the current Euro to US Dollar exchange rate from the European Central Bank\n\"\"\"\n\nimport requests\nimport json\n\ndef get_currency_exchange_rate():\n    url = 'https://api.exchangeratesapi.io/latest?base=USD'\n    response = requests.get(url)\n    data = json.loads(response.text)\n    return data['rates']['EUR']\n\nif __name__ == '__main__':\n    print(get_currency_exchange_rate())"}
{"instruction": "Make a single change in the following code to throw an error when the argument to the function is negative.", "input": "def calculate_square_root(n):\n    return n**(1/2)", "output": "def calculate_square_root(n):\n    if n < 0:\n        raise ValueError(\"n must be a positive number\")\n    return n**(1/2)"}
{"instruction": "Write a CSS style to change the text color to red for all elements with the class \"important\".", "input": "", "output": ".important {\n    color: red;\n}"}
{"instruction": "Modify the following function to ensure that the number is always greater than zero.", "input": "def get_random_number():\n    return random.randint(-10, 10)", "output": "import random \n\ndef get_random_number():\n    num = random.randint(-10, 10)\n    if num < 0:\n        num = -num\n    return num"}
{"instruction": "How can you add a comment in your JavaScript code that only displays when debug mode is on?", "input": "", "output": "// Add this comment for debug mode\nif (debugMode === true) {\n   console.log('This comment will only display in debug mode.');\n}"}
{"instruction": "Modify the code to perform the mathematical expression \u201cx to the power of y\u201d.", "input": "# Calculate x to the power of y\n# TODO", "output": "# Calculate x to the power of y\nx_pow_y = x**y"}
{"instruction": "Edit this HTML code to create an expandable navigation bar.", "input": "<ul>\n  <li><a href=\"/home\">Home</a></li>\n  <li><a href=\"/about\">About</a></li>\n  <li><a href=\"/contact\">Contact</a></li>\n</ul>", "output": "<ul>\n  <li><a href=\"/home\">Home</a>\n <ul>\n   <li><a href=\"/about\">About</a></li>\n   <li><a href=\"/contact\">Contact</a></li>\n </ul>\n  </li>\n</ul>"}
{"instruction": "Modify the given list to include only unique items.", "input": "my_list = [1, 2, 2, 3, 3, 4]", "output": "my_list = list(set(my_list))"}
{"instruction": "Modify the given JavaScript code to display \"Hello World\" using alert.", "input": "let message = 'Hi';\nalert(message);", "output": "let message = 'Hello World';\nalert(message);"}
{"instruction": "Edit the CSS code to change the font size to 20 pixels.", "input": "p {\n  font-size: 14px;\n}", "output": "p {\n  font-size: 20px;\n}"}
{"instruction": "Analyze the following code and determine if there any potential errors.", "input": "def foo(X, Y):\n    for i in range(1, X):\n        for j in range(1, Y):\n            print i\n    return", "output": "Yes, there is a potential error. The outer loop iterates over the range of 1 to X, but the inner loop iterates over the range of 1 to Y. Because of this, the loop will only be executed Y-1 times. The output will only print the first Y-1 elements of X. To fix this, the outer loop should iterate over the range of 1 to Y instead."}
{"instruction": "Modify the code to ensure that the variable \u2018str\u2019 not being None", "input": "str = input()", "output": "str = input()\nif str is not None and str != '':\n    # do something with the input"}
{"instruction": "How will you debug an unresponsive Flask web application?", "input": "", "output": "To debug an unresponsive Flask web application, you should first check the server logs. If there are any errors, they should be debugged first. Other steps might include disabling caching, checking for memory leaks, checking for database locking, and checking for any long-running requests. You could also use a profiler to run performance analysis on the code and identify any bottlenecks in the code. Lastly, you could use logging or debugging libraries (like pdb) to step-through the code and identify the source of any problems."}
{"instruction": "Insert a code line in the existing program to fix a syntax error.", "input": "int main() \n{\n    printf(\"Hello World!);\n}", "output": "int main() \n{\n    printf(\"Hello World!\"); // added missing closing quotation mark\n}"}
{"instruction": "Edit the following PHP code to return the modular exponentiation of two numbers.", "input": "function mod_exp(base, exponent, modulus){\n    return base^exponent % modulus;\n}", "output": "function mod_exp(base, exponent, modulus){\n    var result = 1;\n    for (var i = 0; i < exponent; i++){\n        result = (result * base) % modulus;\n    }\n    return result;\n}"}
{"instruction": "Write a code to change a string to have its first letter capitalized and the remaining characters in lower case.", "input": "mySTRING", "output": "\"\"\"\nChange a string to have its first letter capitalized and the remaining characters in lower case\n\"\"\"\n\ndef capitalize_string(s):\n  return s[0].upper() + s[1:].lower()\n  \nif __name__ == '__main__':\n    print(capitalize_string('mySTRING'))"}
{"instruction": "Given the following code in C, modify it to increment `num` by 1.", "input": "int num = 0;", "output": "int num = 0;\nnum++;"}
{"instruction": "Edit the css style to change color of the text to be green.", "input": "p {\n  font-weight: bold;\n  font-size: 16px;\n}", "output": "p {\n  font-weight: bold;\n  font-size: 16px;\n  color: green;\n}"}
{"instruction": "Modify the following code to compute the sum of squares of the numbers from k to n.", "input": "def sum(k, n):\n    sum = 0\n    for i in range(k, n+1):\n        sum += i\n    return sum", "output": "def sum_squares(k, n):\n    sum = 0\n    for i in range(k, n+1):\n        sum += i**2\n    return sum"}
{"instruction": "Edit the following program to add all the numbers in the given array.", "input": "let numbers = [2, 10, 5, 4, 3];\n\nfunction add(arr) {\n  let total = 0;\n  arr.forEach(num => total += num);\n  //TODO\n  return total;\n}", "output": "let numbers = [2, 10, 5, 4, 3];\n\nfunction add(arr) {\n  let total = 0;  \n  arr.forEach(num => total += num);\n  total = total/arr.length;\n  return total;\n}"}
{"instruction": "Apply a style that changes the color of the text \"Hello, World!\" to red.", "input": "<span>Hello, World!</span>", "output": "<span style=\"color:red;\">Hello, World!</span>"}
{"instruction": "Edit the following HTML form to validate an email address.", "input": "<form>\n    <input type=\"text\" name=\"email\">\n    <input type=\"submit\" value=\"Submit\">\n</form>", "output": "<form>\n    <input type=\"email\" name=\"email\" pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\" required>\n    <input type=\"submit\" value=\"Submit\">\n</form>"}
{"instruction": "Modify the code to add a class called Animal that accepts a name and an age as arguments.", "input": "class Animal:", "output": "class Animal:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age"}
{"instruction": "Edit the given JavaScript code to convert the input string\u2019s first letter to uppercase.", "input": "let str = \"hello world\";", "output": "let str = \"hello world\";\nstr = str[0].toUpperCase() + str.slice(1);"}
{"instruction": "Modify the input so that the following Python program returns 'Yes'", "input": "num = 10\n\nif num > 5:\n    print('No')", "output": "num = 10\n\nif num > 5:\n    print('Yes')"}
{"instruction": "Modify the following code to print all words with more than 5 characters in a given string.", "input": "text = \"This is an example string\"", "output": "text = \"This is an example string\"\nwords = text.split() \nfor word in words: \n    if len(word) > 5: \n        print(word)"}
{"instruction": "Change the following code to implement the Observer Design Pattern in Python.", "input": "class Publisher: \n    def __init__(self): \n        self.observers = [] \n  \n    def add(self, observer): \n        if observer not in self.observers: \n            self.observers.append(observer) \n        else: \n            print('Failed to add: {}'.format(observer)) \n  \n    def remove(self): \n        self.observers.remove(observer) \n  \n    def notifyAll(self, *args, **kwargs): \n        for observer in self.observers: \n            observer.notify(self, *args, **kwargs)", "output": "class Publisher: \n\n    def __init__(self): \n        self.observers = [] \n        self.state = None\n    \n    def getState(self): \n        return self.state \n\n    def setState(self, state): \n        self.state = state \n        self.notifyAll() \n\n    def add(self, observer): \n        if observer not in self.observers: \n            self.observers.append(observer) \n        else: \n            print('Failed to add: {}'.format(observer)) \n  \n    def remove(self): \n        self.observers.remove(observer) \n  \n    def notifyAll(self, *args, **kwargs): \n        for observer in self.observers: \n            if args and kwargs: \n                observer.notify(self, *args, **kwargs) \n            else: \n                observer.notify(self)"}
{"instruction": "Edit the following code to register an account on a website.", "input": "import requests\n\nurl = \"www.example.com/register\"\ndata = \"username=myname\"", "output": "import requests\n\nurl = \"www.example.com/register\"\ndata = { \"username\" : \"myname\", \"password\" : \"secret_password\", \"email\" : \"myname@example.com\" }\n\nresponse = requests.post(url, data=data)"}
{"instruction": "Read the given code block and debug it.", "input": "def main():\n print(\"Hey I'm here\")\n if n == 0: \n  print(\"Hey I'm there\")\nmain()", "output": "Error: n is not defined.\n\nThe given code is trying to use the variable n, which is not declared. To fix this, it should be declared before the if statement. The modified code is as follows:\n\ndef main():\n print(\"Hey I'm here\")\n n = 0\n if n == 0: \n  print(\"Hey I'm there\")\nmain()"}
{"instruction": "Modify the code provided so it prints the first 10 prime numbers.", "input": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True", "output": "def is_prime(n): \n    if n == 1: \n        return False\n    for i in range(2, n): \n        if n % i == 0: \n            return False\n    return True\n\ndef print_primes():\n    count = 0\n    number = 2\n    while(count != 10):\n        if is_prime(number):\n            print(number)\n            count += 1\n        number += 1\n\nprint_primes()"}
{"instruction": "Edit the following code so that the item at index 4 is multiplied by two.", "input": "arr = [1, 2, 3, 4, 5, 6]", "output": "arr = [1, 2, 3, 4, 10, 6]"}
{"instruction": "Write a function to implement the Levenshtein Distance algorithm. The Levenshtein Distance algorithm calculates the minimum number of single-character edits (insertions, deletions, or substitutions) necessary to transform one string into another string.", "input": "\"cats\", \"dogs\"", "output": "def levenshtein_distance(str1, str2):\n # Create a matrix for storing the distances\n m = [[0 for x in range(len(str2) + 1)] for x in range(len(str1) + 1)]\n # Mark the first Edit Distance value as 0\n m[0][0] = 0\n \n # Iterate over the matrix \n for i in range(0, len(str1) + 1):\n  for j in range(0, len(str2) + 1):\n   # If we are at the first row or first col, mark the cells with corresponding numbers\n   if i == 0:\n    m[i][j] = j\n   elif j == 0:\n    m[i][j] = i\n   # Otherwise, calculate the distance according to the  formula\n   else:\n    if str1[i-1] == str2[j-1]:\n     m[i][j] = m[i-1][j-1]\n    else:\n     m[i][j] = min(m[i-1][j], m[i-1][j-1], m[i][j-1]) + 1\n  \n # Return the last element in the matrix, which is the Levenshtein Distance\n return m[-1][-1]"}
{"instruction": "Edit the following code snippet to make it calculate the median instead of the average?", "input": "x = [1,2 ,3, 4, 5]", "output": "x = [1,2 ,3, 4, 5]\n\nimport statistics\n\nmedian = statistics.median(x)\nprint(median)"}
{"instruction": "Create a JavaScript code snippet to check the validity of a credit card number.", "input": "credit_card_number = \u20181234567891234567\u2019", "output": "function validateCardNumber(credit_card_number) {\n  // remove any non-digits\n  var card_number = credit_card_number.replace(/\\D/g, '');\n\n   // add odd digits in even length strings or even digits in odd length strings\n  var sum = 0;\n  for (var i = 0; i < card_number.length; i++) {\n    var intVal = parseInt(card_number.substr(i, 1));\n    if (i % 2 == 0) {\n      intVal *= 2;\n      if (intVal > 9) {\n        intVal = 1 + (intVal % 10);\n      }\n    }\n    sum += intVal;\n  }\n  // If the result is divisible by 10, the card number is valid\n  return (sum % 10 == 0);\n}\n\nconsole.log(validateCardNumber(credit_card_number))"}
{"instruction": "Modify the following code to skip the test if the platform is not windows.", "input": "import platform\n\ndef test_windows():\n    if platform.system() == 'Windows':\n        # Do test", "output": "import platform\n\ndef test_windows():\n    if platform.system() != 'Windows':\n        return\n    # Do test"}
{"instruction": "Modify the code to declare a variable as a float.", "input": "x = 5", "output": "x = float(5)"}
{"instruction": "Edit the following C code so it runs correctly.", "input": "#include <stdio.h>\n\nint main(){\n    int score = 80;\n\n    printf(\"Your final score is: %i;\n\nreturn 0;\n}", "output": "#include <stdio.h>\n\nint main(){\n    int score = 80;\n\n    printf(\"Your final score is: %i\", score);\n\n    return 0;\n}"}
{"instruction": "Edit the given SQL statement to select the top 3 entries with lowest price.", "input": "SELECT * FROM products", "output": "SELECT * FROM products ORDER BY price ASC LIMIT 3;"}
{"instruction": "Edit the following code such that the output is reversed", "input": "def reverse_string(s):\n    n = len(s)\n    result = \"\"\n    for i in range(n):\n        result += s[i]\n    return result", "output": "def reverse_string(s):\n    n = len(s)\n    result = \"\"\n    for i in range(n-1, -1, -1):\n        result += s[i]\n    return result"}
{"instruction": "Change the following code to a function using parameters.", "input": "print(\u201chello\u201d)", "output": "function sayHello(str){\n  console.log(str);\n}\n\nsayHello('Hello');"}
{"instruction": "Edit the following CSS code to make the background color of all <a> tags equal to '#237ac2'.", "input": "a {\n  font-size: 16px;\n  color: #efefef;\n}", "output": "a {\n  font-size: 16px;\n  color: #efefef;\n  background-color: #237ac2;\n}"}
{"instruction": "Modify the following MySQL query to order the results in ascending order", "input": "SELECT * FROM product;", "output": "SELECT * FROM product ORDER BY product ASC;"}
{"instruction": "Write a CSS code that changes the font-family of all the text elements of an HTML document to 'Segoe UI'.", "input": "", "output": "* {\n  font-family: 'Segoe UI';\n}"}
{"instruction": "Edit the code to produce the output of the following matrix multiplication", "input": "X = [[2, 3, 9],\n     [8, 7, 6],\n     [1, 6, 4]]\nY = [[9, 4, 5],\n     [7, 3, 3],\n     [2, 1, 5]]", "output": "X = [[2, 3, 9],\n     [8, 7, 6],\n     [1, 6, 4]]\nY = [[9, 4, 5],\n     [7, 3, 3],\n     [2, 1, 5]]\n\ndef mat_mult(X, Y):\n    result = [[0, 0, 0],\n              [0, 0, 0],\n              [0, 0, 0]]\n    for i in range(len(X)):\n        for j in range(len(Y[0])):\n            for k in range(len(Y)):\n                result[i][j] += X[i][k] * Y[k][j]\n    return result"}
{"instruction": "Edit the given code snippet to reverse the elements of a list in Python.", "input": "", "output": "def reverseList(list): \n    list.reverse() \n    return list"}
{"instruction": "Write a CSS rule to change the font color of the h1 element to green.", "input": "", "output": "h1 {\n  color: green;\n}"}
{"instruction": "Modify the given code snippet to make all elements of the list uppercase.", "input": "list = [\"hello\", \"world\"]", "output": "list = [x.upper() for x in list]"}
{"instruction": "Change the following HTML page to an Angular web page.", "input": "<html>\n<head>\n  <title>TITLE</title>\n</head>\n<body>\n  <h1>HEADER</h1>\n  <p>Paragraph</p>\n</body>\n</html>", "output": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>TITLE</title>\n    <script src=\"https://unpkg.com/@angular/core@8.2.14/bundles/core.umd.js\"></script>\n    <script src=\"https://unpkg.com/@angular/common@8.2.14/bundles/common.umd.js\"></script>\n    <script src=\"https://unpkg.com/@angular/platform-browser@8.2.14/bundles/platform-browser.umd.js\"></script>\n    <script src=\"https://unpkg.com/@angular/platform-browser-dynamic@8.2.14/bundles/platform-browser-dynamic.umd.js\"></script>\n  </head>\n  <body>\n    <h1>HEADER</h1>\n    <app-root>Paragraph</app-root>\n    <script>\n      //This will handle the rendering of the Angular app\n      platformBrowserDynamic().bootstrapModule(AppModule);\n    </script>\n  </body>\n</html>"}
{"instruction": "Identify the bugs in the following python code and fix them.", "input": "def multiply_dicts(d1, d2):\n    for key in d1:\n        d1[key] = d2[d1[key]]", "output": "def multiply_dicts(d1, d2):\n    for key in d1:\n        if key in d2:\n            d1[key] = d2[key]"}
{"instruction": "Edit the following JavaScript code to create an array of only the even numbers from the given array.", "input": "[5, 12, 7, 23, 10]", "output": "let arr = [5, 12, 7, 23, 10];\nlet evenNumbers = arr.filter(num => num % 2 == 0);"}
{"instruction": "Edit the provided CSS rule to make all elements with the class \"myClass\" have a bold font-weight.", "input": ".myClass { \n  font-size: 16px;\n}", "output": ".myClass { \n  font-size: 16px;\n  font-weight: bold;\n}"}
{"instruction": "Modify the code below to filter out negative numbers from the given array.", "input": "var arr = [2, -4, -6, 0, 1];", "output": "var arr = [2, 0, 1]; \narr = arr.filter(element => element >= 0);"}
{"instruction": "Change the following code snippet to convert a given string in lower case.", "input": "string = \"HELLO WORLD\"", "output": "string = string.lower()"}
{"instruction": "You need to modify an array to delete the third element of the array.", "input": "array = [1, 2, 3, 4, 5]", "output": "del array[2]"}
{"instruction": "Change the following code to reduce its running time", "input": "for i in range(0, len(nums)):\n    if nums[i] == target:\n        return i", "output": "def find_target(nums, target): \n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    return -1\n\nif __name__ == '__main__':\n    nums = [2, 3, 5, 7]\n    target = 5\n    index = -1\n    for i in range(0, len(nums)):\n        if nums[i] == target:\n            index = i\n            break\n    if (index == -1):\n        print(\"Target not found!\")\n    else:\n        print(\"Target found at index:\", index)"}
{"instruction": "Debug this Java program and make the output print \"The answer is 3\".", "input": "public class Debugging {\n    public static void main(String[] args) {\n        int x = 5;\n        int y = 2;\n        System.out.println(\"The answer is \" + (x - y));\n    }\n}", "output": "public class Debugging {\n    public static void main(String[] args) {\n        int x = 5;\n        int y = 2;\n        System.out.println(\"The answer is \" + (x - y + 1));\n    }\n}"}
{"instruction": "Find the syntax error in the given C# code.", "input": "int x = 5;\nif (x > 4) console.WriteLine(\"Hello\");", "output": "The syntax error is that 'console.WriteLine(\"Hello\");' should be within a pair of curly braces. i.e. The correct syntax should be \"if (x > 4) { Console.WriteLine(\"Hello\") };\""}
{"instruction": "Edit the code to create a program to print all the leap years between 1900 and 2000.", "input": "for year in range(1900, 2001):\n    # TODO", "output": "for year in range(1900, 2001):\n    if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:\n        print(year)"}
{"instruction": "Edit the following PHP code so it does not print out the error message \"Notice: Undefined variable\".", "input": "<?php\n \n$name = \"John\";\n\necho \"Hello, $name!\";\n?>", "output": "<?php\n \n$name = \"John\";\n\nif (isset($name)) {\n    echo \"Hello, $name!\";\n}\n?>"}
{"instruction": "Debug the following C++ code by finding and fixing errors.", "input": "int findMax(int arr[], int n)\n{\n    if(arr[i] < n)\n     {\n        int max = arr[i];\n        for (int i = 0; i < n; i++)\n            if (arr[I] > max)\n            max = arr[i];\n        return max;\n     }\n}", "output": "int findMax(int arr[], int n)\n{\n    if(n > 0)\n     {\n        int max = arr[0];\n        for (int i = 1; i < n; i++)\n            if (arr[i] > max)\n            max = arr[i];\n        return max;\n     }\n}"}
{"instruction": "Modify the given program to print \"Hello, foo\" where \"foo\" is user input.", "input": "System.out.println(\"Hello, World!\");", "output": "import java.util.Scanner;\npublic class Test {\n    public static void main(String args[]){\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter in a name: \");\n        String name = scanner.nextLine(); \n        System.out.println(\"Hello, \" + name + \"!\");\n    }\n}"}
{"instruction": "Edit the following JavaScript function to convert Celsius to Fahrenheit.", "input": "function toFahrenheit(celsius) {\n  return celsius * 9/5 + 32;\n}", "output": "function toFahrenheit(celsius) {\n  return celsius * 9/5 + 32;\n}\n\nfunction toCelsius(fahrenheit) {\n  return (fahrenheit - 32) * 5/9;\n}"}
{"instruction": "Fix the following Python code to create a dictionary.", "input": "dic = {\u201cmin\u201d, 10, \u201cmax\u201d, 20}", "output": "dic = {\"min\": 10, \"max\": 20}"}
{"instruction": "Analyze the given statement for any syntax errors.", "input": "Statement: The user entered his name James and password1234", "output": "No syntax errors were detected in the given statement."}
{"instruction": "Edit the following code so it prints out a message when the condition is true.", "input": "if condition:", "output": "if condition:\n    print(\"Condition is true!\")"}
{"instruction": "Your program needs to edit an existing string by replacing certain words with another word.", "input": "string = \"I am the biggest fan of coding\"", "output": "def replace_word(string, old_word, new_word):\n return string.replace(old_word, new_word)\n\nprint(replace_word(string, \"coding\", \"programming\"))"}
{"instruction": "Edit the given code to generate an Array of all the numbers between 1 and 15.", "input": "", "output": "let myArray = [];\n\nfor (let i = 1; i<= 15; i++) {\n  myArray.push(i);\n}"}
{"instruction": "Modify the Java program below so that it prints the sum of two given numbers.", "input": "int num1 = 3;\nint num2 = 5;", "output": "int num1 = 3;\nint num2 = 5;\nint sum = num1 + num2;\n\nSystem.out.println(\"Sum is: \" + sum);"}
{"instruction": "Edit the code to construct a bubble sort algorithm.", "input": "arr = [5, 2, 1, 7, 8]", "output": "def bubble_sort(arr):\n    n = len(arr)\n\n    # Traverse through all array elements\n    for i in range(n):\n        # Last i elements are already in place\n        for j in range(0, n-i-1):\n            # traverse the array from 0 to n-i-1\n            # Swap if the element found is greater\n            # than the next element\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]"}
{"instruction": "Change the following program to use a try/except/finally block to handle errors.", "input": "def read_file(file):\n    with open(file) as f:\n        for line in f:\n            print(line)", "output": "try:\n    def read_file(file):\n        with open(file) as f:\n            for line in f:\n                print(line)\nexcept IOError:\n    print(\"Error: Could not read file\")\nfinally:\n    print(\"Closing file\")\n    f.close()"}
{"instruction": "Iterate over a given array and modify each element by adding a constant value to it.", "input": "arr = [3, 7, 8], constant = 4", "output": "def modify_elements(arr, constant):\n    for i in range(len(arr)):\n        arr[i] += constant"}
{"instruction": "In the following JavaScript function, edit the function body so that it returns the number stored in the variable 'currentNum' minus 5.", "input": "function subtractFive(currentNum) {\n  // TODO\n}", "output": "function subtractFive(currentNum) {\n  return currentNum - 5;\n}"}
{"instruction": "Edit the following Python code to print out \u201cThe answer is X\u201d", "input": "print(\"X + 5 = 10\")", "output": "print(\"The answer is \" + str(10 - 5))"}
{"instruction": "Edit this HTML code to add a meta tag.", "input": "<head>\n    <title>This is a title</title>\n</head>", "output": "<head>\n    <title>This is a title</title>\n    <meta name=\"description\" content=\"\">\n</head>"}
{"instruction": "Modify the code below to make it calculate the sum of all the numbers from 1 to n.", "input": "num = 5\nsum = 0\nfor i in range(num):\n  sum += i", "output": "num = 5\nsum = 0\nfor i in range(1, num+1):\n  sum += i"}
{"instruction": "Correct the error in the given SQL query.", "input": "SELECT * FROM Student st INNERJOIN School sc ON st.schoolID = sc.student", "output": "SELECT * FROM Student st INNER JOIN School sc ON st.schoolID = sc.schoolID"}
{"instruction": "Modify the following CSS code to target the links with the word \"Learn\".", "input": "a {\n    color: blue;\n}", "output": "a[href*=\"Learn\"] {\n    color: blue;\n}"}
{"instruction": "Edit the following code to return a length 5 array of zeros.", "input": "int[] array = new int[10];", "output": "int[] array = new int[5];\nfor(int i=0; i<array.length; i++){\n    array[i] = 0;\n}"}
{"instruction": "Modify the given python program to accept an input string and output the length of that string.", "input": "def func():\n    print(\"Hello World!\")", "output": "def func(s):\n    print(\"Length of the string is: \" + str(len(s)))"}
{"instruction": "Describe in Python a custom exception for handling database connection errors.", "input": "", "output": "class DBConnectionError(Exception):\n  def __init__(self, message):\n    self.message = message\n    \n  def __str__(self):\n    return 'An Error Occured:\\n\\t' + self.message"}
{"instruction": "Alter the following JSON object such that the date format of \"date\" field changes from \"dd-mm-yyyy\" to \"dd/mm/yyyy\".", "input": "{\n  \"name\": \"John\", \n  \"date\": \"22-02-2020\"\n}", "output": "{\n  \"name\": \"John\", \n  \"date\": \"22/02/2020\"\n}"}
{"instruction": "Compile the following code in C++ and check for any warnings or errors.", "input": "#include<iostream>\nusing namespace std;\n\nint main() {\n cout << \"Hello World!\";\n return 0;\n}", "output": "No output is produced when compiling the above code in C++. Any warnings or errors should be indicated while compiling."}
{"instruction": "Modify the following C++ code to capitalize the uppercase letters in a given string.", "input": "#include <iostream> \n#include <string> \n\nint main() \n{ \n    std::string str = \"hello world\"; \n    std::cout << str; \n\nreturn 0; \n}", "output": "#include <iostream> \n#include <string> \n#include <algorithm>\n\nint main() \n{ \n    std::string str = \"hello world\"; \n    //Convert to uppercase letters\n    std::transform(str.begin(), str.end(), str.begin(), ::toupper); \n        std::cout << str;\n\nreturn 0; \n}"}
{"instruction": "Edit the following HTML to make all text 16px font size.", "input": "<h1>This is a heading</h1>\n<p>This is a paragraph.</p>", "output": "<h1 style=\"font-size: 16px;\">This is a heading</h1>\n<p style=\"font-size: 16px;\">This is a paragraph.</p>"}
{"instruction": "Change the following code for the output to be a list", "input": "num1 = 5\nnum2 = 7", "output": "num1 = 5\nnum2 = 7\n\noutput = [num1, num2]\nprint(output) # Output: [5, 7]"}
{"instruction": "Compute the edits between two strings.", "input": "str1 = \"I am eating\"\nstr2 = \"I am eating a sandwich\"", "output": "def edit_distance(str1, str2):\n    \"\"\"\n    Compute the edit distance between two strings\n    \"\"\"\n    m = len(str1)\n    n = len(str2)\n\n    distance = [[0 for i in range(n+1)] for j in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n\n            # If first string is empty, only option is to insert all characters of second string\n            if i == 0:\n                distance[i][j] = j\n\n            # If second string is empty, only option is to remove all characters of first string\n            elif j == 0:\n                distance[i][j] = i\n\n            # If last characters are same, ignore last char and recur for remaining string\n            elif str1[i-1] == str2[j-1]:\n                distance[i][j] = distance[i-1][j-1]\n\n            # If last characters are not same, consider all possibilities and find minimum\n            else:\n                replace_cost = distance[i-1][j-1] + 1\n                remove_cost = distance[i-1][j] + 1\n                insert_cost = distance[i][j-1] + 1\n                distance[i][j] = min(replace_cost, remove_cost, insert_cost)\n\n    return distance[m][n]\nif __name__ == '__main__':\n    str1 = \"I am eating\"\n    str2 = \"I am eating a sandwich\"\n    print(edit_distance(str1, str2))"}
{"instruction": "You need to debug this code and ensure that it runs properly.", "input": "def cost_calc(product, quantity): \n    total_cost = 0\n    for i, q in zip(products, quantity):\n        cost = i.cost * q \n        total_cost = total_cost + cost \n        return total_cost:", "output": "def cost_calc(products, quantity): \n    total_cost = 0\n    for i, q in zip(products, quantity):\n        cost = i.cost * q \n        total_cost += cost \n    return total_cost"}
{"instruction": "Edit the given data to ensure data integrity.", "input": "Given data:\nName\tLocation\nJohn   US\nJulia  Germany", "output": "Name\tLocation\nJohn   United States\nJulia  Germany"}
{"instruction": "Create a Bash script that changes all the filenames in a directory to lowercase.", "input": "Directory: ./TestCases", "output": "for f in $(ls ./TestCases);\ndo\n  mv $f $(echo $f | tr [A-Z] [a-z]);\ndone"}
{"instruction": "modify the given css code to make the font size to 48px.", "input": "body {\n  font-family: \"Roboto\", sans-serif;\n  font-size: 20px;\n}", "output": "body {\n  font-family: \"Roboto\", sans-serif;\n  font-size: 48px;\n}"}
{"instruction": "Edit the following HTML page to add a table with three rows and two columns.", "input": "<!-- HTML page -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title>Table Example</title>\n</head>\n<body>\n\n</body>\n</html>", "output": "<!-- Edited HTML page -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title>Table Example</title>\n</head>\n<body>\n  <table>\n   <tr>\n    <th>First Header</th>\n    <th>Second Header</th>\n   </tr>\n   <tr>\n    <td>Row 1, Cell 1</td>\n    <td>Row 1, Cell 2</td>\n   </tr>\n   <tr>\n    <td>Row 2, Cell 1</td>\n    <td>Row 2, Cell 2</td>\n   </tr>\n  </table>\n</body>\n</html>"}
{"instruction": "Edit the following code to capture the errors and print them.", "input": "try:\n    num = int(input(\"Enter a number: \"))\n    print (num)\nexcept:\n    pass", "output": "try:\n    num = int(input(\"Enter a number: \"))\n    print (num)\nexcept Exception as e:\n    print(str(e))"}
{"instruction": "Edit the following Python class 'Foo' to accept a list of numbers upon instantiation.", "input": "class Foo():\n    def __init__(self):\n        self.lst = []", "output": "class Foo():\n    def __init__(self, lst):\n        self.lst = lst"}
{"instruction": "Debug a Java program to correct a compile-time error.", "input": "public class Debug {\n    public static void main(String[] args) {\n        ArrayList<String> list = new ArrayList<String>();\n        list.add(\"Hello\");\n        list.add(\"World\");\n    }\n    System.out.println(list);\n}", "output": "public class Debug {\n    public static void main(String[] args) {\n        ArrayList<String> list = new ArrayList<String>();\n        list.add(\"Hello\");\n        list.add(\"World\");\n        for(String str : list){\n            System.out.println(str);\n        }\n    }\n}"}
{"instruction": "Change the background color of all paragraphs in HTML code to blue.", "input": "<p>I am a paragraph</p>\n<p>I am another paragraph</p>", "output": "<p style=\"background-color:blue;\">I am a paragraph</p>\n<p style=\"background-color:blue;\">I am another paragraph</p>"}
{"instruction": "Write a C# program to interchange the elements of the first and last columns of a given matrix.", "input": "int[,] matrix = { { 11, 21, 31, 41 }, { 12, 22, 32, 42 }, { 13, 23, 33, 43 } };", "output": "for (int i = 0; i < matrix.GetLength(0); i++)\n{\n    int temp = matrix[i, 0];\n    matrix[i, 0] = matrix[i, matrix.GetLength(1)-1];\n    matrix[i, matrix.GetLength(1)-1] = temp;\n}"}
{"instruction": "You need to edit the wrong sentence appropriately.", "input": "I likes ice cream.", "output": "I like ice cream."}
{"instruction": "Edit the following code to add try catch block.", "input": "x = \"5\"\ny = \"2\"\nsum = int(x) + int(y)\nprint(\"Sum of x and y is\", sum)", "output": "x = \"5\"\ny = \"2\"\ntry:\n   sum = int(x) + int(y)\n   print(\"Sum of x and y is\", sum)\nexcept:\n   print(\"Error: Invalid input\")"}
{"instruction": "Change this list of words into a list of strings.", "input": "my_list = [\"apple\", \"banana\", \"orange\"]", "output": "my_list = [\"apple\", \"banana\", \"orange\"]\n\nmy_list = list(map(str, my_list)) # The output will be['apple', 'banana', 'orange']"}
{"instruction": "Edit an existing Python script to read a 3D array of size 3 x 3 x 3", "input": "", "output": "arr = [[[0 for x in range(3)] for y in range(3)] for z in range(3)]\nfor x in range(3):\n    for y in range(3):\n        for z in range(3):\n            arr[x][y][z] = int(input())"}
{"instruction": "Recognize the type of a credit card from the given string of numbers.", "input": "4111 2029 3219 9480", "output": "Visa"}
{"instruction": "Edit the code to add an if statement that returns the string \"even\" if the value of the variable is even, or the string \"odd\" if the value of the variable is odd.", "input": "var number = 5\ndef even_odd(number):\n  #TODO", "output": "def even_odd(number):\n    if number % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\""}
{"instruction": "Correct the syntax errors in the following JavaScript snippet.", "input": "let outpt;\nif(val == 1)\n outpt = 1;\nelse\n outpt = 2;", "output": "let output;\nif(val == 1) {\n output = 1;\n} else {\n output = 2;\n}"}
{"instruction": "Modify the following SQL query to list all the job titles that start with the letter \"A\".", "input": "", "output": "SELECT * \nFROM jobs \nWHERE job_title LIKE 'A%';"}
{"instruction": "Debug the given Python code and make sure that it runs without errors.", "input": "def add_two_numbers(a, b):\n  return a b", "output": "def add_two_numbers(a, b):\n  return a + b"}
{"instruction": "Find the bug in the following code.", "input": "def multiply(x, y):\n    z = 0\n    while y > 0:\n        y = y - 1\n        z = z + x\n    return z", "output": "The bug in the code is that the loop completion condition should be 'while y > 0' and should be changed to 'while y != 0' otherwise the code will enter into an infinite loop when y is negative."}
{"instruction": "Edit the code to add each item to a dictionary.", "input": "def add_to_dict(input_dict, key, value):\n    return", "output": "def add_to_dict(input_dict, key, value):\n    if key in input_dict:\n        input_dict[key].append(value)\n    else:\n        input_dict[key] = [value]\n    return input_dict"}
{"instruction": "Edit the code to add an additional parameter.", "input": "def find_sum(x, y):\n    return x + y", "output": "def find_sum(x, y, z):\n    return x + y + z"}
{"instruction": "Write an SQL query to find the sum of all the credits in the table \"Transactions\".", "input": "Table: Transactions\n+----+------------+-------+\n| Id |   Date     | Credit|\n+----+------------+-------+\n| 1  |  12/01/19  |  5.00 |\n| 2  |  13/01/19  |  7.50 |\n| 3  |  14/01/19  |  8.50 |\n+----+------------+-------+", "output": "SELECT SUM(Credit) AS SumOfCredits FROM Transactions;"}
{"instruction": "Edit the following program to improve its execution speed", "input": "#include <iostream> \n  \nint n = 100; \n  \nvoid foo(int n) \n{ \n    for (int i = 0; i < n; i++) \n        std::cout << i << \"\\n\"; \n} \n  \nint main() \n{ \n    foo(n); \n    return 0; \n}", "output": "#include <iostream> \n  \nint n = 100; \n \nvoid foo(int n) \n{ \n    int chunk_size = 5;\n    for (int i = 0; i < n; i+=chunk_size) {\n        for (int j = i; j < i + chunk_size; j++) \n            std::cout << j << \"\\n\"; \n    } \n} \n  \nint main() \n{ \n    foo(n); \n    return 0; \n}"}
{"instruction": "Edit the function so that an element can be deleted from the list.", "input": "def delete_element(list, element):\n    # TODO", "output": "def delete_element(list, element):\n    # iterate through the list\n    for elem in list:\n        if elem == element:\n            list.remove(elem)\n    return list"}
{"instruction": "Modify a C++ program to print the following sequence of numbers using a loop:\n* 5, 4, 3, 2, 1", "input": "//Existing code\ncout << \"Hello world!\" << endl;", "output": "#include <iostream>\nusing namespace std;\n\nint main ()\n{\n    int x;\n    cout << \"Hello world!\" << endl;\n    for (x=5; x>=1; x--) \n    { \n      cout << x <<\", \"; \n    }\n    cout << \"Blast off!\";\n    return 0;\n}"}
{"instruction": "Change this sentence into a valid mathematical expression.", "input": "Four minus five", "output": "4 - 5"}
{"instruction": "Edit the given code snippet to generate a table in HTML with four columns and three rows.", "input": "<table></table>", "output": "<table>\n    <tr>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td></td>\n    </tr>\n    <tr>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td></td>\n    </tr>\n    <tr>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td></td>\n    </tr>\n</table>"}
{"instruction": "Debug the following code so it can print the corresponding JSON data correctly.", "input": "import json\npeople_string = '{\"name\": \"John Smith\", \"age\": 50, \"profession\": \"engineer\"}'\n\ndata = json.loads(people_string)\nprint(\"Name:           \", data[\"name\"])", "output": "import json\npeople_string = '{\"name\": \"John Smith\", \"age\": 50, \"profession\": \"engineer\"}'\n\ndata = json.loads(people_string)\nprint(\"Name:           \", data[\"name\"])\nprint(\"Age:            \", data[\"age\"])\nprint(\"Profession:     \", data[\"profession\"])"}
{"instruction": "Change the case of all characters in a string.", "input": "string = \"Hello World!\"", "output": "def change_case(string):\n    return string.swapcase()"}
{"instruction": "Change the given code to allow the user to input a number and print it twice.", "input": "", "output": "num = int(input(\"Enter a number: \"))\nprint(num * 2)"}
{"instruction": "Modify the following SQL statement to select only the rows with prices greater than 100.", "input": "SELECT * FROM products;", "output": "SELECT * \nFROM products \nWHERE price > 100;"}
{"instruction": "Change the following piece of Java code to make sure that the parameter passed is a valid date.", "input": "public boolean isValidDate(String date){ \n    // return true if date is valid \n}", "output": "public boolean isValidDate(String date){ \n    SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n    try {\n        format.parse(date);\n        return true;\n    } catch (ParseException e) {\n        return false;\n    }\n}"}
{"instruction": "Edit the following Java program to sort a given array.", "input": "int[] array={16, 5, 1, 8, 10};", "output": "public static void sortArray(int[] array) {\n    int temp;\n    for (int i = 0; i < array.length; i++) { \n        for (int j = i + 1; j < array.length; j++) {  \n            if (array[i] > array[j]) { \n                temp = array[i]; \n                array[i] = array[j]; \n                array[j] = temp; \n            } \n        } \n    }\n}"}
{"instruction": "You should edit this code and make it into a working code that prints \"Hello, world!\"", "input": "cout << \"Hello, World!\"", "output": "#include <iostream>\n\nint main() {\n    std::cout << \"Hello, World!\" << std::endl;\n    return 0;\n}"}
{"instruction": "Modify the code to return the most repeated character.", "input": "def max_repeated_char(input_string):\n    char_count = dict()\n    max_count = 0\n    max_char = None\n    for char in input_string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n            \n    print(char_count)", "output": "def max_repeated_char(input_string):\n    char_count = dict()\n    max_count = 0\n    max_char = None\n    for char in input_string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n            \n    for char in char_count:\n        if char_count[char] > max_count:\n            max_count = char_count[char]\n            max_char = char\n    return max_char"}
{"instruction": "Write an SQL query to change the column type of a table.", "input": "table: people\ncolumn: age\ntype: INT", "output": "ALTER TABLE people\nMODIFY age INT;"}
{"instruction": "Given the following HTML, change the text to \"Hello World\".", "input": "<p>Hi there</p>", "output": "<p>Hello World</p>"}
{"instruction": "Modify the following Java code snippet to include an \"else if\" statement.", "input": "int val=20;\nif (val > 15)\n    System.out.println(\"val is greater than 15\");", "output": "int val=20;\nif (val > 15)\n    System.out.println(\"val is greater than 15\");\nelse if (val == 15)\n    System.out.println(\"val is equal to 15\");"}
{"instruction": "Fix the Python code below to make the script work.", "input": "import json\n\ndata = {\n  \"name\": \"John Doe\",\n  \"age\": 20\n}\n\nwith open(\"data.txt\", \"w\") as outfile:\n    json.dump(data, outfile)", "output": "import json\n\ndata = {\n  \"name\": \"John Doe\",\n  \"age\": 20\n}\n\nwith open(\"data.txt\", \"w\") as outfile:\n    json.dump(data, outfile, indent=4)"}
{"instruction": "Modify this code to make it a function which takes a list of numbers and returns their average.", "input": "list_of_numbers = [1, 4, 5, 6, 8]", "output": "def get_average(list_of_numbers):\n    \"\"\"Returns average of the given list of numbers\"\"\"\n    if list_of_numbers:\n        return sum(list_of_numbers)/len(list_of_numbers)\n    return\n\nlist_of_numbers = [1, 4, 5, 6, 8]\n\naverage = get_average(list_of_numbers)\n\nprint(average) # 5"}
{"instruction": "Create a Java program to validate a credit card number using Luhn's algorithm.", "input": "", "output": "\"\"\"\nValidate a credit card number using Luhn's algorithm.\n\"\"\"\n\nimport java.util.Arrays;\n\npublic class Luhn {\n\n   public static boolean isValidCard(String cardNumber) {\n\n        if (cardNumber == null) {\n            return false;\n        }\n\n        char checkDigit = cardNumber.charAt(cardNumber.length() - 1);\n        String digit = calculateCheckDigit(cardNumber.substring(0, cardNumber.length() - 1));\n        return checkDigit == digit.charAt(0);\n    }\n\n    public static String calculateCheckDigit(String digit) {\n        if (digit == null) {\n            return null;\n        }\n\n        String reversDigit = new StringBuilder(digit).reverse().toString();\n        int[] digits = new int[reversDigit.length()];\n        for (int i = 0; i < reversDigit.length(); i++) {\n            digits[i] = Character.getNumericValue(reversDigit.charAt(i));\n        }\n        for (int i = 1; i < digits.length; i = i + 2) {\n            digits[i] = 2 * digits[i];\n            if (digits[i] > 9) {\n                digits[i] = digits[i] - 9;\n            }\n        }\n        int sum = Arrays.stream(digits).sum();\n        return new Integer(10 - (sum % 10)).toString();\n    }\n}"}
{"instruction": "Edit the previous code to print out the total salary of all employees whose salary is between 40,000 and 50,000.", "input": "", "output": "SELECT SUM(salary) as total_salary FROM employees WHERE salary BETWEEN 40000 AND 50000;"}
{"instruction": "Modify the following react code to make it render an h2 tag.", "input": "import React, {Component} from \"react\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Hello React!</h1>\n      </div>\n    )\n  }\n}", "output": "import React, {Component} from \"react\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Hello React!</h1>\n        <h2>Nice to meet you!</h2>\n      </div>\n    )\n  }\n}"}
{"instruction": "Change the following JavaScript code so that it prints out the square root of a given number.", "input": "function sqr(x) {\n  return x*x;\n}", "output": "function sqr(x) {\n  return Math.sqrt(x);\n}"}
{"instruction": "Using only the existing variables, edit the code to subtract the `total_price` by 10%.", "input": "total_price = 100\nfinal_price = total_price", "output": "final_price = total_price - (total_price * 0.10)"}
{"instruction": "Edit the following C++ code so that it prints 10, 11 and 12 in order.", "input": "#include <iostream>\n\nint main() \n{\n  int i = 10;\n  int j = 12;\n  while (i < j)\n  {\n    std::cout << i << \" \";\n    i++;\n  }\n  return 0;\n}", "output": "#include <iostream>\n\nint main() \n{\n  int i = 10;\n  int j = 12;\n  while (i <= j)\n  {\n    std::cout << i << \" \";\n    i++;\n  }\n  return 0;\n}"}
{"instruction": "Edit the code below to calculate minimum of 3 numbers.", "input": "def min(a, b):\n    if a < b:\n        return a\n    else:\n        return b", "output": "def min(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"}
{"instruction": "Debug this JavaScript code.", "input": "function mysteryFunction(x) {\n    let result = 0;\n    for (let i = 1; i <= x; i++) {\n        result = result * i;\n    }\n    return result;\n}", "output": "function mysteryFunction(x) {\n    let result = 1;\n    for (let i = 1; i <= x; i++) {\n        result = result * i;\n    }\n    return result;\n}"}
{"instruction": "Resolve the issue in the code causing a \"TypeError\" to be thrown", "input": "names = [\"John\", \"James\", 10]\n\nfor name in names:\n  print(name)", "output": "\"\"\"\nResolve the issue in the code causing a TypeError to be thrown\n\"\"\"\n\nnames = [\"John\", \"James\", 10]\n\nfor name in names:\n  # Check the type of the element and only display it if it's a string\n  if type(name) == str:\n    print(name)\n\n\"\"\"\nOutput:\nJohn\nJames\n\"\"\""}
{"instruction": "Using a try-except statement, write a Python code to handle a ValueError which arises if the input is not a number.", "input": "", "output": "try:\n  input_num = int(input(\"Enter a number: \"))\nexcept ValueError:\n  print(\"Please enter a valid number\")"}
{"instruction": "Modify the given HTML code so that it redirects to the page specified in the href attribute.", "input": "<a>Redirect Here</a>", "output": "<a href=\"http://example.com\" >Redirect Here</a>"}
{"instruction": "Given an array of integers and a target value, modify the array such that each element is the multiplication of the previous element and the target value.", "input": "arr = [2, 4, 5], target = 3", "output": "arr = [2, 8, 24]  # [2 * 3, 4 * 3, 5 * 3]"}
{"instruction": "Identify the errors, if any, in the following code.", "input": "sum = 0\nfor i in range(1,10):\n    sum =+ i", "output": "The error is that the operator '=+' should be changed to '+='. This operator adds the value on the left to the current value of the variable on the right, and then assigns the result back to the variable on the right. The correct code should be:\n\nsum = 0\nfor i in range(1,10): \n    sum += i"}
{"instruction": "Edit the following HTML code to make all the headings bold.\n\n<h1>Heading 1</h1>\n<h2>Heading 2</h2>", "input": "", "output": "<h1><strong>Heading 1</strong></h1>\n<h2><strong>Heading 2</strong></h2>"}
{"instruction": "Change the following code so that it prints the list elements in reverse order.", "input": "arr = [1, 2, 3, 4, 5]\n\nfor x in arr:\n    print(x)", "output": "arr = [1, 2, 3, 4, 5]\n\nfor x in arr[::-1]:\n    print(x)"}
{"instruction": "Create a CSS style sheet that changes the font size of all 'h1' tags to \"3rem\".", "input": "", "output": "h1 {\n   font-size: 3rem;\n}"}
{"instruction": "Raise an error with the message \"Invalid value\" when the following function is called and the value of \"n\" is below 0.", "input": "def check_value(n):\n    # TODO", "output": "def check_value(n):\n    if n < 0:\n        raise ValueError(\"Invalid value\")"}
{"instruction": "Edit the following HTML to create a heading with the title \"Welcome\".", "input": "<h2>Hello World</h2>", "output": "<h2>Welcome</h2>"}
{"instruction": "Change the following HTML element to have 2 classes: \"class1\" and \"class2\".", "input": "<div id=\"container\">", "output": "<div id=\"container\" class=\"class1 class2\">"}
{"instruction": "Modify a given program to replace each element in an array with the sum of all elements before it.", "input": "[1,2,3,4]", "output": "def pref_sum(a):\n    output = [a[0]]\n    for i in range(1, len(a)):\n        output.append(a[i] + output[i-1])\n    return output"}
{"instruction": "Identify the issue in the following function and suggest a fix", "input": "def print_multiply(x, y):\n    for i in range(10):\n        print(x*i)", "output": "def print_multiply(x, y):\n    for i in range(10):\n        print(x*y)  # change i to y"}
{"instruction": "Edit this JavaScript code to use the correct syntax for the switch statement.", "input": "if (action == 'play') {\n  console.log('Playing...');\n} else if (action == 'stop') {\n  console.log('Stopping...');\n} else {\n  console.log('Undefined action');\n}", "output": "switch (action) {\n  case 'play':\n    console.log('Playing...');\n    break;\n  case 'stop':\n    console.log('Stopping...');\n    break;\n  default:\n    console.log('Undefined action'); \n}"}
{"instruction": "Modify the following C code so it will display the average of numbers in an array", "input": "#include <stdio.h>\n\nint main()\n{\n  int nums[] = {1,2,3,4};", "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    int nums[] = {1,2,3,4};\n    int len = sizeof(nums) / sizeof(nums[0]);\n    int sum = 0;\n    double average = 0;\n\n    for(int i = 0; i < len; i++) {\n        sum += nums[i];\n    }\n\n    average = (double)sum / (double)len;\n\n    printf(\"The average is: %f\",average);\n    \n    return 0;\n}"}
{"instruction": "Read the code below and edit it to make the output for the given input.", "input": "def sum_two(a, b):\n     return a + b\n\nInput: a = 5, b = 10", "output": "def sum_two(a, b):\n     return a + b\n\nInput: a = 5, b = 10\nOutput: 15"}
{"instruction": "Edit the following program to add 1 to each element of the list and print the result.", "input": "my_list = [2, 5, 7, 9]", "output": "my_list = [2, 5, 7, 9]\nfor (let i = 0; i < my_list.length; i++) {\n    my_list[i] = my_list[i] + 1;\n}\nconsole.log(my_list); // [3, 6, 8, 10]"}
{"instruction": "Edit the following HTML to have a green background color.", "input": "<div>This is a div element</div>", "output": "<div style=\"background-color: green;\">This is a div element</div>"}
{"instruction": "Edit the given code to print out the largest even number in the given list.", "input": "lst = [1, 8, 9, 10, 6]", "output": "lst = [1, 8, 9, 10, 6]\n\neven_nums = []\n\nfor num in lst:\n    if num % 2 == 0:\n        even_nums.append(num)\n\nif even_nums:\n    print(max(even_nums))\nelse:\n    print(\"No even numbers in the list.\")\n# Output: 10"}
{"instruction": "Modify the code for the given purpose", "input": "string = input(\"Enter a string: \")", "output": "string = input(\"Enter a string: \")\nif not string.isalpha():\n    print(\"Input must contain only letters\")"}
{"instruction": "Edit the following code to print out the nth Fibonacci number.", "input": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\nprint(Fibonacci(n))"}
{"instruction": "Edit the following HTML code to enable a toggle to show and hide a DIV element when a button is clicked.", "input": "<div>\n  <button>Toggle</button>\n  <p>This is a text paragraph.</p>\n</div>", "output": "<div>\n  <button onclick=\"toggleFunction()\">Toggle</button>\n  <p>This is a text paragraph.</p>\n  <div id=\"myDIV\" style=\"display:none;\">\n    <p>This is the toggleable content.</p>\n  </div>\n  <script>\n    function toggleFunction() {\n      let x = document.getElementById(\"myDIV\");\n      if (x.style.display === \"none\") {\n        x.style.display = \"block\";\n      } else {\n        x.style.display = \"none\";\n      }\n    }\n  </script>\n</div>"}
{"instruction": "Modify the given Java code to print the first character of each word in a sentence.", "input": "String sentence = \"Today is a good day\";", "output": "String sentence = \"Today is a good day\";\nString[] words = sentence.split(\" \");\n \nfor (String word : words) {\n    System.out.print(word.charAt(0));\n}"}
{"instruction": "Change the code to make it an Expression Statement in Python", "input": "x + 1", "output": "print(x + 1)"}
{"instruction": "Edit the given JavaScript code so that the output is the Fibonacci sequence from 1 to \"n\".", "input": "let a = 0, b = 1, result\nfor (let i = 1; i < n; i++) {\n  result = a + b\n  a = b\n  b = result\n}\nconsole.log(result)", "output": "let a = 0, b =1, result\nfor (let i = 0; i < n; i++) {\n  result = a + b\n  a = b\n  b = result\n  console.log(a)\n}"}
{"instruction": "Edit the code to convert the string \"cat\" to \"dog\".", "input": "String str = \"cat\"", "output": "String str = \"dog\";"}
{"instruction": "Change the following code snippet to use a different method to display the alert.", "input": "alert(\"Hello World!\");", "output": "console.log(\"Hello World!\");"}
{"instruction": "Create a CSS style sheet to change the font color of an heading to red.", "input": "", "output": "h1 {\n  color: red;\n}"}
{"instruction": "Modify the code to print the second largest number in a list.", "input": "num_list = [3, 6, 8, 4, 12, 20, 7]", "output": "num_list = [3, 6, 8, 4, 12, 20, 7]\n\n# Sort the list in descending order\nnum_list.sort(reverse=True)\n\n# Print the second largest number\nprint(num_list[1])"}
{"instruction": "Edit the HTML code snippet below to add the attribute \"target='_blank'\" to the link element.", "input": "<a href=\"https://example.com\">Example Website</a>", "output": "<a href=\"https://example.com\" target='_blank'>Example Website</a>"}
{"instruction": "Edit the original code snippet so that it prints in the correct syntax for a Python 3 script.", "input": "#!/usr/bin/python\nprint \"Hello, World!\"", "output": "#!/usr/bin/python\nprint(\"Hello, World!\")"}
{"instruction": "Modify the code to convert the string \"12345678\" to an integer.", "input": "let str = \"12345678\";", "output": "let num = parseInt(str);\nconsole.log(num);"}
{"instruction": "How would you modify the following Java code to print the first 5 numbers of the Fibonacci sequence?", "input": "public class FibonacciPrinter {\n    public static void printNumbers() {\n        System.out.println(\"...\");\n    }\n}", "output": "public class FibonacciPrinter {\n    public static void printNumbers() {\n        int n1=0, n2=1, n3, i, count=5;\n        System.out.print(n1+\" \"+n2);\n\n        for(i=2;i<count;++i)\n        {    \n            n3=n1+n2;    \n            System.out.print(\" \"+n3);    \n            n1=n2;    \n            n2=n3;    \n        }    \n    }\n}"}
{"instruction": "Change the CSS style of the paragraph element below so that it has a red border around it.", "input": "<p>This is my paragraph</p>", "output": "<p style=\"border: 1px solid red;\">This is my paragraph</p>"}
{"instruction": "Edit the following HTML code so that it displays a black, 100px border-radius circle.", "input": "<div class=\"circle\"></div>", "output": "<div class=\"circle\" style=\"border-radius: 100px; background-color: black; height: 100px; width: 100px;\"></div>"}
{"instruction": "Edit the code to delete the element with value 6 from the array.", "input": "int arr[] = {2, 4, 6, 8, 10}", "output": "// remove element at index 2\nfor (int i=2; i< arr.length-1; i++)\n   arr[i] = arr[i+1];\n   \n// Reduce size of array by 1  \nint len = arr.length -1;   \nint[] newarr = new int[len];\nfor (int i=0; i<newarr.length; i++)\n   newarr[i] = arr[i];"}
{"instruction": "Edit this Python program so that it logs a message whenever an error occurs.", "input": "def divide_nums(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError as e:\n        print('Error:', e)", "output": "def divide_nums(a, b):\n    try:\n        return a / b\n    except ZeroDivisionError as e:\n        print('Error:', e)\n        logging.error('An error occurred during division.')"}
{"instruction": "Edit the following HTML markup to add a \"Welcome!\" heading.", "input": "<section>\n <span>This is a sample section</span>\n</section>", "output": "<section>\n <h1>Welcome!</h1>\n <span>This is a sample section</span>\n</section>"}
{"instruction": "Edit the code so that it can handle the fractions.", "input": "def calculate(x, y): \n    if isinstance(x, int) and isinstance(y, int): \n        return x + y \n    else: \n        return \"Please use integers only.\"", "output": "def calculate(x, y): \n    # Check if the numbers are integers or floats \n    if isinstance(x, (int, float)) and isinstance(y, (int, float)): \n        return x + y \n    else: \n        return \"Please use numbers only.\""}
{"instruction": "Analyze the given Java code and identify the errors.", "input": "public class TestClass {\n   public static void main (String[] args) {\n      int x = 10;\n      int y = 20\n      int z = x + y;\n      system.out.println(\"The sum is: \" + z);\n   }\n}", "output": "The errors are:\n1. The semicolon at the end of line 2 is missing.\n2. The line 4 should be `System.out.println(\"The sum is: \" + z);` (the capital S is missing).\n3. The line 5 is an extra line which should be removed."}
{"instruction": "Identify any typos or grammatical errors in this sentence.", "input": "Emmm, it seemms so.", "output": "typos: \"seemms\" \ngrammatical errors: none"}
{"instruction": "Edit a given HTML string so that every word is displayed in bold.", "input": "<div>This is a sample sentence.</div>", "output": "<div>\n<strong>This</strong> <strong>is</strong> <strong>a</strong> <strong>sample</strong> <strong>sentence.</strong>\n</div>"}
{"instruction": "Create a function in Java that changes a given string to uppercase.", "input": "This is a sample string.", "output": "String input = \"This is a sample string\";\n\nString upper = input.toUpperCase();\n\nSystem.out.println(upper);"}
{"instruction": "Debug the following Java code snippet to makes sure it is syntactically correct:", "input": "public class Test \n{ \n   public static void main(String[] args) \n   { \n       int num1 = 0; \n       int num2 = 0; \n       if (num1 = 0) \n       { \n          num2 = 1; \n       } \n    } \n}", "output": "public class Test \n{ \n   public static void main(String[] args) \n   { \n       int num1 = 0; \n       int num2 = 0; \n       if (num1 == 0) \n       { \n          num2 = 1; \n       } \n    } \n}"}
{"instruction": "Debug the following Java code to return the number of elements in the list.", "input": "ArrayList<String> valueList = new ArrayList<String>();\nvalueList.add(\"Apple\");\nvalueList.add(\"Banana\");\nvalueList.add(\"Orange\");\nSystem.out.println(\"Number of elements: \" + valueList.length);", "output": "ArrayList<String> valueList = new ArrayList<String>();\nvalueList.add(\"Apple\");\nvalueList.add(\"Banana\");\nvalueList.add(\"Orange\");\nSystem.out.println(\"Number of elements: \" + valueList.size();"}
{"instruction": "Classify the type of error in the following code snippet.", "input": "for i in range(5):\n    print(i, sum)", "output": "The type of error here is a NameError, where a variable is referenced without having been previously defined."}
{"instruction": "You need to edit the following code so that it returns \"hello world\" as a string.", "input": "function greet() {\n    return 'hello' \n}", "output": "function greet() {\n    return 'hello' + ' world'\n}"}
{"instruction": "Edit the following HTML to give a baseline styling to the body.", "input": "<body>\n    <h2>Hello World</h2>\n</body>", "output": "<body style=\"margin: 0; padding: 0; font-family: sans-serif; box-sizing: border-box; font-size: 16px; line-height: 1.5; background-color: #f5f5f5; color: #222222;\">\n    <h2>Hello World</h2>\n</body>"}
{"instruction": "Correct the following HTML code to remove mistakes and indentation errors", "input": "`<html><head><title>My Site</title></head>\n <body>\n   <h1>Welcome!</h1><p>My website\n </body>\n </html>`", "output": "<html>\n  <head>\n    <title>My Site</title>\n  </head>\n  <body>\n    <h1>Welcome!</h1>\n    <p>My website</p>\n  </body>\n</html>"}
{"instruction": "Change the following array of objects to a dictionary.", "input": "const arr = [\n  {id: 1, name: \"John\"},\n  {id: 2, name: \"Jane\"},\n  {id: 3, name: \"Jake\"}\n];", "output": "const obj = {\n  1: {name: \"John\"},\n  2: {name: \"Jane\"},\n  3: {name: \"Jake\"}\n};"}
{"instruction": "Modify a jQuery code to make an element translucent", "input": "", "output": "$(document).ready(function(){\n  $(\"#targetElement\").css(\"opacity\", \"0.5\");\n});"}
{"instruction": "Write a code to edit a given column in an SQL table.", "input": "", "output": "ALTER TABLE my_table\n  MODIFY my_column TYPE INT;"}
{"instruction": "Fix the following code so that it works without errors.", "input": "```\ndef remove_characters(name, characters):\n    for c in characters:\n        name.replace(c, '')\n    return name\n\nname = \"Alice\"\ncharacters = [\"A\", \"e\"]\n```", "output": "```\ndef remove_characters(name, characters):\n    for c in characters:\n        name = name.replace(c, '')\n    return name\n\nname = \"Alice\"\ncharacters = [\"A\", \"e\"]\n```"}
{"instruction": "Edit the following code to make it print out the sum of two numbers.", "input": "num1 = 10\nnum2 = 5\n\nprint(num1 * num2)", "output": "num1 = 10\nnum2 = 5\n\nprint(num1 + num2)"}
{"instruction": "Modify the following code to swap the values of two variables without using a third variable.", "input": "a = 5\nb = 3", "output": "a = 5\nb = 3\n\na, b = b, a"}
{"instruction": "Modify this HTML to add a paragraph element.", "input": "<div class=\"example\">\n  <h2>Example</h2>\n</div>", "output": "<div class=\"example\">\n  <h2>Example</h2>\n  <p>This is a paragraph element</p>\n</div>"}
{"instruction": "Add a try-except clause to the given code to catch IndexError exceptions.", "input": "list1 = [1, 2, 3]\nprint(list1[5])", "output": "try:\n    list1 = [1, 2, 3]\n    print(list1[5])\nexcept IndexError:\n    print(\"IndexError occurred.\")"}
{"instruction": "Change the HTML structure above to set the title and content language to Italian.", "input": "", "output": "<!DOCTYPE html>\n<html lang=\"it\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>La mia prima pagina web</title>\n</head>\n\n<body>\n\n</body>\n</html>"}
{"instruction": "Using the comment as a guide, edit the code to handle the error appropriately.", "input": "try:\n    # TODO: Make API call\nexcept Exception:\n    # TODO: Handle error", "output": "try:\n    # Make API call\nexcept Exception as e:\n    # Handle error\n    print(\"An error occurred:\", e)"}
{"instruction": "Modify the following C code to make it print \"Hello World\"", "input": "#include <stdio.h>\nint main()\n{ \n    printf(\"...\");\n    return 0;\n}", "output": "#include <stdio.h>\nint main()\n{ \n    printf(\"Hello World\");\n    return 0;\n}"}
{"instruction": "Edit the above PHP function so that it also checks if a given number is prime.", "input": "", "output": "function isPrime($n) {\n  if ($n == 1) {\n    return false;\n  } \n  elseif ($n == 2) {\n    return true;\n  } \n  else {\n    for ($i = 2; $i <= sqrt($n); $i++) {\n      if ($n % $i == 0) {\n        return false;\n        break;\n      }\n    }\n    return true;\n  }\n}"}
{"instruction": "In this C++ program, there is an error. Please identify and fix the mistake.", "input": "int main()\n{\n cout << \"Hello World!\";\n return 0", "output": "int main()\n{\n std::cout << \"Hello World!\" << std::endl;\n return 0;\n}"}
{"instruction": "How can you handle errors in Python?", "input": "", "output": "Python provides two ways to handle errors: \n\n1. The try and except statement, and \n2. The raise statement.\n\nThe try and except statement is used to catch and handle exceptions, while the raise statement is used to explicitly raise an exception."}
{"instruction": "Edit this C++ code to remove all comments.", "input": "// This is a comment\n// This is another comment\nint main() {\n    /*\n    This is a multiline comment\n    */\n    std::cout << \"Hello World\";    \n    return 0;\n}", "output": "int main() {\n    std::cout << \"Hello World\";    \n    return 0;\n}"}
{"instruction": "Change the following HTML elements into a bulleted list with CSS.", "input": "<div>Item 1</div>\n<div>Item 2</div>\n<div>Item 3</div>", "output": "<style>\n    div {\n        list-style-type: disc;\n    }\n<style>\n\n<div>Item 1</div>\n<div>Item 2</div>\n<div>Item 3</div>"}
{"instruction": "Introduce a condition to change the background color of a given HTML page to green when the user clicks a button.", "input": "", "output": "<script>\n   function changeBackgroundColor() {\n     document.body.style.backgroundColor = 'green';\n   }\n</script>\n<button onclick=\"changeBackgroundColor()\">Change background color!</button>"}
{"instruction": "Change the if-else statement to a switch statement.", "input": "if (x == 0) {\n Console.WriteLine(\"Zero\");\n}\nelse if (x == 1) {\n Console.WriteLine(\"One\");\n}", "output": "switch (x) {\n  case 0:\n       Console.WriteLine(\"Zero\");\n       break;\n  case 1:\n       Console.WriteLine(\"One\");\n       break;\n}"}
{"instruction": "Identify and correct the bug in the following program.", "input": "def square_numbers(lst):\n    lst_sq = []\n    lst_sq.append(lst[i] ** 2 for i in range(len(lst)))\n    return lst_sq", "output": "def square_numbers(lst):\n    lst_sq = []\n    for i in range(len(lst)):\n        lst_sq.append(lst[i] ** 2)\n    return lst_sq"}
{"instruction": "EDIT this JavaScript function to return a list of the square roots of all numbers in a given input array.", "input": "function squareRoots(arr) {\n  // EDIT THIS\n}", "output": "function squareRoots(arr) {\n  const result = [];\n  for (let ele of arr) {\n    result.push(Math.sqrt(ele));\n  }\n  return result;\n}"}
{"instruction": "Edit the following Java code snippet to increase efficiency", "input": "public class MyClass {\n    public static void main(String[] args) {\n        int i = 0;\n        while (i < 10) {\n           i++;\n           System.out.println(i);\n        }\n    }\n}", "output": "public class MyClass {\n    public static void main(String[] args) {\n        //Set the counter to 1\n        int i = 1;\n        //Use less than or equal comparison to include 10\n        while (i <= 10) {\n           //short-hand increment\n           i++;\n           System.out.println(i);\n        }\n    }\n}"}
{"instruction": "Modify the given Python code to calculate the sum of the given list and print the output.", "input": "list = [1,2,3,4,5]", "output": "def sumList(list): \n    sum = 0\n    for i in list:\n        sum = sum + i\n    return sum\n\nprint(sumList(list))"}
{"instruction": "Create a new branch in Git to fix a bug in the application.", "input": "", "output": "git branch bug-fix"}
{"instruction": "Edit the following HTML code to allow Google Chrome to accurately render the page.", "input": "<html>\n<head>\n  <title>My Webpage</title>\n</head>\n<body>\n  <table>\n  <tr>\n    <th>Column 1</th>\n    <th>Coloumn 2</th>\n  </tr>\n</body>\n</html>", "output": "<html>\n  <head>\n    <title>My Webpage</title>\n  </head>\n  <body>\n    <table>\n      <tr>\n        <th>Column 1</th>\n        <th>Column 2</th>\n      </tr>\n    </table>\n  </body>\n</html>"}
{"instruction": "Edit the following code to take in a list of numbers and output the sum of all numbers in the list.", "input": "my_list = [5, 10, 15, 20]", "output": "my_list = [5, 10, 15, 20]\ntotal = 0\nfor num in my_list:\n    total += num\nprint(total) #50"}
{"instruction": "Make changes to the following code to include a 'break' statement.", "input": "while True:\n    print(\"Hello\")", "output": "while True:\n    print(\"Hello\")\n    if condition is met: \n        break"}
{"instruction": "Create a css style that changes the color of the text in the div with the ID \"example\".", "input": "", "output": "#example {\n   color: red;\n}"}
{"instruction": "Modify the following given program to print all prime number between 1 and n", "input": "", "output": "def check_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef print_prime_numbers(n):\n    for num in range(1, n + 1):\n        if check_prime(num):\n            print(num)"}
{"instruction": "Manually debug the following code to find any errors.", "input": "def foo(x):\n    y = x**3\n    z = y + 2\n    return z", "output": "No errors found in the given code."}
{"instruction": "Edit the statement to make it a valid expression in Python.", "input": "x = y =", "output": "x = y = 0"}
{"instruction": "Change the font size of the HTML element <p> to \"14px\".", "input": "", "output": "document.querySelector('p').style.fontSize = \"14px\";"}
{"instruction": "Use the function to debug the given program and prevent the segmentation fault.", "input": "#include <stdio.h>\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    int n = 5;\n    int i;\n    // TODO\n    for (i = 0; i <= n; i++) {\n        printf(\"%d\\n\", array[i]);\n    }\n    return 0;\n}", "output": "#include <stdio.h>\n\nint main() {\n    int array[] = {1, 2, 3, 4, 5};\n    int n = 5;\n    int i;\n    // Limit loop size to the length of the array\n    for (i = 0; i < n; i++) {\n        printf(\"%d\\n\", array[i]);\n    }\n    return 0;\n}"}
{"instruction": "Edit the given SQL query to return the number of employees from each team.", "input": "SELECT * FROM Employees", "output": "SELECT team, COUNT(*) AS total_count\nFROM Employees\nGROUP BY team"}
{"instruction": "Edit the code to make the string word_list case-insensitive.", "input": "word_list = [\"cat\", \"dog\", \"bird\"]", "output": "\"\"\"\nEdit the code to make the string word_list case-insensitive\n\"\"\"\n\nword_list = [\"cat\", \"dog\", \"bird\"]\n\n# Make the string case-insensitive\nword_list = [word.lower() for word in word_list]\n\nprint(word_list)\n\n\"\"\"\nOutput: ['cat', 'dog', 'bird']\n\"\"\""}
{"instruction": "Fix the bug in the following code by modifying the function is_star_jumping_high_enough:\n\ndef is_star_jumping_high_enough(star_height):\n    \"\"\"return true if star height is greater than 5\"\"\"\n    if star_height < 5:\n        return True", "input": "", "output": "def is_star_jumping_high_enough(star_height):\n    \"\"\"return true if star height is greater than 5\"\"\"\n    if star_height > 5:\n        return True"}
{"instruction": "Find the closest match in a given string using the Levenshtein edit distance.", "input": "String: helpful\nClosest match: healthful", "output": "editDistance(helpful, healthful) = 2"}
{"instruction": "Edit the following code to update an existing item in a MongoDB database with the name \u201cJohn\u201d.", "input": "db.collection(\"users\").findOne({ name: \"John\" });", "output": "db.collection(\"users\").updateOne(\n  { name: \"John\" },\n  {\n    $set: {\n      name: \"John\",\n      age: 32\n    }\n  }\n);"}
{"instruction": "Edit this code to print out the square of a given number, using '#' as a marker.", "input": "num = 8", "output": "num = 8 \n#\n#\n#\n#\n#\n#\n#\n# # # # # # # # # #"}
{"instruction": "In the following code, modify the function to take the type of an argument as an input and perform the necessary conversion before returning the result.", "input": "def get_string(input): \n    return str(input)", "output": "def get_string(input, type): \n    if type == 'int':\n        return str(int(input))\n    elif type == 'float':\n        return str(float(input))\n    elif type == 'str':\n        return str(input)"}
{"instruction": "Edit the following code to use more efficient algorithms to improve its performance.", "input": "for (int i = 0; i < n; i++)\n{\n    sum += i;\n}", "output": "int sum = 0; \nfor (int i = 0; i < n; i++) \n    sum += i;\nsum = n * (n + 1) / 2;"}
{"instruction": "Change the following function to make it into a function that can be called with multiple arguments.", "input": "def enclose_data(x):\n    return 'data:' + x", "output": "def enclose_data(*data):\n    return 'data:' + \"|\".join(data)"}
{"instruction": "Edit the code given below to make it print the numbers from 1 to 10 in increasing order.", "input": "for i in range(10):\n    print(i)", "output": "for i in range(1, 11):\n    print(i)"}
{"instruction": "Edit the following Python code to print a date in a human-readable form.", "input": "print(date.today())", "output": "from datetime import date \nprint(date.today().strftime(\"%B %d, %Y\"))"}
{"instruction": "How would you change the following C code to include a while loop?", "input": "for (int i=0; i<10; i++) \n    printf(\"I am going to count %d\\n\", i);", "output": "#include <stdio.h> \n\nint main() \n{ \n    int i = 0; \n    while (i < 10) { \n        printf(\"I am going to count %d\\n\", i); \n        i++; \n    } \n    return 0; \n}"}
{"instruction": "edit the existing function to calculate the compound interest.", "input": "# Calculate Simple Interest \ndef calcSimpleInterest(p, r, t): \n    return (p * r * t) / 100", "output": "\"\"\"\nEdit the existing function to calculate the compound interest\n\"\"\"\n# Calculate Compound Interest \ndef calcCompoundInterest(p, r, t): \n    # Calculate Simple Interest \n    interest= p * (pow((1 + r / 100), t)) \n    return interest\n\nif __name__ == '__main__': \n    principal_amount = 1000\n    rate_of_interest = 5\n    time_period = 5\n    print(\"Compound interest is\", calcCompoundInterest(principal_amount, rate_of_interest, time_period))"}
{"instruction": "Edit the following JavaScript code to add two functions, one to increase the number of elements in the array and another to remove the last element in the array.", "input": "let array = [1, 2, 3, 4];", "output": "let array = [1, 2, 3, 4];\n\nfunction addElement(element) {\n    array.push(element);\n}\n\nfunction removeElement() {\n    array.pop(array.length-1);\n}"}
{"instruction": "Create an HTML view with a button that changes its text when clicked.", "input": "", "output": "<button id=\"button\">Click me!</button>\n\n<script>\n  document.getElementById('button').addEventListener('click', function(){\n    this.innerText=\"I am clicked!\";\n  });\n </script>"}
{"instruction": "Edit the existing HTML code to create a list with bullets.", "input": "<p>My favorite fruits are:\nApple, Banana, Orange</p>", "output": "<p>My favorite fruits are:</p>\n<ul>\n  <li>Apple</li>\n  <li>Banana</li>\n  <li>Orange</li>\n</ul>"}
{"instruction": "Return an error message when a user inputs a negative number.", "input": "", "output": "if (number < 0):\n  print('Error: Number cannot be negative.')"}
{"instruction": "Modify the given program so that it can output the average of numbers a,b, and c.", "input": "a = 2\n b = 5\n c = 7", "output": "def average(a, b, c):\n  return (a + b + c) / 3\n\na = 2\nb = 5\nc = 7\naverage = average(a, b, c)\nprint(\"Average of a, b and c is:\", average)"}
{"instruction": "Debug the following function.", "input": "def f(n):\n    i = 0\n    while i < n:\n        i+=1\n        if i % 5 == 0:\n        print(i)", "output": "def f(n): \n    i = 0\n    while i < n:\n        i+=1\n\t\t# Fixed missing indentation\n        if i % 5 == 0:\n            print(i)\n\t\t# Added missing closing bracket after print() statement"}
{"instruction": "Modify a given JavaScript code snippet to add a random background color to all elements with the class name 'box'.", "input": "document.querySelectorAll('.box').forEach(function(el) {\n  el.style.backgroundColor = \"red\";\n});", "output": "document.querySelectorAll('.box').forEach(function(el) {\n  const randomHex = Math.floor(Math.random()*16777215).toString(16);\n  el.style.backgroundColor = `#${randomHex}`;\n});"}
{"instruction": "Edit the following code so that it prints out all powers of 2 up to 2^n", "input": "n = 5", "output": "def power_of_2(n):\n    result = 1\n    for i in range(n):\n        print(result)\n        result *= 2"}
{"instruction": "Edit the given Bash script to output only the lines with double digit numbers.", "input": "#!/bin/bash\nnumlist=\"25 3 1 2 46 4 5 21 7 9 6 10\"\nfor i in $numlist\ndo\n    echo \"Number $i\"\ndone", "output": "#!/bin/bash\nnumlist=\"25 3 1 2 46 4 5 21 7 9 6 10\"\nfor i in $numlist\ndo\n    if [[ $i =~ [0-9][0-9] ]]\n    then\n    echo \"Number $i\"\n    fi\ndone"}
{"instruction": "Edit the following for loop to add a counter that tracks the number of iterations of the loop.", "input": "for i in range(10):\n  print(i)", "output": "counter = 0\n\nfor i in range(10):\n  print(i)\n  counter += 1\n\nprint(f\"Number of iterations: {counter}\")"}
{"instruction": "Debug the following code to print all the elements of an array.", "input": "int[] arr = {1,2,3,4,5};\nfor (int i = 0; i < arr.len; i++){\n  System.out.println(arr[i]);\n}", "output": "int[] arr = {1,2,3,4,5};\nfor (int i = 0; i < arr.length; i++){\n  System.out.println(arr[i]);\n}"}
{"instruction": "Using the given input, modify the following HTML code so it shows a list of 5 items", "input": "<ul>\n    <li></li>\n</ul>", "output": "<ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n    <li>Item 4</li>\n    <li>Item 5</li>\n</ul>"}
{"instruction": "Edit this piece of Python code to make sure that the decimal is rounded off correctly.", "input": "a = round(0.54678, 2)", "output": "a = round(0.54678, 2)  # rounds off to 2 decimal places"}
{"instruction": "Edit the following JavaScript to add validation to an input field.", "input": "<input type=\"text\" id=\"name\" name=\"name\" />", "output": "<input type=\"text\" id=\"name\" name=\"name\" onChange=\"validateName()\" />\n\n<script>\nfunction validateName() {\n  var name = document.getElementById(\"name\").value;\n  if (name.length < 5) {\n    alert(\"Name should contain at least 5 characters!\");\n  }\n}\n</script>"}
{"instruction": "In the given CSS stylesheet, change all the h1 heading text to purple.", "input": "h1 {\n  font-size: 3rem;\n  font-weight: bold;\n  color: #b0b0b0;\n}", "output": "h1 {\n  font-size: 3rem;\n  font-weight: bold;\n  color: #9100ff;\n}"}
{"instruction": "Edit the given HTML code to add a title tag inside the head tag.", "input": "<html>\n <head>\n </head>\n <body>\n   <h1>My Website</h1>\n </body>\n</html>", "output": "<html>\n <head>\n  <title>My Website</title>\n </head>\n <body>\n   <h1>My Website</h1>\n </body>\n</html>"}
{"instruction": "Edit the code to print \u201cWelcome to Python Programming\u201d five times.", "input": "print(\"Hello Python\")", "output": "for i in range(5):\n  print(\"Welcome to Python Programming\")"}
{"instruction": "Modify the following code to use a for loop to print the numbers 0 to 9", "input": "", "output": "for i in range(10): \n    print(i) # prints the numbers 0 to 9"}
{"instruction": "Create a CSS class called \"alert-box\" that changes the body's background color to red when applied.", "input": "", "output": ".alert-box {\n    background-color: red;\n}"}
{"instruction": "Change the following code to make it easier to read", "input": "a=3;b='aa';b*=a;print(b)", "output": "a = 3\nb = 'aa'\nb = b * a\nprint(b)"}
{"instruction": "Edit the following XML code to add a navigation bar to the top of a web page", "input": "<html>\n<head>\n  <title>My Webpage</title>\n</head>", "output": "<html>\n<head>\n  <title>My Webpage</title>\n</head>\n<body>\n  <nav>\n    <ul>\n      <li><a href=\"index.html\">Home</a></li>\n      <li><a href=\"about.html\">About Us</a></li>\n      <li><a href=\"contact.html\">Contact</a></li>\n    </ul>\n  </nav>\n</body>"}
{"instruction": "Change the comment to a print statement in the code.", "input": "x = 1\n# print the value of x", "output": "x = 1\nprint(x)"}
{"instruction": "Analyze an object-oriented program written in Python and suggest changes to improve its technical quality.", "input": "def main():\n  my_list = [1,2,3,4] \n\n  for element in my_list:\n    print(element)\n\nif __name__== \"__main__\"\n  main()", "output": "The program can be improved to make use of better data structure, such as a list comprehension. This would allow faster iteration over the list and reduce duplicate lines of code.\n\ndef main():\n  my_list = [1,2,3,4] \n\n  my_list = [element for element in my_list] \n\n  for element in my_list:\n    print(element)\n\nif __name__== \"__main__\"\n  main()"}
{"instruction": "Modify the function to return the least common multiple instead.", "input": "", "output": "def lcm(a, b): \n    return (a*b) // gcd(a, b)"}
{"instruction": "Edit the following code to limit the number of characters accepted in a text field to 25.", "input": "<textarea name=\"comment\" cols=\"30\" rows=\"5\"></textarea>", "output": "<textarea name=\"comment\" cols=\"30\" rows=\"5\" maxlength=\"25\"></textarea>"}
{"instruction": "Fix the following syntax error.", "input": "myList = [1, 2, 3", "output": "myList = [1, 2, 3]"}
{"instruction": "Compute the minimum string edit distance between two strings of same length.", "input": "str1 = \"kitten\"\nstr2 = \"sitting\"", "output": "def minimumEditDistance(str1, str2):\n    m = len(str1)\n    n = len(str2)\n \n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0: \n                dp[i][j] = j \n            elif j == 0: \n                dp[i][j] = i \n            elif str1[i - 1] == str2[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j - 1],       \n                                   dp[i - 1][j],       \n                                   dp[i - 1][j - 1]     \n                                   ) \n  \n    return dp[m][n]\n\nmin_edit_distance = minimumEditDistance(str1, str2)\nprint(min_edit_distance) # output: 3"}
{"instruction": "Modify the given Java Program to generate the Fibonacci Series till provided number of terms.", "input": "int n = 10;", "output": "public class Fibonacci { \n\n    static int fib(int n) \n    { \n    if (n <= 1) \n       return n; \n    return fib(n-1) + fib(n-2); \n    } \n       \n    public static void main (String args[]) \n    { \n    int n = 10; \n    System.out.println(fib(n)); \n    } \n}"}
{"instruction": "How to debug a program in Python?", "input": "", "output": "In Python, debugging a program can be done by using a debugger to step through code line by line and checking the current state of the values, variables, objects, and functions. Using a debugger is useful for understanding the exact flow of code and finding errors or unexpected behavior. Python also provides a number of built-in debugging tools such as the ``pdb`` module which can be used to debug a program."}
{"instruction": "Edit the following sentence to change its sentiment from negative to positive.", "input": "I can't stand programming anymore.", "output": "I'm starting to enjoy programming more."}
{"instruction": "Edit this code so that it can marshall a json object", "input": "import json\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 30\n}", "output": "import json\n\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 30\n}\n\nmarshalled_data = json.dumps(data)"}
{"instruction": "How would you change the following HTML to add an \"alt\" attribute to the \"img\" tag?", "input": "<img src=\"sample.jpg\">", "output": "<img src=\"sample.jpg\" alt=\"Sample Image\">"}
{"instruction": "Debug and fix the code in the given input.", "input": "def multiply(x,y)  \n{ \n    return x*y \n  \nx = 5\ny = 4\nprint multiply(x,y)", "output": "def multiply(x,y)  { \n    return x*y \n  \nx = 5\ny = 4\nprint(multiply(x,y))"}
{"instruction": "Modify the code so that it prints the given string in lowercase letters.", "input": "String: \"HELLO WORLD\"\n\nCode:\n#include<iostream>\nusing namespace std;\n\nint main() {\n    string s = \"HELLO WORLD\";\n\n    cout << s << endl;\n\n    return 0;\n}", "output": "#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nint main() {\n    string s = \"HELLO WORLD\";\n\n    // Convert string s to lowercase letters\n    transform(s.begin(), s.end(), s.begin(), ::tolower); \n    cout << s << endl;\n\n    return 0;\n}"}
{"instruction": "Suggest some changes to the following code that will reduce the runtime complexity.", "input": "def search_array(arr, target):\n    '''This function searches a given array for the target and returns its index if found.'''\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1", "output": "def search_array(arr, target):\n    '''This function searches a given array for the target and returns its index if found.'''\n    for i, num in enumerate(arr):\n        if num == target:\n            return i\n    return -1"}
{"instruction": "Edit the given code in Python to produce the desired output.", "input": "lst = [3, 8, 9]\n\nfor i in lst:\n    print(i)\n\nExpected Output:\n3\n8\n9", "output": "lst = [3, 8, 9]\n\nfor i in lst:\n    print(str(i))\n\n# Output\n3\n8\n9"}
{"instruction": "Change this existing Java code to generate the \"Jesus Christ\" string.", "input": "String str = \"Holy\";", "output": "String str = \"Holy\";\nString jesusChrist = str + \" \" + \"Jesus Christ\";\nSystem.out.println(jesusChrist);"}
{"instruction": "Modify the following Java program to print \"Hello world!\" without using a System.out.print statement.", "input": "class HelloWorld {\n\n   public static void main(String args[]) {\n      System.out.print(\"Hello world!\");\n   }\n}", "output": "class HelloWorld {\n\n   public static void main(String args[]) {\n      System.out.println(\"Hello world!\");\n   }\n}"}
{"instruction": "Analyse a provided JSON object and change the value of a specific key to the sum of 2 other keys", "input": "{\n  \"key1\": 10,\n  \"key2\": 20,\n  \"key3\": 0\n}", "output": "{\n  \"key1\": 10,\n  \"key2\": 20,\n  \"key3\": 30\n}"}
{"instruction": "Modify the code below to check if the number is divisible by 2.", "input": "num = 8", "output": "num = 8\nif num % 2 == 0:\n    print('The number is divisible by 2.')"}
{"instruction": "How would you modify the following code to add a time delay of 1 second between each iteration of the loop?", "input": "for i in range(10):\n    print(i)", "output": "import time\n\nfor i in range(10):\n    print(i)\n    time.sleep(1)"}
{"instruction": "Edit the code to fix the following bug: The code doesn't return the expected output.", "input": "def sum(numbers):\n    x = 0\n    for n in numbers:\n        x += n\n    return x", "output": "def sum(numbers):\n    x = 0\n    for n in numbers:\n        x += n\n    return int(x)"}
{"instruction": "Help debug this code snippet by adding comments with the appropriate error messages.", "input": "def greetings(name):\nnum = 5\nmessage = \"Hello, \" + name + \"!\"\nreturn message", "output": "def greetings(name):\n    # assert name is a string\n    assert isinstance(name, str), \"name must be a string\"\n    num = 5\n    # \"message\" variable should be defined before using it \n    message = \"Hello, \" + name + \"!\"\n    return message"}
{"instruction": "Change this program to print the difference of a and b", "input": "a = 10\nb = 5\n\nprint(\"The sum of a and b is \", a + b)", "output": "print(\"The difference of a and b is \", a - b)"}
{"instruction": "Edit the following for loop to add a comment before each iteration.", "input": "for i in range(10):\n    print(i)", "output": "for i in range(10):\n    # loop iteration: i =\n    print(i)"}
{"instruction": "Use HTML web storage to exchange data between a web page and the server.", "input": "", "output": "// To store data\nlocalStorage.setItem(\"name\", \"John Doe\");\n  \n// To get data\nvar name = localStorage.getItem(\"name\");\n  \n// To remove data\nlocalStorage.removeItem(\"name\");"}
{"instruction": "Edit the given MySQL query to return all employee details from the \"employees\" table having both salary and designation value \"Manager\".", "input": "SELECT * FROM employees;", "output": "SELECT * FROM employees WHERE salary = 'Manager' AND designation = 'Manager';"}
{"instruction": "Edit the given code to reverse a given array in JavaScript.", "input": "let arr = [1, 2, 3, 4, 5];", "output": "let arr = [1, 2, 3, 4, 5];\narr.reverse();\nconsole.log(arr);"}
{"instruction": "Change the variable `x` to the data type desired.", "input": "x = 'Hello World!'", "output": "x = \"Hello World!\""}
{"instruction": "Modify a given sentence by replacing the invalid punctuation with a valid one.", "input": "This is an example sentence.", "output": "This is an example sentence?"}
{"instruction": "Modify the following C++ program to print a random number between 0 and 5.", "input": "#include<stdio.h>\nint main() \n{ \n\tint x;\n\tx = rand() % 10;\n\tprintf(\"%d\\n\",x);\n}", "output": "#include<stdio.h>\n#include<stdlib.h>\n#include<time.h>\n\nint main() \n{ \n\tsrand(time(0));\n\tint x;\n\tx = rand() % 6;\n\tprintf(\"%d\\n\",x);\n}"}
{"instruction": "Change the line of code that prints \"Hello World!\" to print \"Goodbye World!\"", "input": "console.log(\"Hello World!\");", "output": "console.log(\"Goodbye World!\");"}
{"instruction": "Modify the below code so that it swaps two variables without the use of a temporary variable.", "input": "int a = 10, b = 20; \nint temp; \ntemp = a; \na = b; \nb = temp;", "output": "int a = 10, b = 20; \na = a + b; \nb = a - b;\na = a - b;"}
{"instruction": "How can you validate a credit card number using JavaScript?", "input": "", "output": "You can validate a credit card number using JavaScript with the Luhn algorithm. The Luhn algorithm is a simple checksum formula that can be used to validate various identification numbers, such as credit card numbers, National Provider Identifier (NPI) numbers, and Canadian Social Insurance Numbers (SINs)."}
{"instruction": "Modify the given Python code to remove any punctuations from the given string.", "input": "string = \"Hello, how are you?\"", "output": "import string\n\ndef remove_punctuation(string):\n    for punct in string.punctuation:\n        string = string.replace(punct, '')\n    return string\n\nstring = \"Hello, how are you?\"\nprint(remove_punctuation(string)) # output 'Hello how are you'"}
{"instruction": "Modify the following SQL query to list the top 3 customers with the highest orders.", "input": "SELECT customers.name, \n        orders.amount \n    FROM customers \n    INNER JOIN orders \n    ON customers.id = orders.customer_id", "output": "SELECT customers.name, \n        orders.amount \n    FROM customers \n    INNER JOIN orders \n    ON customers.id = orders.customer_id\nORDER BY orders.amount DESC\nLIMIT 3"}
{"instruction": "Create a Python program to edit the following line of code to change the text color of the button.", "input": "<button>Press Me</button>", "output": "<button style=\"color: red;\">Press Me</button>"}
{"instruction": "Create a Python Exception to handle Nonetype Error.", "input": "", "output": "try:\n    my_list = [1, 2, 3]\n    my_list[3]\nexcept TypeError:\n    print(\"Error: Nonetype Found\")"}
{"instruction": "resolve the following compile-time error in the program", "input": "#include <stdio.h>\n\nint main()\n{\n    int a = 1, 3;\n    printf(\"%d\", a);\n    return 0;\n}", "output": "#include <stdio.h>\n\nint main()\n{\n    int a = 1; // Removed `3` which caused a compile time error \n    printf(\"%d\", a);\n    return 0;\n}"}
{"instruction": "Fix the bug in the following Python script:", "input": "def is_odd(x):\n  if x % 2 == 1\n    return True\n\nis_odd(5)", "output": "def is_odd(x):\n  if x % 2 == 1:\n    return True\n  else:\n    return False\n\nis_odd(5)"}
{"instruction": "How could we modify the following code to capture user input?", "input": "num = 5", "output": "We can use the built-in input() function to capture user input in this code:\n\nnum = input(\"Please enter a number: \")"}
{"instruction": "Modify the following code to convert it from JavaScript to Java.", "input": "function getAverage(a, b) {\n  return (a + b) / 2;\n}", "output": "public float getAverage(float a, float b) {\n  return (a + b) / 2;\n}"}
{"instruction": "Edit this method to return an array of palindromes.", "input": "public static String[] findPalindromes(String[] words) {\n    ArrayList<String> result = new ArrayList<>();\n    for (String word : words) {\n        if (word.length() >= 2) {\n            result.add(word);\n        }\n    }\n    return result.toArray(new String[result.size()]);\n}", "output": "public static String[] findPalindromes(String[] words) {\n    ArrayList<String> result = new ArrayList<>();\n    for (String word : words) {\n        if (word.length() >= 2 && isPalindrome(word)) {\n            result.add(word);\n        }\n    }\n    return result.toArray(new String[result.size()]);\n}  \n\npublic static boolean isPalindrome(String str) {\n    int left = 0;\n    int right = str.length()-1;\n    \n     while (left < right) { \n        if (str.charAt(left) != str.charAt(right)) \n            return false; \n  \n        left++; \n        right--; \n    } \n  \n    return true; \n}"}
{"instruction": "Create a Python code snippet to identify the root cause of a Software Bug.", "input": "", "output": "def find_causes(data):\n    # identify the root cause of the bug\n\n    causes = set()\n    for line in data:\n        for cause in line.get('causes', []):\n            causes.add(cause)\n\n    # filter insignificant causes\n    causes = [cause for cause in causes if cause not in insignificant_causes]\n\n    return causes"}
{"instruction": "Edit the following code in Python to swap two elements in a list.", "input": "list1 = [1, 2, 4]\n\nlist1[0], list1[1] = list1[1], list1[0]", "output": "list1 = [1, 2, 4]\n\nlist1[0], list1[2] = list1[2], list1[0]"}
{"instruction": "Calculate the edit distance between the two strings.", "input": "str1 = \"SUPER\"\nstr2 = \"SPHERE\"", "output": "edit_distance = 2"}
{"instruction": "How could you modify the following HTML to include a class attribute?", "input": "<div id=\"message\">Hello World!</div>", "output": "<div id=\"message\" class=\"my-class\">Hello World!</div>"}
{"instruction": "debug the following code in Java to list all the prime numbers until 50", "input": "class Main {\n    public static void main(String[] args) {\n        for(int i = 0; i < 50; i++) {\n            if (isPrime(i)) {\n                System.out.println(i);\n            }\n        }\n    }\n    static boolean isPrime(int n){\n\n    }\n}", "output": "class Main {\n    public static void main(String[] args) {\n        for(int i = 0; i < 50; i++) {\n            if (isPrime(i)) {\n                System.out.println(i);\n            }\n        }\n    } \n    static boolean isPrime(int n){\n        if (n <= 1) { \n            return false; \n        } \n        for (int i = 2; i < n; i++) { \n            if (n % i == 0) { \n                return false; \n            } \n        } \n    return true; \n    } \n}"}
{"instruction": "Make the following changes to a JavaScript program.", "input": "let num1 = 10;\nlet num2 = 8;", "output": "let num1 = 10;\nlet num2 = 8;\nlet sum = num1 + num2;\nconsole.log(sum); // Output will be 18."}
{"instruction": "Write a Python function that validates a given credit card number.", "input": "", "output": "def validate(number):\n\"\"\" Validate credit card number using Luhn algorithm \"\"\"\n \n  num = [int(x) for x in str(number)]\n  return (sum(num[::-2] + [sum(divmod(d*2,10)) for d in num[-2::-2]]) % 10 == 0"}
{"instruction": "Change the font size of the text in a webpage from 12px to 24px.", "input": "", "output": "style=\"font-size:24px;\""}
{"instruction": "Change the HTML code to open a link in a new tab when the button is clicked.", "input": "<button>Visit example.com</button>", "output": "<button onclick=\"window.open('https://example.com/','_blank')\">Visit example.com</button>"}
{"instruction": "Edit the following code to insert a new item at the end of a given Python list.", "input": "items = [1, 2, 3]\nnew_item = 4", "output": "items = [1, 2, 3] + [new_item]\nprint(items)  # prints [1, 2, 3, 4]"}
{"instruction": "How would you modify the query to print the average grade of the students?", "input": "SELECT name, grade FROM Students;", "output": "SELECT AVG(grade) FROM Students; \n\nThis query will return the average grade of all students from the Students table."}
{"instruction": "You need to build a code editor with basic features like search, replace, undo, and redo.", "input": "", "output": "def codeEditor():\n    # Initialize the editor\n    editor = texteditor.Editor()\n    \n    # Create buttons for search, replace, undo and redo\n    searchButton = texteditor.Button(caption=\"Search\", onclick=editor.search)\n    replaceButton = texteditor.Button(caption=\"Replace\", onclick=editor.replace)\n    undoButton = texteditor.Button(caption=\"Undo\", onclick=editor.undo)\n    redoButton = texteditor.Button(caption=\"Redo\", onclick=editor.redo)\n    \n    # Create the layout\n    layout = texteditor.layout(\n        [\n            [searchButton, replaceButton],\n            [undoButton, redoButton]\n        ]\n    )\n    \n    # Create the window\n    window = texteditor.Window(layout)\n    \n    # Return the window\n    return window"}
{"instruction": "Change all the characters in a given string to uppercase.", "input": "str = 'Hello World!'", "output": "'HELLO WORLD!'"}
{"instruction": "Edit the following HTML code so the paragraph text's color is red.", "input": "<p>This is a paragraph</p>", "output": "<p style=\"color:red;\">This is a paragraph</p>"}
{"instruction": "Modify the following Python code to make it run faster", "input": "def roll_dice(n):\n    values = []\n    for i in range(n):\n        values.append(random.randint(1,6))\n    return values", "output": "import random\n    \ndef roll_dice(n):\n    values = []\n    random.seed() \n    for i in range(n):\n        values.append(random.randint(1,6))\n    return values"}
{"instruction": "Modify the following Python program to contain an input.", "input": "num1 = 10\nnum2 = 20\nsum = num1 + num2\n\nprint(\"The sum of two numbers is\",sum)", "output": "num1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\nsum = num1 + num2\n\nprint(\"The sum of the two numbers is\", sum)"}
{"instruction": "Create a HTML page with a fixed header bar and a scrolling content area.", "input": "", "output": "<html> \n   <head> \n   </head> \n   <body> \n      <div id=\"header\">\n         <!-- header content -->\n      </div> \n      <div id=\"content\" style=\"overflow-y:scroll;\">\n         <!-- content here -->\n      </div> \n   </body> \n</html>"}
{"instruction": "Modify this string in such a way that it should start with \"Hello \" and must end with \" World\".", "input": "str = \"World, say hello\"", "output": "str = \"Hello World\""}
{"instruction": "Edit this CSS code to change the font style to bold.", "input": "p {\n font-family: \"Arial\", sans-serif;\n font-size: 1.2em;\n }", "output": "p {\n font-family: \"Arial\", sans-serif;\n font-size: 1.2em;\n font-weight: bold;\n}"}
{"instruction": "Modify the below JavaScript code to add two items to an array.", "input": "var items = [];", "output": "var items = []; \nitems.push('Item 1');\nitems.push('Item 2');"}
{"instruction": "Fix the following code so it outputs the correct result.", "input": "def string_formatter(string):\n    new_str = string.split()\n    return new_str\n\nprint(string_formatter('This is a string'))", "output": "def string_formatter(string):\n    new_str = string.split()\n    return ' '.join(new_str)\n\nprint(string_formatter('This is a string'))\n# Output: This is a string"}
{"instruction": "Modify the given code to multiply each element in the list by 5.", "input": "lista = [3, 4, 6, 7]", "output": "lista = [x * 5 for x in [3, 4, 6, 7]]"}
{"instruction": "Modify the following JavaScript code to return the result \"Hello World!\":", "input": "let x = 'Hello';\nlet y = 'World';\n\nconsole.log(x + ' ' + y);", "output": "let x = 'Hello';\nlet y = 'World!';\n\nconsole.log(x + ' ' + y);"}
{"instruction": "Edit the following PHP code to add a custom header to the response.", "input": "<?php\n  header(\"Content-Type: application/json\");\n  echo json_encode($data);\n?>", "output": "<?php\n  header(\"Content-Type: application/json\");\n  header(\"X-Custom-Header: Custom Value\");\n  echo json_encode($data);\n?>"}
{"instruction": "Change the given Python code to an equivalent expression using list comprehension.", "input": "mylist = []\nfor x in range(1, 10):\n    mylist.append(x*x)", "output": "mylist = [x*x for x in range(1, 10)]"}
{"instruction": "Modify the code snippet so that it prints the **largest** element in the given list.", "input": "list = [1, 5, 8, 10]", "output": "list = [1, 5, 8, 10]\n\n# This code will print the largest element in the list\nlargest = list[0]\n\nfor item in list:\n    if item > largest:\n        largest = item\n\nprint(largest)"}
{"instruction": "Change the comparison operator in the given line to its equivalent.", "input": "x != y", "output": "x <> y"}
{"instruction": "Modify the following function to only take numbers greater than 10.", "input": "def filter(numbers):\n    return [n for n in numbers if n % 2 == 0]\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "def filter(numbers):\n    return [n for n in numbers if n > 10 and n % 2 == 0]\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"}
{"instruction": "Change the given code so that the variable is incremented only if the condition returns true.", "input": "", "output": "x = 0\nif (condition):\n    x += 1"}
{"instruction": "Identify a potential bug in the following code.", "input": "def add(a, b):\n    c = a + b\n    return c", "output": "A potential bug in this code is that if the parameters a and b are passed in as strings instead of numbers, then the resulting c will be a concatenation of the two strings rather than a mathematical addition. To avoid this error, the parameters should be converted to the appropriate data type before performing the addition."}
{"instruction": "Edit the code to print out a string in reverse order.", "input": "string = \"Hello World!\"", "output": "for char in reversed(string):\n    print(char, end=\"\")"}
{"instruction": "Edit the following code to check if the resulting output of the division is an integer.", "input": "a = 15\nb = 4\noutput = a/b", "output": "if b != 0:\n    output = a/b\n    assert output.is_integer(), \"Result of division is not an integer\""}
{"instruction": "Describe how to debug a HTML web page.", "input": "", "output": "Debugging a HTML page involves inspecting the page elements to detect any errors and identify the source of any issues. Many web browsers have a Developer Tools feature that can be used to inspect and debug the page. It allows you to view the page HTML and JavaScript, as well as view any errors and warning messages that may appear."}
{"instruction": "Write a code to get the current exchange rate between two currency using the OpenExchangeRates API.", "input": "fromCurrency = \"USD\"\ntoCurrency = \"GBP\"", "output": "\"\"\"\nWrite a code to get the current exchange rate between two currency using the OpenExchangeRates API.\n\nInput: fromCurrency = \"USD\"\n        toCurrency = \"GBP\"\n\"\"\"\n\nimport requests\nimport json\n\ndef get_exchange_rate(fromCurrency, toCurrency):\n    baseUrl = 'https://openexchangerates.org/api/latest.json?app_id=YOUR_APP_ID'\n    response = requests.get(baseUrl)\n    data = json.loads(response.text)\n    rates = data['rates']\n    fromRate = rates[fromCurrency]\n    toRate = rates[toCurrency]\n    return (toRate/fromRate)\n            \nif __name__ == '__main__':\n    print(get_exchange_rate(\"USD\", \"GBP\"))"}
{"instruction": "Edit the following while loop to fix the error.", "input": "i = 0\nwhile i <= 5:\n    print(i)   \n    i =  i + 1", "output": "i = 0\nwhile i < 5:\n    print(i)    \n    i =  i + 1"}
{"instruction": "Modify the following code so that it can accept two parameters.", "input": "def print_message():\n    print(\"Hello there!\")", "output": "def print_message(message, name):\n    print(f\"{message}, {name}!\")"}
{"instruction": "Modify the code below to make it a one-liner", "input": "# Initialize a variable\nsum = 0\n\n# Iterate over numbers from 1 to 10\nfor i in range(1, 11):\n    # Add number to sum\n    sum = sum + i\n\n# Print sum\nprint(sum)", "output": "print(sum([i for i in range(1, 11)]))"}
{"instruction": "Modify the following python program to return the sum of even numbers from the input list.", "input": "def sum_list(input):\n    sum = 0\n    for num in input:\n        sum += num\n    return sum", "output": "def sum_list(input):\n    sum = 0\n    for num in input:\n        if num % 2 == 0:\n            sum += num\n    return sum"}
{"instruction": "Edit the following JavaScript code to add a new object to an array", "input": "let array = [{ id: 1, name: 'Fred'}, {id: 2, name: 'Terry'}]", "output": "let array = [{ id: 1, name: 'Fred'}, {id: 2, name: 'Terry'}, {id: 3, name: 'Marc'}]"}
{"instruction": "Write a CSS rule to change the font-style of all h2 headings to italic.", "input": "", "output": "h2 {\n font-style: italic;\n}"}
{"instruction": "Write an HTML code to create a button that changes the background color of the page when clicked.", "input": "", "output": "<button onclick=\"document.body.style.background='#FFF'\">Change Background</button>"}
{"instruction": "Edit the following JavaScript code to remove any warnings given by the linter.", "input": "let favoriteNumber = [7,9,42];\nconst printNumber = (number) => console.log(number);\n\nfor (let idx = 0; idx < favoriteNumber.length; idx +=1) {\n  printNumber(favoriteNumber[idx])\n}", "output": "let favoriteNumber = [7, 9, 42];\nconst printNumber = (number) => console.log(number);\n\nfor (let idx = 0; idx < favoriteNumber.length; idx += 1) {\n  printNumber(favoriteNumber[idx]);\n}"}
{"instruction": "Edit the following code to ensure that it runs without any error.", "input": "print('Hello world)", "output": "print('Hello world')"}
{"instruction": "Modify the following code to make it work with big integers.", "input": "def multiply(x, y):\n    return x * y", "output": "def multiply(x, y):\n    return int(x) * int(y)"}
{"instruction": "Change the value of the second element of this list to 'cricket'.", "input": "sports_list = ['soccer', 'rugby', 'hockey']", "output": "\"\"\"\nChange the value of the second element of this list to 'cricket'\n\"\"\"\n\nsports_list = ['soccer', 'rugby', 'hockey']\n\n# Change the value of the second element of this list to 'cricket'\nsports_list[1] = 'cricket'\nprint(sports_list)"}
{"instruction": "Edit the following code snippet to add an error handling that allows the function to return an appropriate message when an invalid input is received.", "input": "def factorial(n):\n  \tif n == 0:\n  \t   return 1\n\telse:\n  \t   return n * factorial(n-1)", "output": "def factorial(n):\n  if n < 0:\n    return \"Invalid input!\"\n  elif n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)"}
{"instruction": "Edit the error in this code.", "input": "def my_function(x, y, z):\n    a = x + 5y - z", "output": "def my_function(x, y, z):\n    a = x + 5*y - z"}
{"instruction": "Using CSS, write a class selector to change the color of text to blue.", "input": "", "output": ".blue-text {\n  color: blue;\n}"}
{"instruction": "Using the given input, modify the code to remove all occurences of \"abcd\"", "input": "string s = \"abcd abcd abcd abcd\";", "output": "string s = \" \";\ns = s.replaceAll(\"abcd\", \"\");"}
{"instruction": "Suggest changes to the following Java code so that it sorts an array of strings by length.", "input": "String[] data = {\"Hello\",\"Hi\",\"Bye\"};\n\nArrays.sort(data);", "output": "String[] data = {\"Hello\",\"Hi\",\"Bye\"};\n\nComparator<String> comparator = Comparator.comparingInt(String::length);\nArrays.sort(data, comparator);"}
{"instruction": "Using the following input and code, edit the code so the output returns a list with only the unique elements from the list.", "input": "list1 = [1,2,2,4,4,4,5]", "output": "def unique_list(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n\n# testing\nlist1 = [1,2,2,4,4,4,5]\nprint(unique_list(list1)) # Output: [1, 2, 4, 5]"}
{"instruction": "Change the last line of the code to assign the output of the function call to the variable n.", "input": "def add_two_numbers(x, y):\n    return x + y\n\n# TODO:", "output": "def add_two_numbers(x, y):\n    return x + y\n\nn = add_two_numbers(x, y)"}
{"instruction": "Edit this program to print the output as \"Hello World\"", "input": "print (\"Bye World\"", "output": "print(\"Hello World\")"}
{"instruction": "Edit the following code so it outputs the odd numbers between 1 and 50.", "input": "for i in range(1,51):\n    print(i)", "output": "for i in range(1,51):\n    if i % 2 != 0:\n        print(i)"}
{"instruction": "Change the following code to an ES6 arrow function.", "input": "function addTwo(num) \n{ \n    var result; \n    result = num + 2; \n    return result; \n}", "output": "const addTwo = num => num + 2;"}
{"instruction": "Create classes to represent a credit card and account holder.", "input": "No input.", "output": "class CreditCard:\n    def __init__(self, card_number):\n        self.card_number = card_number\n\nclass AccountHolder:\n    def __init__(self):\n        self.cards = []\n    def add_card(self, card):\n        self.cards.append(card)"}
{"instruction": "Modify the following code so that it prints out the characters from the given string one at a time.", "input": "String str = \"Hello World\";", "output": "String str = \"Hello World\";\nfor (int i = 0; i < str.length(); i++) {\n  System.out.println(str.charAt(i));\n}"}
{"instruction": "Edit a given HTML page and add a new link.", "input": "<html>  \n  <head>  \n    <title>My webpage</title>\n  </head>  \n  <body>  \n    Welcome to my webpage!\n  </body>\n</html>", "output": "<html>  \n  <head>  \n    <title>My webpage</title>\n  </head>  \n  <body>  \n    Welcome to my webpage!\n    <a href=\"https://example.com\">Link</a>\n  </body>\n</html>"}
{"instruction": "Develop an algorithm to modify a given string by changing the case of each character.", "input": "string = \"Hello World\"", "output": "def modify_string(string):\n  new_string = \"\"\n  for i in string:\n    if (i.isupper()) == True:\n      new_string += i.lower()\n    elif (i.islower()) == True:\n      new_string += i.upper()\n  return new_string"}
{"instruction": "Change the output format of the following code to convert it to a dictionary.", "input": "list1 = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]", "output": "dict1 = dict(list1)\nprint(dict1)"}
{"instruction": "Modify the code to convert any temperature from Celsius to Fahrenheit", "input": "def CtoF(x):\n    #TODO", "output": "def CtoF(x):\n    F = (9/5 * x) + 32\n    return F"}
{"instruction": "Edit the following JSON to add a new key.", "input": "{\n \"name\" : \"Bob\", \n \"age\" : 32\n}", "output": "{\n \"name\" : \"Bob\", \n \"age\" : 32,\n \"profession\" : \"dentist\"\n}"}
{"instruction": "You are given two strings, find the minimum number of edits required to make them equal.", "input": "", "output": "def edit_distance(str1, str2):\n    edits = 0\n    m = len(str1)\n    n = len(str2)\n    if m < n:\n        for i in range(m, n):\n            edits += 1\n        for i in range(m):\n            if str1[i] != str2[i]:\n                edits += 1\n    else:\n        for i in range(n, m):\n            edits += 1\n        for i in range(n):\n            if str1[i] != str2[i]:\n                edits += 1\n    return edits"}
{"instruction": "Consider the following code and identify the bug", "input": "array = [1, 2, 3, 4]\n\ni = 0\nwhile i < array.length:\n\tprint(array[i]\n\ti++", "output": "array = [1, 2, 3, 4]\n\ni = 0\nwhile i < array.length:\n\tprint(array[i])\n\ti++\n\n// The bug is that the parenthesis after print(array[i] is missing. It should be print(array[i]) instead."}
{"instruction": "Modify the following python program to include a comment explaining the purpose of the code", "input": "numbers = [1, 2, 3, 4, 5]\nsum = 0\nfor num in numbers:\n    sum += num", "output": "# This program is used to calculate the sum of a given list of numbers\n\nnumbers = [1, 2, 3, 4, 5]\nsum = 0\nfor num in numbers:\n    sum += num"}
{"instruction": "Edit the given code to fix the bug", "input": "def calculate_tax(price):\ntax_rate = 0.20\ntotal = price + (price * tax_rate)\nreturn total", "output": "def calculate_tax(price):\n    tax_rate = 0.20\n    total = price + (price * tax_rate)\n    return round(total, 2)"}
{"instruction": "Debug the following code and explain why it gave an error.", "input": "def sum(a, b):\n    try:\n      return a + b\n    except TypeError: \n        return \"inputs should be numbers\"\n    finally:\n        print(\"This function has successfully executed\")\noutput = sum(1, '2')", "output": "The code gave an error because a TypeError was raised due to trying to add an integer and a string. The error can be resolved by adding type-checking in the code: \n\ndef sum(a, b):\n    try:\n      if type(a) == int and type(b) == int:\n        return a + b\n      else:\n        return \"inputs should be numbers\"\n    except TypeError: \n        return \"inputs should be numbers\"\n    finally:\n        print(\"This function has successfully executed\")\noutput = sum(1, '2')"}
{"instruction": "Compute the number of ways to make a change of N with coins of given denominations.", "input": "N = 4; Coins = {1,2,3}", "output": "def change(n, coins): \n    m = len(coins) \n    table = [[0 for x in range(m)] for x in range(n+1)] \n\n    # Fill the entries for 0 value case (n = 0) \n    for i in range(m): \n        table[0][i] = 1\n\n    # Fill rest of the table entries in bottom-up manner \n    for i in range(1, n+1): \n        for j in range(m): \n            # Count of solutions including coins[j] \n            x = table[i - coins[j]][j] if i-coins[j] >= 0 else 0\n\n            # Count of solutions excluding coins[j] \n            y = table[i][j-1] if j >= 1 else 0 \n\n            # total count \n            table[i][j] = x + y \n    return table[n][m-1]"}
{"instruction": "Change the given Python script to not assign any variables", "input": "x = 10\ny = \"Some Text\"", "output": "# no variables are assigned"}
{"instruction": "Fix the code so that the loop terminates after 10 iterations.", "input": "# Start of code\ni = 1\nwhile i<100:\n    print(i)\n    i += 1\n# End of code", "output": "# Start of code\ni = 1\nwhile i<=10:\n    print(i)\n    i += 1\n# End of code"}
{"instruction": "Validate a credit card number.", "input": "378734493671000", "output": "true"}
{"instruction": "Change the font size of a <div> element using CSS.", "input": "<div>This is a div element</div>", "output": "<div style=\"font-size: 20px;\">This is a div element</div>"}
{"instruction": "Write Python code which changes a string to all lowercase characters.", "input": "String: \"This is a string in Uppercase!!!\"", "output": "text = \"This is a string in Uppercase!!!\"\ntext = text.lower()\nprint(text)"}
{"instruction": "Update the code to ensure that an error is raised if the input is the wrong type.", "input": "def age_calc(age):\n return age + 5", "output": "def age_calc(age):\n if not isinstance(age, int):\n raise TypeError(\"Input for age calculation must be int\")\n return age + 5"}
{"instruction": "Edit the following code so that it prints an appropriate error message.", "input": "def divide(num1, num2):\n result = num1 // num2\n return result", "output": "def divide(num1, num2):\n if num2 == 0:\n print('Error: Invalid operation. num2 cannot be zero.')\n else:\n result = num1 // num2\n return result"}
{"instruction": "Debug the given code and explain your solution.", "input": "words = ['hello', 'world', 'foo', 'bar']\nfor i in words:\n   if i == 'foo':\n      break\nprint('Done')", "output": "The code will not print out \"Done\" as it is inside an infinite loop. To fix this, we can either remove the 'break' statement or add an else statement after the if statement as a way of exiting the loop when the condition is not satisfied. \n\nwords = ['hello', 'world', 'foo', 'bar']\nfor i in words:\n   if i == 'foo':\n      break\nelse:\n    print('Done')"}
{"instruction": "Edit the following CSS code to make the text red.", "input": ".message {\n  font-size: 14px;\n}", "output": ".message {\n  font-size: 14px; \n  color: red;\n}"}
{"instruction": "Fix the following Java code by replacing the letter \"u\" with \"v\".", "input": "String s1 = \"Update\";", "output": "String s1 = \"Update\";\nString s2 = s1.replace('u','v');"}
{"instruction": "Modify the code to make an HTTP request to a given URL.", "input": "request = {\n    type: \"GET\"\n}", "output": "let request = {\n    type: \"GET\",\n    url: \"https://example.com\",\n    success: function(response) {\n      console.log(response);\n    }\n};\n$.ajax(request);"}
{"instruction": "Change the code to make it a valid Python program.", "input": "x = \"hello world", "output": "x = \"hello world\""}
{"instruction": "Debug the following JavaScript code which calculates the average of an array of integers:", "input": "arr = [2, 3, 4, 5]\nsum = 0\nfor (i = 0; i < arr.length; i++) {\nsum += arr[i]}\naverage = sum / arr.length", "output": "arr = [2, 3, 4, 5]\nsum = 0\nfor (i = 0; i < arr.length; i++) {\n  sum += arr[i];\n}\naverage = sum / arr.length;\nconsole.log(average);"}
{"instruction": "Modify the above C program to reverse a sentence.", "input": "", "output": "#include<stdio.h>\n#include<string.h>\n \nvoid reverse(char *str) \n{ \n    int i = strlen(str) - 1, j = 0; \n  \n    while (i > j) { \n        char temp = str[i]; \n        str[i] = str[j]; \n        str[j] = temp; \n        i--; \n        j++; \n    } \n} \n  \nvoid reverseSentence(char *str) \n{ \n    reverse(str); \n  \n    int start = 0, end; \n    while (str[start] != '\\0') { \n        if (str[start] == ' ') { \n            start++; \n            continue;  \n        } \n \n        end = start + 1; \n        while (str[end] != ' ' && str[end] != '\\0') \n            end++; \n \n        reverse(str + start, end - start); \n  \n\t\tstart = end; \n    } \n} \n  \nint main() \n{ \n    char str[100] = \"How are you?\"; \n    reverseSentence(str); \n    printf(\"%s\", str); \n    return 0; \n}"}
{"instruction": "Edit the following HTML page and add a link to an existing page on the internet.", "input": "<html>\n    <header>\n        <title>My Page</title>\n    </header>\n</html>", "output": "<html>\n    <header>\n        <title>My Page</title>\n    </header>\n    <body>\n        <a href=\"https://www.example.com\">Link to Example</a>\n    </body>\n</html>"}
{"instruction": "Change the following code from Python to JavaScript", "input": "def add_numbers(a, b):\n    return a + b", "output": "function addNumbers(a, b) {\n    return a + b; \n}"}
{"instruction": "Suggest a way to change the following code so that it does not use a nested loop.", "input": "for n in range(10):\n    for i in range(n):\n        print('*', end='')\n    print()", "output": "for n in range(10):\n    print('*' * n) // The code can be rewritten to use one single line and one loop only."}
{"instruction": "Modify the following SQL query to also return the age of the people.", "input": "SELECT name FROM people;", "output": "SELECT name, age FROM people;"}
{"instruction": "Modify the following code snippet to print the total number of characters in the string.", "input": "string = 'Hello World!'", "output": "string = 'Hello World!'\n\nnum_chars = len(string)\nprint(\"The total number of characters in the string is {}.\".format(num_chars))"}
{"instruction": "Debug this code to remove the syntax error.", "input": "def print_msg()\n print(\"Hello World\")", "output": "def print_msg():\n     print(\"Hello World\")"}
{"instruction": "Given a string, edit it so that every first letter of each word is capitalized.", "input": "string = \"this is a test string\"", "output": "def capitalize_string(string):\n    words = string.split(' ')\n    capitalized_words = [word.capitalize() for word in words]\n    return ' '.join(capitalized_words)\n\nstring = \"this is a test string\" \ncapitalize_string(string)"}
{"instruction": "Edit this code so it prints the sum of the increasing odd numbers from 10 to 50", "input": "total = 0\nfor num in range(10, 50):\n    if num % 2 == 0:\n        total += num", "output": "total = 0\nfor num in range(10, 50, 2):\n    total += num"}
{"instruction": "Edit the following CSS code to add a color of your choice to the <h1> element.", "input": "", "output": "h1 {\n  color: #FF0000;\n}"}
{"instruction": "Create a `CSS` rule to change the background color of a div element with the class name `main-div` to blue.", "input": "", "output": ".main-div {\n    background-color: blue;\n}"}
{"instruction": "Edit the given code to validate an IP address.", "input": "# Function to validate an IPv4 address\ndef validate_IPv4(IP):", "output": "# Function to validate an IPv4 address\ndef validate_IPv4(IP):\n    # Split the IP string by '.' \n    ip_split = IP.split('.')\n    \n    #Checking for the corner cases \n    if (len(ip_split) == 4) and (1 <= int(ip_split[0]) <= 223) and (int(ip_split[0]) != 127) and (int(ip_split[0]) != 169 or int(ip_split[1]) != 254) and (0 <= int(ip_split[1]) <= 255 and 0 <= int(ip_split[2]) <= 255 and 0 <= int(ip_split[3]) <= 255): \n        return \"Valid IP!\"\n    else: \n        return \"Invalid IP!\""}
{"instruction": "Identify the type of error in the below given syntax", "input": "a < 45", "output": "Syntax Error. The correct syntax should be \"a < 45\"."}
{"instruction": "Change all the element in the array to negative using JavaScript.", "input": "var arr = [1, 2, 3, 4, 5];", "output": "// Change all the element in the array to negative \nfor (var i = 0; i < arr.length; i++) {\n    arr[i] = -arr[i];\n}"}
{"instruction": "Given two strings, develop a function to calculate edit distance between them.", "input": "Strings: \"kitten\" and \"sitting\"", "output": "def edit_distance(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n\n    dp = [[0 for x in range(n2 + 1)] for x in range(n1 + 1)] \n\n    for i in range(n1 + 1): \n        for j in range(n2 + 1): \n            if i == 0: \n                dp[i][j] = j\n            elif j == 0: \n                dp[i][j] = i\n            elif str1[i - 1] == str2[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j - 1],\n                                   dp[i - 1][j],\n                                   dp[i - 1][j - 1]) \n  \n    return dp[n1][n2] \n\nedit_distance(\"kitten\", \"sitting\")"}
{"instruction": "Edit the following HTML code to add a link to an external website.", "input": "<div>\n  <p>Hello!</p>\n</div>", "output": "<div>\n  <p>Hello! <a href=\"https://www.example.com\" target=\"_blank\">Visit my website</a></p>\n</div>"}
{"instruction": "Edit the provided JavaScript code such that it outputs the first and last element in an array.", "input": "array = ['a', 'b', 'c', 'd', 'e']", "output": "\"\"\"\nEdit the provided JavaScript code such that it outputs the first and last element in an array.\n\"\"\"\n\nlet array = [\"a\", \"b\", \"c\", \"d\", \"e\"];\nconsole.log(`First element: ${array[0]}, Last element: ${array[array.length - 1]}`);"}
{"instruction": "What is the difference between compile-time and run-time errors?", "input": "", "output": "Compile-time errors occur when code does not conform to the syntax specified by the programming language, and usually prevent the code from being executed. Run-time errors occur when code is syntactically correct, but there are still problems executing the code. Run-time errors typically occur at the point where code is executed, as opposed to compile-time errors which occur at the point of compilation. The types of errors usually depend on the type of language used for programming. For example, compiling Java code with a C++ compiler would cause a compile-time error since the two languages have different syntaxes."}
{"instruction": "Modify the given HTML code to make the text bold.", "input": "<p>This is some sample text.</p>", "output": "<p><strong>This is some sample text.</strong></p>"}
{"instruction": "Edit the following Java program to add a method printMyName. The method should print your name.", "input": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n }", "output": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n        printMyName();\n    }\n    public static void printMyName(){\n        System.out.println(\"John Doe\");\n    }\n }"}
{"instruction": "Edit the following HTML code to include a JavaScript alert that appears when a user clicks the button.", "input": "<button>Click Me!</button>", "output": "<button onclick=\"alert('You have clicked the button!')\">Click Me!</button>"}
{"instruction": "Edit the code to make sure the program prints the correct output.", "input": "def my_function(x):\n\u00a0\u00a0\u00a0\u00a0y = x * 2\n\u00a0\u00a0\u00a0\u00a0return x + y\n\nresult = my_function(2)\nprint(result)", "output": "def my_function(x):\n\u00a0\u00a0\u00a0\u00a0y = x * 2\n\u00a0\u00a0\u00a0\u00a0return x + y\n\nresult = my_function(2)\nprint(\"The result is:\", result)"}
{"instruction": "Edit the code below to add an exception handling mechanism in it.", "input": "def divide(a, b):\n    return a/b", "output": "def divide(a, b):\n    try: \n        return a/b\n    except ZeroDivisionError:\n        print(\"Division by zero is undefined\")"}
{"instruction": "Modify the following code to turn all the words in a sentence to upper case", "input": "string = \"Hello World\"", "output": "string = \"Hello World\"\nstring = string.upper()\nprint(string)"}
{"instruction": "Identify all the statements that are erroneous or have logical errors.", "input": "a = 2\nb = 1\nif a > b\n    print(\"a is greater than b\")\nelif a == b\n    print(\"a is equal to b\")\nelse\n    print(\"b is greater than a\")", "output": "The statements that are erroneous or have logical errors are:\n1) There is no colon (:) after the 'if' and 'elif' statements\n2) There is no colon (:) after the 'else' statement.\n3) The parentheses after 'print' are unnecessary."}
{"instruction": "Edit this HTML code to highlight odd rows of this table.", "input": "<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>John</td>\n    <td>30</td>\n  </tr>\n  <tr>\n    <td>Anna</td>\n    <td>20</td>\n  </tr>\n  <tr>\n    <td>Mark</td>\n    <td>25</td>\n  </tr>\n  <tr>\n    <td>Amy</td>\n    <td>28</td>\n  </tr>\n</table>", "output": "<table>\n  <tr>\n    <th>Name</th>\n    <th>Age</th>\n  </tr>\n  <tr style=\"background-color: lightgrey;\">\n    <td>John</td>\n    <td>30</td>\n  </tr>\n  <tr>\n    <td>Anna</td>\n    <td>20</td>\n  </tr>\n  <tr style=\"background-color: lightgrey;\">\n    <td>Mark</td>\n    <td>25</td>\n  </tr>\n  <tr>\n    <td>Amy</td>\n    <td>28</td>\n  </tr>\n</table>"}
{"instruction": "Create a program to evaluate a postfix expression.", "input": "", "output": "# Python program to evaluate value of a postfix expression \n  \n# Class to convert the expression \nclass Conversion: \n       \n    # Constructor to initialize the class variables \n    def __init__(self, capacity): \n        self.top = -1\n        self.capacity = capacity \n        # This array is used a stack \n        self.array = [] \n        # Precedence setting \n        self.output = [] \n        self.precedence = {'+':1, '-':1, '*':2, '/':2, '^':3}\n       \n    # check if the stack is empty \n    def isEmpty(self): \n        return True if self.top == -1 else False\n       \n    # Return the value of the top of the stack \n    def peek(self): \n        return self.array[-1] \n       \n    # Pop the element from the stack \n    def pop(self): \n        if not self.isEmpty(): \n            self.top -= 1\n            return self.array.pop() \n        else: \n            return \"$\"\n       \n    # Push the element to the stack \n    def push(self, op): \n        self.top += 1\n        self.array.append(op)  \n   \n    # A utility function to check is the given character \n    # is operand  \n    def isOperand(self, ch): \n        return ch.isalpha() \n   \n    # Check if the precedence of operator is strictly \n    # less than top of stack or not \n    def notGreater(self, i): \n        try: \n            a = self.precedence[i] \n            b = self.precedence[self.peek()] \n            return True if a  <= b else False\n        except KeyError:  \n            return False\n              \n    # The main function that converts given infix expression \n    # to postfix expression  \n    def infixToPostfix(self, exp): \n           \n        # Iterate over the expression for conversion \n        for i in exp: \n            # If the character is an operand,  \n            # add it to output \n            if self.isOperand(i): \n                self.output.append(i) \n              \n            # If the character is an '(', push it to stack \n            elif i  == '(': \n                self.push(i) \n   \n            # If the scanned character is an ')', pop and  \n            # output from the stack until and '(' is found \n            elif i == ')': \n                while( (not self.isEmpty()) and self.peek() != '('): \n                    a = self.pop() \n                    self.output.append(a) \n                if (not self.isEmpty() and self.peek() != '('): \n                    return -1\n                else: \n                    self.pop() \n   \n            # An operator is encountered \n            else: \n                while(not self.isEmpty() and self.notGreater(i)): \n                    self.output.append(self.pop()) \n                self.push(i) \n   \n        # pop all the operator from the stack \n        while not self.isEmpty(): \n            self.output.append(self.pop()) \n   \n        return \"\".join(self.output) \n   \ncount = 0\n\n# Driver program to test above function \nexp = \"a+b*(c^d-e)^(f+g*h)-i\"\nobj = Conversion(len(exp)) \nans = obj.infixToPostfix(exp) \nprint(ans)\n\n# This function evaluates value of a postfix expression \ndef evaluatePostfix(exp): \n\t\n\t# Create a stack \n\tstack = [] \n\t\n\t# Scan all characters one by one \n\tfor i in exp: \n\t\t\n\t\t# If the character is a number, push it to the stack \n\t\tif i.isdigit(): \n\t\t\tstack.append(int(i)) \n\n\t\t# If the character is an operator, pop two \n\t\t# elements from stack apply the operator \n\t\telse: \n\t\t\tval1 = stack.pop() \n\t\t\tval2 = stack.pop() \n\t\t\tif i == '+': \n\t\t\t\tstack.append(val2 + val1) \n\t\t\telif i == '-': \n\t\t\t\tstack.append(val2 - val1) \n\t\t\telif i == '*': \n\t\t\t\tstack.append(val2 * val1) \n\t\t\telse: \n\t\t\t\tstack.append(val2 / val1) \n\n\treturn stack.pop() \n\n# Driver Program to test above function \n#exp = \"231*+9-\"\n#exp = ans\n#print(exp)\n\n#print('postfix evaluation: %d' %(evaluatePostfix(exp) ))"}
{"instruction": "Edit the given code to remove compile time error.", "input": "def add_two_numbers(a, b):\n    return a b", "output": "def add_two_numbers(a, b):\n    return a + b"}
{"instruction": "How would you display the following message as an error in JavaScript?\n\n\"Username and password do not match.\"", "input": "", "output": "console.error(\"Username and password do not match.\")"}
{"instruction": "Modify the HTML code with the following: Make all the text bold without changing the fontsize.", "input": "<div>\n    <h1>Welcome</h1>\n    <p>This is an example text</p>\n</div>", "output": "<div>\n    <h1><strong>Welcome</strong></h1>\n    <p><strong>This is an example text</strong></p>\n</div>"}
{"instruction": "Add an 'except' statement to the following python code to prevent a ValueError.", "input": "a = 5\nb = 0\n\ntry:\n    c = a / b", "output": "a = 5\nb = 0\n\ntry:\n    c = a / b\nexcept ZeroDivisionError:\n    print(\"b cannot be zero\")"}
{"instruction": "Modify the program to make sure that only integers are accepted as input.", "input": "name = input(\"Enter your name: \")\nprint(\"Hello, \" + name)", "output": "name = input(\"Enter your name: \")\ntry:\n    name = int(name)\n    print(\"Hello, \" + str(name))\nexcept ValueError:\n    print(\"Error: That was not an integer.\")"}
{"instruction": "Edit the following line of code from C++ to include the use of the precedence operator", "input": "a + b * c;", "output": "a + (b * c);"}
{"instruction": "Edit the code so it can detect if an array is already sorted", "input": "arr = [1, 2, 4, 5, 6, 7]", "output": "def is_sorted(arr): \n    n = len(arr) \n    for i in range (0, n-1): \n        if (arr[i] > arr[i+1] ): \n            return False\n    return True"}
{"instruction": "Edit the following code to add an item to the 'fruits' list.", "input": "fruits = [\"apple\", \"banana\", \"orange\"]", "output": "fruits = [\"apple\", \"banana\", \"orange\"]\nfruits.push(\"mango\");"}
{"instruction": "Edit the given code to limit the output to only the 30 most recent entries in the database.", "input": "entries = db.execute_query(\"SELECT * FROM users\")", "output": "entries = db.execute_query(\"SELECT * FROM users ORDER BY id DESC LIMIT 30\")"}
{"instruction": "Edit this code to make the function take an integer n as an argument and print the fibonacci series till nth term.", "input": "n = 10", "output": "def fibonacci(n):\n    \"\"\"Prints the fibonacci series till the nth term\"\"\"\n    # set initial values\n    a = 0\n    b = 1\n    # check for valid input\n    if n < 0:\n        print('Please enter a positive number')\n    elif n == 0:\n        print('0')\n    elif n == 1:\n        print('0, 1')\n    else:\n        # print first two terms\n        print('0, 1', end=', ')\n        for i in range(2,n):\n            c = a + b\n            print(c, end=', ')\n            # update values\n            a = b\n            b = c\n\nn = 10\nfibonacci(n) # 0, 1, 1, 2, 3, 5, 8, 13, 21, 34"}
{"instruction": "Change the following code to create a ``Product`` class with a ``price`` attribute.", "input": "", "output": "class Product:\n    def __init__(self, price):\n        self.price = price"}
{"instruction": "How would you edit the following HTML code so that it displays content in two columns?", "input": "<div>\n  <p>This is the content</p>\n</div>", "output": "<div>\n  <div style=\"float: left; width: 50%;\">\n    <p>This is the content 1</p>\n  </div>\n  <div style=\"float: right; width: 50%;\">\n    <p>This is the content 2</p>\n  </div>\n</div>"}
{"instruction": "Debug and resolve the error in the following code:", "input": "message = \"Welcome!\"\nprint(message)\nprintf(message)", "output": "The error is \"NameError: name 'printf' is not defined\". To solve the error, remove the second line \"printf(message)\" as \"printf()\" is not a valid function."}
{"instruction": "Edit the following function to allow it to accept negative numbers.", "input": "function isPositive(num) {\n  return num >= 0;\n}", "output": "function isPositive(num) {\n  return num > 0;\n}"}
{"instruction": "Modify the following code to handle large numbers correctly.", "input": "def factorial(n):  \n   fact = 1\n   for i in range(1, n+1): \n       fact *= i \n   return fact", "output": "def factorial(n):\n    fact = 1\n    for i in range(1, n+1): \n        fact = fact*i % 10**10\n    return fact % 10**10"}
{"instruction": "Modify the following HTML code to add a new div element inside the existing div.", "input": "<div>\n   Hello, world!\n</div>", "output": "<div>\n   <div>New div element</div>\n   Hello, world!\n</div>"}
{"instruction": "Given the following array of dictionaries, write a function in Python to find and return the longest common prefix in the keys of dictionaries.", "input": "arr_of_dictionaries = [\n    {\n        \"name\": \"John Doe\",\n        \"country\": \"United States\"\n    },\n    {\n        \"name\": \"Jane Doe\",\n        \"state\": \"New York\"\n    }\n]", "output": "def longest_common_prefix(arr_of_dictionaries):\n    prefix = ''\n    if len(arr_of_dictionaries) == 0:\n        return prefix\n    first_dict_keys = arr_of_dictionaries[0].keys()\n    for i in range(len(list(first_dict_keys)[0])):\n        char = list(first_dict_keys)[0][i]\n        for dict in arr_of_dictionaries:\n            if list(dict.keys())[0][i] != char:\n                return prefix\n        prefix += char\n    return prefix"}
{"instruction": "Describe the necessary steps to debug a python program.", "input": "", "output": "Steps to debug a python program:\n\n1. Check the syntax of your code to look for any obvious mistakes\n2. Use print statement to understand the the variables in your program and the flow of execution.\n3. Working your way through the program line by line to identify the source of the bug.\n4. Use debugging tools such as pdb to step through the code and look for any unexpected values or flow. \n5. If the bug is in a library that you're using, try to look into its source code to look for the bug.\n6. Test small pieces of your code in isolation.\n7. Take a break and come back to it with a fresh mind.\n8. Ask for help from other programmers."}
{"instruction": "Change the response to now fulfill the following purpose", "input": "Find the number of ones in a binary number 101011", "output": "def find_ones(n):\n    count = 0\n    while n > 0:\n        if n % 10 == 1:\n            count += 1\n        n //= 10        \n    return count"}
{"instruction": "How can you change the given string 'Hello World' to 'World Hello'?", "input": "", "output": "string = \"Hello World\"\nstring = string.split()\nstring = string[1] + ' ' + string[0]\nprint(string) # World Hello"}
{"instruction": "Incorporate the following change in the given code.", "input": "def calculate_area(base, height):\n    area = base*height\n    area = float(area)\nChange: Calculate area of the triangle in square meters.", "output": "def calculate_area(base, height):\n    area = 0.5*base*height\n    area = float(area)*(10**-6)\n    return area"}
{"instruction": "Edit the following HTML list by adding another item, number 4.", "input": "<ul>\n  <li>item 1</li>\n  <li>item 2</li>\n  <li>item 3</li>\n</ul>", "output": "<ul>\n  <li>item 1</li>\n  <li>item 2</li>\n  <li>item 3</li>\n  <li>item 4</li>\n</ul>"}
{"instruction": "Modify the following function to return the number of unique elements in a given array.", "input": "int count_unique(int array[], int n) \n{ \n    int count = 0; \n    int i; \n    for (i = 0; i < n; i++) { \n        int j; \n        for (j = 0; j < i; j++) { \n            if (array[i] == array[j]) \n                break; \n        } \n        if (i == j) \n            count++; \n    } \n    return count; \n}", "output": "int count_unique(int array[], int n) \n{ \n    int count = 0; \n    int visited[n]; \n    for (int i = 0; i < n; i++) \n        visited[i] = 0; \n\n    for (int i = 0; i < n; i++) { \n        if (!visited[i]) { \n            visited[i] = 1; \n            count++; \n            for (int j = i + 1; j < n; j++) \n                if (array[i] == array[j]) \n                    visited[j] = 1; \n        } \n    } \n    return count; \n}"}
{"instruction": "Edit a given JSON string to set a specific value in it.", "input": "JSON String:  {\n \"name\": \"John Doe\",\n \"age\": 20,\n \"address\": {\n  \"street\": \"1 Main Street\", \n  \"city\": \"New York\"\n  }\n }\nSet the age to 25.", "output": "{\n \"name\": \"John Doe\",\n \"age\": 25,\n \"address\": {\n  \"street\": \"1 Main Street\", \n  \"city\": \"New York\"\n  }\n }"}
{"instruction": "Using the code provided, modify the program to output \"I like cats\" instead of \"I love cats\".", "input": "print(\"I love cats\")", "output": "print(\"I like cats\")"}
{"instruction": "Edit the code such that it prints the same output.", "input": "str1 = \"python \"\nstr2 = \"programming\"\nprint(str1 + str2)", "output": "str1 = \"python\"\nstr2 = \" programming\"\nprint(str1 + str2)"}
{"instruction": "Modify the function to include a message about the length of the string.", "input": "message = \"The length of the string is:\"", "output": "def find_length(string):\n\tcount = 0\n\tfor char in string:\n\t\tcount += 1\n\tprint(message, count)\n\treturn count"}
{"instruction": "Modify the given code snippet to add a new entry in the users table of a MySQL database.", "input": "conn = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"root\",\n    passwd=\"12345\"\n    database=\"test\"\n    )", "output": "conn = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"root\",\n    passwd=\"12345\"\n    database=\"test\"\n    )\ncursor = conn.cursor()\ncursor.execute(\"INSERT INTO users(name, email, age) VALUES('John Doe', 'johndoe@example.com', 28)\")\nconn.commit()"}
{"instruction": "Read a given code and determine if it contains any errors or not.", "input": "def factorial(n):\n    product = 1\n    for i in range(2, 3):\n        product *= i\n    return product", "output": "true"}
{"instruction": "Compile a given c code and debug the program to find the exact output.", "input": "#include<stdio.h>\n\nint main() \n{ \n    char str[] = \"Hello\"; \n    char *p; \n    p = &str[2]; \n    printf(\"%c\\n\", *(p++)); \n    printf(\"%c\", *p); \n    return 0; \n}", "output": "ll\no"}
{"instruction": "Compile this Java program to determine any compile-time errors.", "input": "public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println(\"Hello , World\");\n  }\n}", "output": "No compile-time error."}
{"instruction": "Edit the given HTML code to create a paragraph element.", "input": "<div>Hello World!</div>", "output": "<div><p>Hello World!</p></div>"}
{"instruction": "Edit this code to sort a list of strings alphabetically", "input": "mylist = [\"Eggs\", \"Cheese\", \"Milk\"]", "output": "mylist.sort()"}
{"instruction": "Edit the given function in Python to convert the given list of integers a into a multidimensional list of size len(a) X len(a).", "input": "def convert_to_multi(a):\n    return [a]", "output": "def convert_to_multi(a):\n    result = []\n    for i in range(len(a)):\n        row = []\n        for j in range(len(a)):\n            row.append(a[j])\n        result.append(row)\n    return result"}
{"instruction": "Create a C# function to edit the contents of a list.", "input": "", "output": "public void EditList(List<string> list, string oldVal, string newVal) \n{\n    for(int i = 0; i < list.Count; i++ )\n    {\n        if (list[i] == oldVal){\n            list[i] = newVal;\n        }\n    }\n}"}
{"instruction": "Construct a code that takes a list of words as input and changes the case of each item in the list.", "input": "[cat, dog, apple]", "output": "def toUpperCase(words):\n    upper_words=[]\n    for word in words:\n      upper_words.append(word.upper())\n    return upper_words\n\nif __name__ == \"__main__\":\n    print(toUpperCase(['cat','dog','apple']))"}
{"instruction": "Edit the following HTML code to add an attribute and its value", "input": "<div class=\"container\">\n    <h1>Welcome!</h1>\n</div>", "output": "<div class=\"container\" id=\"welcome\">\n    <h1>Welcome!</h1>\n</div>"}
{"instruction": "Edit the following code so that it prints out a right triangle of size n", "input": "int n = 5;\nfor (int i = 0; i < n; i++) {\n  for (int j = 0; j <= i; j++) {\n    System.out.print(\"*\");\n  }\n  System.out.println();\n}", "output": "int n = 5;\nfor (int i = n; i > 0; i--) {\n  for(int j = 0; j < i; j++) {\n    System.out.print(\"*\");\n  }\n  System.out.println();\n}"}
{"instruction": "Given a text string modify it by capitalizing the letters after a period.", "input": "hello world. this is from gpt", "output": "hello world. This is from GPT"}
{"instruction": "Modify the following C++ code to add an else statement to handle incorrect inputs.", "input": "int main() {\n  int x;\n  cin >> x;\n  if (x == 0)\n    cout << \"x is zero\" << endl;", "output": "int main() {\n  int x;\n  cin >> x;\n  if (x == 0)\n    cout << \"x is zero\" << endl;\n  else\n    cout << \"x is not zero\" << endl;\n}"}
{"instruction": "Change the following directory path to absolute path.", "input": "path = \"../images/example.png\"", "output": "import os\n\npath = os.path.abspath(\"../images/example.png\")\nprint(path) # \\user\\path\\to\\images\\example.png"}
{"instruction": "Edit the following HTML to create a 2-column form layout with labels.", "input": "<form>\n  <input type=\"text\" name=\"name\" placeholder=\"Name...\" />\n  <input type=\"email\" name=\"email\" placeholder=\"Email...\" />\n  <textarea name=\"message\" placeholder=\"Message...\" rows=\"4\" cols=\"50\"></textarea>\n  <input type=\"submit\" value=\"Submit\" />\n</form>", "output": "<form>\n  <div style=\"display: flex;\">\n      <div style=\"flex: 1;\">\n        <label>Name:</label>\n        <input type=\"text\" name=\"name\" placeholder=\"Name...\" />\n      </div>\n\n      <div style=\"flex: 1;\">\n        <label>Email:</label>\n        <input type=\"email\" name=\"email\" placeholder=\"Email...\" /> \n      </div>\n  </div>\n\n  <div style=\"display: flex;\">\n      <div style=\"flex: 1;\">\n        <label>Message:</label>\n        <textarea name=\"message\" placeholder=\"Message...\" rows=\"4\" cols=\"50\"></textarea>\n      </div>\n  </div>\n\n  <input type=\"submit\" value=\"Submit\" />\n</form>"}
{"instruction": "Change the line in the following code that contains a syntax error.", "input": "x = 10\nif x == 10\nprint('x is 10')", "output": "x = 10\nif x == 10:\nprint('x is 10')"}
{"instruction": "Develop a program to convert an infix expression to prefix notation.", "input": "A*(B+C)-D/(E+F)", "output": "def infix_to_prefix(exp): \n\t# stack to store operators\n\tstack = [] \n\n\t# prefix expression\n\tpref_exp = \"\" \n\t\n\t# traverse through the expression\n\tfor char in exp: \n\t\t\n\t\t# if the character is an operand \n\t\t# add it to prefix expression\n\t\tif char.isalpha(): \n\t\t\tpref_exp += char \n\t\t\n\t\t# if the character is an operator\n\t\telif char in \"*/+-^\": \n\t\t\t\n\t\t\t# push the operator to the stack \n\t\t\tstack.append(char) \n\n\t\t# if the character is ')' \n\t\telif char == ')': \n\t\t\t\n\t\t\t# pop all the operators from \n\t\t\t# the stack until '(' is found \n\t\t\twhile(stack[-1] != '('): \n\t\t\t\tpref_exp += stack.pop() \n\t\t\t\n\t\t\t# remove '(' from the stack \n\t\t\tstack.pop() \n\t\t\t\n\t# add all the operators to the prefix expression \n\twhile len(stack) != 0: \n\t\tpref_exp += stack.pop() \n        \n\treturn pref_exp"}
{"instruction": "Debug the following C++ program.", "input": "#include<iostream> \nusing namespace std;\n  \nint main() \n{ \n    int a, b \n    cin>>a,b;\n  \n    cout<<\"The product is \"<<a*b;\n    return 0;\n}", "output": "#include<iostream> \nusing namespace std;\n  \nint main() \n{ \n    int a, b;\n    cin>>a>>b; // change \",\" to \">>\"\n  \n    cout<<\"The product is \"<<a*b;\n    return 0;\n}"}
{"instruction": "Edit the code to print out that \"Index not found\".", "input": "nums = [1, 2, 3, 4, 5]\ntarget = 6", "output": "def Contains(nums, target):\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return True\n    print(\"Index not found\")\n    return False"}
{"instruction": "Edit the sentence to make it grammatically correct.", "input": "Sentence: \"I work at the library did.\"", "output": "I worked at the library."}
{"instruction": "Write a jQuery code snippet to change the text color of all p tags to red.", "input": "", "output": "$('p').css('color', 'red');"}
{"instruction": "Interchange the values of two given variables.", "input": "x = 10 \ny = 5", "output": "# Swap x and y\ndef swap_values(x, y):\n    x, y = y, x \n    return x, y"}
{"instruction": "Fix the logic of the function to print out the element in the array.", "input": "let nums = [1, 2, 3, 4];", "output": "let nums = [1, 2, 3, 4];\n\nfunction printArrElement(arr){\n    for(let i = 0; i < arr.length; i++){\n        console.log(arr[i]);\n    } \n}\n\nprintArrElement(nums);"}
{"instruction": "Suppose you are designing a simple text editor. Write a C++ code to automatically detect and remove comments from a given input string.", "input": "", "output": "// Function to remove comments from a given input string\nstring removeComments(string input_string)\n{\n    string output_string = \"\";\n    int flag = 0;\n\n    for (int i = 0; i<input_string.length(); i++)\n    {\n        // Check for single line comments\n        if (input_string[i] == '/' && input_string[i+1] == '/')\n            flag = 1;\n\n        // Check for multi-line comments\n        if (input_string[i] == '/' && input_string[i+1] == '*')\n            flag = 2;\n\n        // If single line or multi-line comment section,\n        // ignore the part of the string\n        if (flag == 1 || flag == 2)\n        {\n            if (input_string[i] == '\\n')\n                flag = 0;\n            continue;\n        }\n\n        output_string += input_string[i];\n    }\n\n    return output_string;\n}"}
{"instruction": "Change the following line of HTML code to add a class named \"highlight\" to the list item.", "input": "<li>Hello</li>", "output": "<li class=\"highlight\">Hello</li>"}
{"instruction": "Modify the code so that it will print out \"Hello World!\"", "input": "print(\"Hello\")", "output": "print(\"Hello World!\")"}
{"instruction": "Edit the following code to make it terminate in a finite number of steps", "input": "def foo():\n    while True:\n        print(\"Hello\")", "output": "\"\"\"\nEdit the following code to make it terminate in a finite number of steps.\n\"\"\"\n\ndef foo():\n    for _ in range(10):\n        print(\"Hello\")"}
{"instruction": "Edit the givenjava program to print the count of a specified character.", "input": "public class Main\n{\npublic static void main(String[] args)\n{\n    String str = \"codersarts\";\n    System.out.println(\"Number of s in the given string: \" + str);\n}\n}", "output": "public class Main\n{\npublic static void main(String[] args)\n{\n    String str = \"codersarts\";\n    int count = 0;\n    for (int i=0; i<str.length(); i++) \n    {\n        if (str.charAt(i) == 's') \n        {\n            count++;\n        }\n    }\n    System.out.println(\"Number of s in the given string: \" + count);\n}\n}"}
{"instruction": "Edit the following HTML code to add an additional radio button with the label \"orange\".", "input": "<input type=\"radio\" name=\"fruit\" value=\"apple\"> Apple<br>\n<input type=\"radio\" name=\"fruit\" value=\"banana\"> Banana", "output": "<input type=\"radio\" name=\"fruit\" value=\"apple\"> Apple<br>\n<input type=\"radio\" name=\"fruit\" value=\"banana\"> Banana<br>\n<input type=\"radio\" name=\"fruit\" value=\"orange\"> Orange"}
{"instruction": "Edit the following HTML document and change the font color of the level 2 heading tag to red", "input": "<html><head><title>My Title</title></head><body><h1>Heading 1</h1><h2>Heading 2</h2></body></html>", "output": "<html><head><title>My Title</title></head><body><h1>Heading 1</h1><h2 style=\"color:red;\">Heading 2</h2></body></html>"}
{"instruction": "Suggest a change to render the following CSS code more efficient.", "input": ".image-box {\n    display: block;\n    width: 100px;\n    height: 100px;\n    background-image: url(\"logo.png\");\n}", "output": ".image-box {\n    display: inline-block;\n    width: 100px;\n    height: 100px;\n    background-image: url(\"logo.png\");\n    background-size: contain;\n}"}
{"instruction": "Edit a given sentence to make its sentence structure correct.", "input": "sentence = \"This is wrong sentence structure\"", "output": "sentence = \"This sentence has an incorrect structure.\""}
{"instruction": "Edit the following code to return the elements in the reversed order.", "input": "def reverse_list(lst):\n    for i in range(0, len(lst)):\n        temp = lst[i]\n        lst[i] = lst[len(lst)-1-i]\n        lst[len(lst)-1-i] = temp\n    return lst", "output": "def reverse_list(lst):\n    for i in range(0, len(lst)//2):\n        temp = lst[i]\n        lst[i] = lst[len(lst)-1-i]\n        lst[len(lst)-1-i] = temp\n    return lst"}
{"instruction": "Edit the following code to make it work in Python 3.", "input": "# Python 2\ndef greet(name):\n    print \"Hello,\", name\n\ngreet(\"John\")", "output": "# Python 3\ndef greet(name):\n    print(\"Hello,\", name)\n    \ngreet(\"John\")"}
{"instruction": "Identify the type of bug for the following code snippet.", "input": "def print_message(messsage):\n    print(\"My message is: \" + message)", "output": "Syntax error. The function name is missing a single letter \"s\", it should be \"print_message\"."}
{"instruction": "Edit the following JavaScript code to make an AJAX call to a specific URL.", "input": "", "output": "var xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://example.com/ajax_call', true);\nxhr.send();"}
{"instruction": "Create a style sheet in CSS to change the font size and font family of a text element with an id of \"example_text\".", "input": "", "output": "#example_text {\n  font-size: 20px;\n  font-family: Arial, sans-serif;\n}"}
{"instruction": "Write a code to find the longest common prefix among a given set of strings.", "input": "", "output": "\"\"\"\nA code to find the longest common prefix among a given set of strings\n\"\"\"\n\ndef longest_common_prefix(strs): \n  \n    if not strs: \n        return \"\" \n  \n    shortest_str = min(strs,key=len) \n   \n    for i, ch in enumerate(shortest_str): \n        for other in strs: \n            if other[i] != ch: \n                return shortest_str[:i]  \n    return shortest_str \n  \nif __name__ == '__main__': \n    strs = [\"flower\",\"flow\",\"flight\"] \n    print(\"The longest common prefix is: %s\" % longest_common_prefix(strs))"}
{"instruction": "Create a SQL statement that changes the value of a column in the \"students\" table.", "input": "student_id = 123\nnew_score = 90", "output": "UPDATE students\nSET score = 90\nWHERE student_id = 123;"}
{"instruction": "Edit the following code to convert it into a generic function", "input": "def add_two_numbers(a, b):\n    return a + b", "output": "def add_numbers(a, b):\n    return a + b"}
{"instruction": "Edit the following code to print the position of an element x in a list y.", "input": "list y = [2, 3, 4, 1, 5]\nx = 1", "output": "list y = [2, 3, 4, 1, 5]\nx = 1\n\ndef find_position(y, x):\n    for index, value in enumerate(y):\n        if value == x:\n            return index\n    return f\"{x} is not in the list\"\n\nif __name__ == '__main__':\n    print(find_position(y, x))"}
{"instruction": "Modify the following code to display alter the existing function to accept an additional parameter.", "input": "def foo(a, b):\n    return a + b", "output": "def foo(a, b, c):\n    return a + b + c"}
{"instruction": "Convert the given expression from infix notation to postfix notation.", "input": "A + B * (C - D)", "output": "ABCD-*+"}
{"instruction": "Fix the syntax error in the following Java code.", "input": "String[] x = {\"a\", \"b\", \"c\"}\n\nfor (int i=0; i<x.lenght; i++) {\nSystem.out.println(x[i]);\n}", "output": "String[] x = {\"a\", \"b\", \"c\"};\n\nfor (int i=0; i<x.length; i++) {\nSystem.out.println(x[i]);\n}"}
{"instruction": "Debug the following code and make sure the program runs as expected.", "input": "def number_divisible(x, y):\n      for i in range(x):\n            if i % y = 0 :\n                  print(i)", "output": "def number_divisible(x, y):\n      for i in range(x):\n            if i % y == 0 :\n                  print(i)"}
{"instruction": "Modify the given CSS code to display the given HTML element in blue.", "input": "CSS code:\n\np {\n  color: red;\n}\nHTML element:\n\n<p> My website </p>", "output": "p {\n  color: blue;\n}"}
{"instruction": "Using the following code, clean up the bugs and make sure the output functions correctly.", "input": "def example_func(lst):\n   for element in lst:\n      if (type(element) == int):\n         lst.append(element + 5)\n   return lst\n \nexample_func([1, 2, \"hello\"])", "output": "def example_func(lst):\n   output_lst = []\n   for element in lst:\n      if (type(element) == int):\n         output_lst.append(element + 5)\n   return output_lst\n \nexample_func([1, 2, \"hello\"])"}
{"instruction": "Edit the following Python code to add a loop to generate a list of numbers from 1 to 10.", "input": "numbers = []", "output": "numbers = []\n\nfor i in range(1, 11):\n numbers.append(i)"}
{"instruction": "Modify the code snippet below to insert the element 'z' into the end of an array.", "input": "arr = ['a', 'b', 'c', 'd', 'e']", "output": "arr = ['a', 'b', 'c', 'd', 'e'] \narr.append('z') \nprint(arr)"}
{"instruction": "Create a regular expression to match the pattern of a 4-digit credit card number such as '1234 5678 9012 3456'.", "input": "", "output": "import re\npattern = re.compile(r'^[0-9]{4}\\s[0-9]{4}\\s[0-9]{4}\\s[0-9]{4}$')"}
{"instruction": "Analyze this code for potential runtime errors.", "input": "def factorial(n):\n    result = 1\n    if n >= 0:\n        for i in n:\n            result *= i\n        return result", "output": "This code may result in a runtime error because an iterable is expected as an argument for the for loop, but the argument passed is a number rather than an iterable. Additionally, the if-statement does not have an else block making it possible for the function to return None instead of a number. To fix the code, the argument passing to the for loop should be changed to range(n) and the if-statement should have an else block that returns 1 if n is smaller than 0."}
{"instruction": "Edit the following HTML form to add the required attribute.", "input": "<form>\n<input type=\"text\" name=\"name\">\n<input type=\"submit\" value=\"Submit\" />\n</form>", "output": "<form>\n<input type=\"text\" name=\"name\" required>\n<input type=\"submit\" value=\"Submit\" />\n</form>"}
{"instruction": "How could we modify the following code to add an item to a list?", "input": "list = [1, 2, 3]", "output": "We can use the list.append() method to add an item to the list:\n\nlist.append(4) # Adds the item 4 to the list"}
{"instruction": "Create a SQL query to modify a table by adding one new column.", "input": "Table Name: Customers\nColumn to Add: City", "output": "ALTER TABLE Customers\nADD City VARCHAR(255);"}
{"instruction": "Modify the following CSS Code so that it will target mobile devices only.", "input": ".text-center {\n    text-align: center;\n}", "output": "@media only screen and (max-width: 767px) { \n    .text-center {\n        text-align: center;\n    }\n}"}
{"instruction": "Write a CSS code to change the font size of an element with id=\"main\".", "input": "", "output": "#main {\n font-size: 16px;\n}"}
{"instruction": "Change the following JavaScript function so that it returns true if the number passed as a parameter is even, and false if it is odd.", "input": "function isEven(number) {\n  return number % 2;\n}", "output": "function isEven(number) {\n  return number % 2 === 0;\n}"}
{"instruction": "Edit the following HTML code so the inner text of all the <p> tags is centered.", "input": "<p>This is some text.</p>\n<p>Some more text.</p>", "output": "<p style=\"text-align: center;\">This is some text.</p>\n<p style=\"text-align: center;\">Some more text.</p>"}
{"instruction": "How would you check for syntax errors in a given Java code?", "input": "", "output": "Syntax errors in Java code can be checked by using the Java compiler. The compiler will identify the location and reason for any syntax errors, which can then be corrected. Additionally, IDEs often have built-in syntax checkers that can highlight errors before compilation."}
{"instruction": "Fix the following code to prevent errors from crashing the program.", "input": "def foo(a):\n    print(a)\nfoo(\"hi\")\nfoo(1)", "output": "def foo(a):\n    \"\"\"\n    A function that prints a value.\n    Args:\n     a (any): value to print\n    Returns:\n     nothing\n    \"\"\"\n    if isinstance(a, (int, float, str)): \n        print(a)\n    else:\n        print(\"Error: must be a string, int, or float\")\n\nif __name__ == '__main__':\n    foo(\"hi\")\n    foo(1)"}
{"instruction": "Change the Python code to output the product of two numbers.", "input": "def multiply(a, b): \n    return a + b", "output": "def multiply(a, b): \n    return a * b"}
{"instruction": "Edit the given sql query to return all employee details having age greater than 30", "input": "SELECT * FROM employees;", "output": "SELECT * FROM employees WHERE age > 30;"}
{"instruction": "Identify and correct the error in this C++ code.", "input": "#include<iostream>\nusing namespace std;\nvoid main()\n{\nint a=2;\nif(a=1)\n cout<<\"1\";\nelse\n cout<<\"2\";\n}", "output": "#include<iostream>\nusing namespace std;\nvoid main()\n{\nint a=2;\nif(a==1)\n cout<<\"1\";\nelse\n cout<<\"2\";\n}"}
{"instruction": "Write a CSS style sheet to change the background color of the webpage to blue.", "input": "", "output": "body {\n    background-color: blue;\n}"}
{"instruction": "Modify this piece of code to print numbers up to 10", "input": "for i in range(5):\n  print(i)", "output": "for i in range(10):\n  print(i)"}
{"instruction": "Change the following Python code to convert the list to a dictionary of key-value pairs.", "input": "mylist  = [1, 2, 3, 4, 5]", "output": "mydict = {}\nfor i in range(len(mylist)):\n    mydict[i] = mylist[i]"}
{"instruction": "Add exception handling for user-defined errors to the following code snippet in Java.", "input": "public class MyClass {\n    public static void main(String[] args) {\n        int x = 4;\n        int y = 2;\n        int z = x/y;\n        System.out.println(z);\n    }\n}", "output": "public class MyClass {\n    public static void main(String[] args) {\n        try {\n            int x = 4;\n            int y = 2;\n            int z = x/y;\n            System.out.println(z);\n        } catch (ArithmeticException ex) {\n            System.out.println(\"Division by zero not allowed.\");\n        }\n    }\n}"}
{"instruction": "Modify the given Python code to redirect to a different page when the button is clicked.", "input": "<button>Visit example.com</button>", "output": "<button onclick=\"window.location.href='https://example.com/';\">Visit example.com</button>"}
{"instruction": "Edit the following JavaScript code to reverse the characters of a given string.", "input": "", "output": "function reverseString(string) {\n  let reversedString = \"\";\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedString += string[i];\n  }\n  return reversedString;\n}"}
{"instruction": "Modify the program to accept user input of two numbers, and show the result based on the operator provided.", "input": "def calculate(num1, num2):\n    result = num1 + num2\n    return result", "output": "def calculate(num1, num2, operator):\n    if (operator == '+'):\n        result = num1 + num2\n    elif (operator == '-'):\n        result = num1 - num2\n    elif (operator == '*'):\n        result = num1 * num2\n    elif (operator == '/'):\n        result = num1 / num2\n    else:\n        print(\"Invalid operator\")\n    return result"}
{"instruction": "Edit the following Python code to add error handling for invalid inputs.", "input": "def area_triangle(base,height):\n    pass", "output": "def area_triangle(base,height):\n    if base == 0 or height == 0:\n        raise ValueError(\"Base and height should not be zero.\")\n    else:\n        return 0.5 * base * height"}
{"instruction": "Edit the following markup so that it becomes valid HTML5.", "input": "<body>\n    <div><head>My Website</head></div>\n</body>", "output": "<body>\n    <head>My Website</head>\n    <div></div>\n</body>"}
{"instruction": "Edit the following CSS code to make all headings appear in bold.", "input": "h1, h2, h3 {\n    font-size: 1em;\n    color: #111111;\n}", "output": "h1, h2, h3 {\n    font-size: 1em;\n    color: #111111;\n    font-weight: bold;\n}"}
{"instruction": "Modify the following Python code to print the program output unique and ordered.", "input": "x = [1, 2, 3, 4, 4, 3, 1]\nprint(x)", "output": "x = [1, 2, 3, 4]\ny = list(set(x))\ny.sort()\nprint(y)"}
{"instruction": "Modify the code to make sure it is valid according to Java language specification.", "input": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}", "output": "public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}"}
{"instruction": "Edit the following function to remove duplicate elements from a list.", "input": "def remove_duplicates(list):\n    new_list = []\n    for element in list:\n        new_list.append(element)\n    return new_list", "output": "def remove_duplicates(list):\n    new_list = []\n    for element in list:\n        if element not in new_list:\n            new_list.append(element)\n    return new_list"}
{"instruction": "Modify the code so that it prints \"Python is the best language\" five times.", "input": "for i in range(10):\n    print(\"Python is great!\")", "output": "for i in range(5):\n    print(\"Python is the best language!\")"}
{"instruction": "Edit the following code to generate a list of the vowels in a given string.", "input": "", "output": "def get_vowels(str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    res = []\n    for letter in str:\n        if letter.lower() in vowels:\n            res.append(letter)\n    return res"}
{"instruction": "Write a Python function to edit a given list by replacing an existing element with a new value.", "input": "mylist = [\"Apple\", \"Banana\", \"Cherry\"]\nold_value = \"Banana\"\nnew_value = \"Strawberry\"", "output": "def replace_value(mylist, old_value, new_value):\n    if old_value in mylist:\n        mylist[mylist.index(old_value)] = new_value\n    return mylist"}
{"instruction": "Modify the following array to output the sum of the second and third items in the array.", "input": "const array = [1, 2, 3, 4];", "output": "const array = [1, 2, 3, 4];\nconst sum = array[1] + array[2];\nconsole.log(sum); // 5"}
{"instruction": "Identify the error in the code given below.", "input": "# Sum of elements in a list\n\nmy_list = [1, 2, 3]\n\nsum = 0\n\nfor i in range(my_list):\n    sum += i\n\nprint(sum)", "output": "The error is in line 6 while using the range function. The range function expects the start and end parameters to be int type, but in this case the parameter passed to the range function is a list. This should be changed to range(len(my_list)) so that the code will iterate over the elements of the list instead."}
{"instruction": "Edit the following code to make the function return the value of n mod m.", "input": "int modulo(int n, int m)\n{\n    return n / m;\n}", "output": "int modulo(int n, int m)\n{\n    return n % m;\n}"}
{"instruction": "Edit the given code to use dynamic programming to solve the problem.", "input": "def rod_cutting(arr, n):\n    if n <= 0:\n        return 0\n    max_val = 0\n    for i in range(0, n):\n        max_val = max(max_val, arr[i] + rod_cutting(arr, n-i-1))\n    return max_val", "output": "def rod_cutting(arr, n):\n    dp = [-1 for _ in range(n+1)]\n    dp[0] = 0\n    for i in range(1, n+1):\n        for j in range(i):\n            dp[i] = max(dp[i], arr[j] + dp[i - j - 1])\n    return dp[n]"}
{"instruction": "Modify the given code so it prints a prime number table.", "input": "table_size = 10", "output": "# Include the necessary library\nfrom prime_generator import get_prime\n\n# Get a list of prime numbers\nprimes = get_prime(table_size)\n\n# Print the prime number table\nprint(\" Prime Number Table\")\nprint(\" --------------------\")\n\nfor i in range(table_size):\n    print(f\"{primes[i]:>4} {(i+1)*primes[i]:>4}\")"}
{"instruction": "Edit the program to print \"Hello world!\" in the output.", "input": "def greet():\n    print(\"Good morning!\")", "output": "def greet():\n    print(\"Hello world!\")"}
{"instruction": "Modify the program so that the \"count\" variable counts from 0 to 10 11.", "input": "count = 0\nwhile count < 10:\n    print(count)", "output": "count = 0\nwhile count <= 10:\n    print(count)\n    count = count + 1"}
{"instruction": "Edit the following C code so that an infinite loop is created:", "input": "#include <stdio.h>\nint main()\n{\n    int i = 0;\n    while(i<10)\n    {\n        printf(\"%d\\n\",i);\n        i++;\n    }\n    return 0;\n}", "output": "#include <stdio.h>\nint main()\n{\n    int i = 0;\n    while(1)\n    {\n        printf(\"%d\\n\",i);\n        i++;\n    }\n    return 0;\n}"}
{"instruction": "Write a function that takes a list of strings and returns the longest common prefix of the list of strings.", "input": "", "output": "def longest_common_prefix(strings):\n    if len(strings) == 0:\n        return \"\"\n    smallest_string = min(strings, key=len)\n    end_word_index = len(smallest_string)\n\n    for i in range(end_word_index):\n        for word in strings:\n            if word[i] != smallest_string[i]:\n                return smallest_string[:i] \n    return smallest_string"}
{"instruction": "Edit the following code and make sure it prints out the sorted list instead of the unsorted list.", "input": "list_of_numbers = [30, 10, 20, 40, 50]", "output": "list_of_numbers = [30, 10, 20, 40, 50]\n\nlist_of_numbers.sort()\n\nprint(list_of_numbers)"}
{"instruction": "Debug this code snippet to print a list of all 6-digit numbers.", "input": "", "output": "def printList(): \n    i = 11\n    while(i <= 99999): \n        if (i >= 10000 and i <= 99999): \n            print(i) \n        i = i + 1\n\n# Call the function \nprintList()"}
{"instruction": "You need to fix the following code to make it work correctly.", "input": "def mean(numbers):\n nums = numbers\n avg = sum(nums) / len(nums)\n return int(avg)", "output": "def mean(numbers):\n nums = numbers\n avg = sum(nums) / len(nums)\n return round(avg, 2)"}
{"instruction": "Change the variable names in the following Python code.", "input": "x1 = 10\ny1 = 20", "output": "a = 10\nb = 20"}
{"instruction": "Edit the following code to store 10 numbers in an array.", "input": "int array[]", "output": "int array[10];"}
{"instruction": "Edit the SQL query to get the users from Canada who joined within the last 6 months.", "input": "SELECT * FROM users", "output": "SELECT * FROM users\nWHERE country = 'Canada' \nAND CAST(DATEDIFF(MONTH, joined_date, GETDATE()) AS INT) <= 6;"}
{"instruction": "Change the variable names in the given code to comply with the chosen coding standard.", "input": "x = \"Hello World!\"\ny = 1", "output": "message = \"Hello World!\"\nvalue = 1"}
{"instruction": "Edit the given list to only include even numbers.", "input": "list = [2,3,4,5,6,7,8]", "output": "for i in list:\n  if i % 2 != 0:\n    list.remove(i)\n\nprint(list)"}
{"instruction": "Edit the following SQL statement to select all rows from the \"users\" table where the \"country_id\" is 2 and the \"level\" is greater than 5.", "input": "SELECT * FROM users;", "output": "SELECT * FROM users\nWHERE country_id = 2 \nAND level > 5;"}
{"instruction": "You need to edit the given code for sorting. Make the array sort in descending order.", "input": "arr = [3, 5, 8, 9, 10]", "output": "def quick_sort(arr): \n    if len(arr) <= 1:\n        return arr\n  \n    pivot = arr[-1]\n    lesser_elements = [i for i in arr[:-1] if i <= pivot]\n    greater_elements = [i for i in arr[:-1] if i > pivot]\n    return quick_sort(greater_elements) + [pivot] + quick_sort(lesser_elements)"}
{"instruction": "Is there an error in the following code?", "input": "price = 10\n\nif prive > 10:\n   print('Price must be 10 or less')", "output": "true"}
{"instruction": "Change the following Python program so that it prints out the palindromic substrings.", "input": "string = 'mom'", "output": "def palindromicSubstrings(string): \n    for start in range(len(string) + 1):\n        for end in range(start + 1, len(string) + 1):\n            substring = string[start:end]\n            if substring == substring[::-1]:\n                print(substring) \npalindromicSubstrings(string)"}
{"instruction": "Create a function in C to edit a string. The function should correct all occurrences of two or more consecutive spacets with a single space.", "input": "char str[] = \"Hi   everyone   \"", "output": "void trimSpace(char *str) \n{ \n    int i = 0, j = 0; \n    while (str[i]) \n    { \n        if (str[i] != ' ') \n            str[j++] = str[i]; \n        else if (str[i-1] != ' ') \n            str[j++] = str[i];  \n        i++; \n    } \n    str[j] = '\\0';  \n} \n\ntrimSpace(str); // str will become \"Hi everyone \""}
{"instruction": "Change the following C++ program so that it returns 0 if an array contains all negative numbers.", "input": "arr = [-2, -3, -4, -1]", "output": "#include <iostream> \nusing namespace std; \n  \nint max_sum(int arr[], int n) \n{ \n    if (n == 0) \n        return 0; \n        \n    int max = arr[0]; \n    int sum = arr[0]; \n  \n    for (int i = 1; i < n; i++) { \n  \n        if (arr[i] < 0) \n            return 0; \n            \n        sum = max(sum + arr[i], arr[i]); \n        max = max(max, sum); \n    } \n  \n    return max; \n} \n///\n16. Instruction: Create a function in Python that returns the number of times a given substring occurs in a string.\n16. Input:\nstring = \"Hello, Hello, Hello!\"\nsubstring = \"Hello\"\n16. Output:\ndef count_substring(string, substring): \n  \n    count = 0\n  \n    #Loop through the string \n    for i in range(0, len(string)): \n        if (string[i:i+len(substring)] == substring): \n            count += 1\n \n    return count"}
{"instruction": "Write a css class to change a div's background color to green.", "input": "", "output": ".green-background {\n  background-color: green;\n}"}
{"instruction": "Edit the following code so that it prints the first odd number in a given list.", "input": "nums = [2, 3, 4, 5, 6]", "output": "for num in nums:\n    if num % 2 == 1:\n        print(num)\n        break"}
{"instruction": "Modify the following Java code to debug and execute properly.", "input": "public class HelloWorld {\n public static void main(String[] args) {\n   System.out.print(\"Hello world);\n }\n}", "output": "public class HelloWorld {\n public static void main(String[] args) {\n   System.out.println(\"Hello world);\n }\n}"}
{"instruction": "Edit the existing code to focus the cursor in the input field.", "input": "<html>\n    <body>\n        <input type=\"text\" id=\"myInput\" />\n        <script type=\"text/javascript\">\n            document.getElementById('myInput').focus();\n        </script>\n    </body>\n</html>", "output": "<html>\n    <body>\n        <input type=\"text\" id=\"myInput\" autofocus />\n        <script type=\"text/javascript\">\n            document.getElementById('myInput').focus();\n        </script>\n    </body>\n</html>"}
{"instruction": "Recognize the type of error in the given code and provide which line of code is causing the error.", "input": "def divide(numerator, denominator):\n    return numerator / denominator\n\nnumber = int(input(\"Enter a number: \"))\n    result = divide(100, number)", "output": "Line 4 is causing a syntax error due to improper indentation."}
{"instruction": "Change the following Java code so that it only prints the letters at even indices in the string.", "input": "String str = \"Hello, World!\";\n\nfor (int i = 0; i < str.length(); i++) {\n System.out.print(str.charAt(i));\n}", "output": "String str = \"Hello, World!\";\n\nfor (int i = 0; i < str.length(); i+=2) {\n System.out.print(str.charAt(i));\n}"}
{"instruction": "Create a CSS class that changes font color to blue.", "input": "", "output": ".blue-text {\n    color: blue;\n}"}
{"instruction": "Edit the following Python code to combine two lists.", "input": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]", "output": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n# Combine both the lists\ncombined_list = list1 + list2\n# Print the combined list\nprint(combined_list)\n\nOutput:\n[1, 2, 3, 4, 5, 6]"}
{"instruction": "Design a currency exchange program using JavaScript that allows the user to instantly receive the exchange rate for a particular currency.", "input": "", "output": "const currencyExchange = (baseCurrency, foreignCurrency) => {\n  let response;\n\n  const endpoint = `https://api.exchangeratesapi.io/latest?base=${baseCurrency}&symbols=${foreignCurrency}`;\n\n  // Use Fetch API to make a call to endpoint\n  fetch(endpoint)\n  .then(res => {\n    res.json()\n    .then(data => {\n      response = data.rates[foreignCurrency];\n      console.log(response);\n    })\n  });\n};\n\n// Call to currencyExchange\ncurrencyExchange(\"USD\", \"EUR\");"}
{"instruction": "Change the capitalization of the a text string.", "input": "Hello World", "output": "hello world"}
{"instruction": "Edit the following code to make it an infinite loop.", "input": "# Python 3\n# Print numbers from 0 to 10 \ni = 0\nwhile i <= 10: \n    print(i) \n    i += 1", "output": "# Python 3\n# Print numbers from 0 to 10 \nwhile True: \n    print(i) \n    i += 1"}
{"instruction": "Edit the given SQL query to find the maximum salary", "input": "SELECT MIN(salary) FROM employees", "output": "SELECT MAX(salary) FROM employees;"}
{"instruction": "Modify the given code to accept input in Celsius and convert it to Fahrenheit.", "input": "def c2f():\n  return ((9/5)*temp + 32)", "output": "def c2f(temp):\n  return ((9/5)*temp + 32)"}
{"instruction": "Modify the function such that it takes two arrays, one containing numbers and the other containing symbols as arguments and returns a string where each number is replaced with its associated symbol.", "input": "nums = [1,2,3,4,5]\nsymbols = [\"A\",\"B\",\"C\",\"D\",\"E\"]", "output": "def join_nums_symbols(nums, symbols):\n    assert len(nums) == len(symbols), \"length of nums and symbols should be equal\"\n\n    result = \"\"\n    for i in range(len(nums)):\n        result += str(nums[i]) + symbols[i]\n    return result"}
{"instruction": "Change the following code to accept multiple arguments.", "input": "func add(a, b) {\n  return a + b;\n}", "output": "func add(...args) {\n  let result = 0;\n  for (const arg of args) {\n    result += arg;\n  }\n  return result;\n}"}
{"instruction": "Edit the following HTML tag to make the link open in a new tab.", "input": "<a href=\"https://www.example.com\">Example</a>", "output": "<a href=\"https://www.example.com\" target=\"_blank\">Example</a>"}
{"instruction": "Modify the following code so that it returns the lowest common multiple of two given numbers?", "input": "def lowest_common_multiple(x, y):\n    pass", "output": "def lowest_common_multiple(x, y): \n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while(True): \n        if((greater % x == 0) and (greater % y == 0)): \n            lcm = greater \n            break\n        greater += 1\n    return lcm"}
{"instruction": "Edit the code so that it can run in JavaScript async/await instead of Promise", "input": "const myPromise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"Success!\");\n  }, 1000);\n});\n\nmyPromise.then(data => {\n  console.log(data);\n});", "output": "async function myAsync() {\n  const response = await new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(\"Success!\");\n    }, 1000);\n  });\n  console.log(response);\n}\n\nmyAsync(); // Success!"}
{"instruction": "Edit this HTML structure to add a footer at the bottom.", "input": "<html>\n<head>\n <title>My Website</title>\n</head>\n<body>\n\n</body>\n</html>", "output": "<html>\n<head>\n <title>My Website</title>\n</head>\n<body>\n \n<footer>\n   <p>Copyright \u00a9 20"}
{"instruction": "Modify the given code to create a for loop that prints a list of numbers from 0 to 10.", "input": "int i = 0", "output": "for i in range(11):\n    print(i)"}
{"instruction": "Edit the following C# code to throw an exception if the divisor is equal to 0.", "input": "int result = dividend / divisor;", "output": "int result; \ntry \n{ \n    result = dividend / divisor; \n    if (divisor == 0) \n        throw new ArithmeticException(\"Divisor cannot be zero\"); \n    \n} \ncatch (DivideByZeroException e) \n{ \n    Console.WriteLine(\"Exception caught: {0}\", e); \n}"}
{"instruction": "Name three techniques used to debug a program.", "input": "", "output": "Three techniques used to debug a program are: 1) Printing debugging messages to track the state of the variables; 2) Stepping through code execution to find the source of the bug; and 3) Testing the code through a series of test cases to uncover any issues."}
{"instruction": "Modify the code below to create a new function called \"addSquares()\" that adds the squares of two numbers and returns the result.", "input": "def add(x, y):\n   return x + y", "output": "def add(x, y):\n   return x + y\n\ndef addSquares(x, y):\n   return x*x + y*y"}
{"instruction": "Modify the code in the following snippet to include a try/catch block.", "input": "function getStringLength() {\n    let string = prompt(\"Please enter a string\");\n    let length = string.length;\n    console.log(length);\n}", "output": "function getStringLength() {\n    try {\n        let string = prompt(\"Please enter a string\");\n        let length = string.length;\n        console.log(length);\n    } catch (error) {\n        console.log('ERROR: ', error);\n    }\n}"}
{"instruction": "Fix the bug in this code.", "input": "def calculate_area(length, width):\narea = (length * width)\nif area > 20:\n    return 'Area too large'", "output": "def calculate_area(length, width):\narea = (length * width)\nif area > 20:\n    return 'Area too large'\nelse:\n    return area"}
{"instruction": "Edit this code so it can classify whether a number is even or odd.", "input": "def classify_number(num):", "output": "def classify_number(num):\n    if num % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\""}
{"instruction": "Edit the given code to ensure it outputs appropriate messages for successful and unsuccessful output.", "input": "def handleInput(name):\n  if len(name) > 0:\n    print('Hello, ' + name)", "output": "def handleInput(name):\n    if len(name) > 0:\n        print('Hello, ' + name)\n    else:\n        print('No name provided.')"}
{"instruction": "Edit the code so that it does not throw an error.", "input": "a = 2 + 3\nb = a * 2\nc = b / a\n\nz = b + c", "output": "a = 2 + 3\nb = a * 2\nc = b / a\n\n# We need to explicitly convert c to an integer before doing the addition.\nz = b + int(c)"}
{"instruction": "Edit the vector below such that all elements are greater than five.", "input": "[1, 5, 3, 7, 6, 4]", "output": "def edit_vec(vec): \n    for i in range(len(vec)): \n        if vec[i] <= 5: \n            vec[i] = 5\n    return vec"}
{"instruction": "Create a regular expression that matches strings that start with a certain prefix, followed by two or more numbers, and ending with two or more alphabet characters.", "input": "prefix = \"ABC\"", "output": "import re\n \nprefix = \"ABC\"\npattern = re.compile('^' + prefix + '\\d{2,}[A-Za-z]{2,}$')"}
{"instruction": "Given the following code in Python, identify the mistake and fix it.", "input": "name = input(\"What is your name? \"", "output": "name = input(\"What is your name? \") # Missing closing quotation mark"}
{"instruction": "Edit this code to fix the bug in the program", "input": "def print_longest_word(words):\n longest_word = \"\"\n for word in words:\n if len(word) > len(longest_word):\n longest_word = word\n print(longest_word)\nwords = [\"hello\", \"cat\"]\nprint_longest_word(words)", "output": "def print_longest_word(words):\n longest_word = \"\"\n for word in words:\n if len(word) > len(longest_word):\n longest_word = word\n print(longest_word)\nwords = [\"hello\", \"cat\"]\nprint_longest_word(words)\n\nif len(words) > 0:\n longest_word = words[0]\n for word in words:\n if len(word) > len(longest_word):\n longest_word = word\n print(longest_word)"}
{"instruction": "Convert the following infix expression to postfix notation.", "input": "A + B * C", "output": "A B C * +"}
{"instruction": "Debug the code to encounter the issue mentioned in the comment.", "input": "def validate_password(password):\n    if len(password) < 8:\n        # bug: print message\n        return False\n    else:\n        return True", "output": "def validate_password(password):\n    if len(password) < 8:\n        # bug: print message\n        print('Password must be at least 8 characters.')\n        return False\n    else:\n        return True"}
{"instruction": "Debug the code to fix the error.", "input": "def hi_it(name):\n print(\"Hi,\" + name)\n\nhi_it(\"John\")", "output": "def hi_it(name):\n print(\"Hi,\" + str(name))\n\nhi_it(\"John\")"}
{"instruction": "Suggest a plugin or software that can be used to debug a React application.", "input": "", "output": "React's official debugging tool, the React Developer Tools, is a great plugin for debugging React applications. It is available for both Chrome and Firefox, and provides detailed information about the component hierarchy, current props and state of the application, and detailed performance metrics. Additionally, React's Error Boundary feature can be used to detect and debug errors and issues in the React application."}
{"instruction": "Write a CSS rule that changes the font-family of the body element to sans-serif.", "input": "", "output": "body {\n  font-family: sans-serif;\n}"}
{"instruction": "Change the following code so that it can reverse a list without modifying the original list", "input": "[1, 2, 3]", "output": "def reverse(lst): \n    return lst[::-1] \n  \nlst = [1, 2, 3]\nprint(reverse(lst))"}
{"instruction": "Edit the following code so that it prints the given value to the console.", "input": "System.out.println(\"Hello World\");\n5", "output": "System.out.println(5);"}
{"instruction": "Edit the given JavaScript code to alert a success message?", "input": "console.log(\"Process started\");", "output": "console.log(\"Process started\");\nalert(\"Process Completed Successfully\");"}
{"instruction": "Create a function for detecting changes in an array of numbers.", "input": "", "output": "def detect_changes(numbers):\n    results = []\n    for i in range(1, len(numbers)):\n        if numbers[i] != numbers[i-1]:\n            results.append((i, numbers[i]))\n    return results"}
{"instruction": "Edit the following code to allow for the user to input an unlimited list of numbers.", "input": "", "output": "# Prime numbers between 2 and n\n\nn = int(input(\"Enter a positive integer: \"))\n\n# Initially assuming all integers between 2 and n are prime\nprimeArray = [True] * (n + 1)\n\n# Create list of prime numbers\nfor p in range(2, n+1): \n    # If prime[p] is not changed, then it is a prime \n    if primeArray[p]== True: \n        # Update all multiples of p \n        for i in range(2*p,n+1,p): \n            primeArray[i] = False\n\n# Print all prime numbers \nfor i in range(2,n+1): \n    if primeArray[i]: \n        print(i, end=\" \")"}
{"instruction": "Find any errors in the given PHP code.", "input": "<?php\n$name = \u201cJohn\u201d;\n$message = \u201cHello, my name is $Name.\u201d;\necho $message;", "output": "The given PHP code contains an error in the variable name. The variable is written as $Name instead of $name, so it is not getting replaced with the given value of John. The code should be corrected to:\n\n$name = \"John\";\n$message = \"Hello, my name is $name.\";\necho $message;"}
{"instruction": "Modify the following code to add an element 'item7' to a JSON array.", "input": "{\n    \"items\": [\"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\"]\n}", "output": "{\n    \"items\": [\"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\"]\n}"}
{"instruction": "Edit the code to print out an error message if a negative number is entered as input", "input": "num = -5", "output": "if num < 0:\n    print(\"Error: Please enter a positive number!\")\nelse:\n    print(\"Great, the number is positive.\")"}
{"instruction": "Write a SQL query to find the average credit score of users who are 18 years or younger.", "input": "", "output": "SELECT AVG(credit_score)\nFROM users\nWHERE age <= 18"}
{"instruction": "Edit the following program to output a list of the numbers that are divisible by 3", "input": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "output": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nresult = []\nfor num in numbers:\n    if num % 3 == 0:\n        result.append(num)\n\nprint(result)"}
{"instruction": "Modify the following C program so that it can print the result in reverse order.", "input": "#include <stdio.h>\n \nint main()\n{\n   int arr[] = {1, 2, 3, 4, 5};\n   int i, size;\n \n   size = sizeof(arr) / sizeof(arr[0]);\n \n   for (i=0; i < size; i++)\n   {\n      printf(\"%d \", arr[i]);\n   }\n   return 0;\n}", "output": "#include <stdio.h>\n \nint main()\n{\n   int arr[] = {1, 2, 3, 4, 5};\n   int size, i;\n \n   size = sizeof(arr) / sizeof(arr[0]);\n \n   for (i = size - 1; i >= 0; i--) {\n      printf(\"%d \", arr[i]);\n   }\n   return 0;\n}"}
{"instruction": "Edit a program to show the area of the rectangle", "input": "#include <stdio.h>\n \nint main()\n{\n    int length, width;\n    printf(\"Enter the length : \");\n    scanf(\"%d\", &length);\n \n    printf(\"Enter the width : \");\n    scanf(\"%d\", &width);\n   \n    printf(\"The Perimeter of rectangle is : %d \\n\", 2*(length + width));\n \n    return 0;\n}", "output": "#include <stdio.h>\n \nint main()\n{\n    int length, width;\n    printf(\"Enter the length : \");\n    scanf(\"%d\", &length);\n \n    printf(\"Enter the width : \");\n    scanf(\"%d\", &width);\n   \n    printf(\"The Perimeter of rectangle is : %d \\n\", 2*(length + width));\n    printf(\"The Area of rectangle is : %d \\n\", length * width);\n \n    return 0;\n}"}
{"instruction": "Debug the code and make sure it successfully prints out \"Hello World\".", "input": "#include <iostream> \nusing namespace std;\n\nvoid main () \n{ \n   cout << \"Hello World\" << endl; \n  \n   return 0; \n}", "output": "#include <iostream> \nusing namespace std;\n\nint main () \n{ \n   cout << \"Hello World\" << endl; \n  \n   return 0; \n}"}
{"instruction": "Modify the following JavaScript code to alert \"Thanks for visiting!\" when the page is loaded.", "input": "", "output": "window.onload = function() {\n    alert(\"Thanks for visiting!\");\n}"}
{"instruction": "Edit this HTML code so it uses classes instead of IDs.", "input": "<div id=\"main\">\n   <h1 id=\"heading\">Heading</h1>\n   <p id=\"body\">Some text here</p>\n</div>", "output": "<div class=\"main\">\n   <h1 class=\"heading\">Heading</h1>\n   <p class=\"body\">Some text here</p>\n</div>"}
{"instruction": "Change the following variable declaration into Python.", "input": "int num = 10;", "output": "num = 10"}
{"instruction": "Edit the code below to sort the list of integers given in the input.", "input": "list_in = [40, 32, 12, 19]", "output": "list_in = [40, 32, 12, 19]\nlist_in.sort()\nprint(list_in) #output: [12, 19, 32, 40]"}
{"instruction": "What changes can you suggest in order to optimize the following Java code?", "input": "public class Student {\n    //private variables\n    private String name;\n    private int age;\n    private int grade;", "output": "public class Student {\n    //private variables\n    private String name;\n    private int age;\n    private int grade;\n  \n    //create getters and setters for the fields\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public int getGrade() {\n        return grade;\n    }\n\n    public void setGrade(int grade) {\n        this.grade = grade;\n    }\n}"}
{"instruction": "Change the code so that it swaps the contents of two variables in one line.", "input": "a = 5\nb = 10", "output": "a, b = b, a"}
{"instruction": "Modify the following code to insert the element 'x' into the list at position 'index'", "input": "list1 = [1, 2, 3, 4, 5]\nx = 6\nindex = 3", "output": "list1 = [1, 2, 3, 4, 5]\nx = 6\nindex = 3\n\nlist1.insert(index, x)"}
{"instruction": "Describe the process of debugging a code.", "input": "", "output": "Debugging is the process of identifying and fixing errors in the code. It involves finding the root cause of the error and removing it. The process of debugging involves isolating the offending code, identifying the bug, obtaining an understanding of why the bug occurred, determining if a fix can be made (without breaking any other code), testing the fix and re-running the code to ensure the bug is fixed."}
{"instruction": "Modify the following code so that it prints the reversed version of a list.", "input": "list1 = [1, 2, 3, 4, 5]\n\ndef print_reverse_list(my_list):", "output": "list1 = [1, 2, 3, 4, 5]\n\ndef print_reverse_list(my_list):\n    my_list.reverse()\n    print(my_list)"}
{"instruction": "Modify the provided code to swap two variables.", "input": "a = 1\nb = 2", "output": "a, b = b, a"}
{"instruction": "Edit this code to add a try-except block to catch any errors.", "input": "def repeat(string, repeats): \n    for i in range(repeats): \n        print(string) \n \nrepeat(\"Hello World!\", 5)", "output": "def repeat(string, repeats): \n    try:\n        for i in range(repeats): \n            print(string)\n    except:\n        print(\"Error occured\")\n \nrepeat(\"Hello World!\", 5)"}
{"instruction": "Edit a first person narrative created by a GPT model in order to make the narrative more coherent.", "input": "I was walking in the forest and suddenly I saw a dragon. It was huge and its scales glimmered in the sunlight. It had sharp claws and its eyes were red.", "output": "I was strolling through the dense forest when, out of the corner of my eye, I noticed something large and shimmering in the sunlight. As I approached, I saw a magnificent dragon lounging among the trees. Its scales glinted in the sun's rays and its massive, sharply-clawed feet were planted firmly into the ground. Its eyes burned a deep red as it watched my slow approach."}
{"instruction": "Edit the given HTML code so that the paragraphs are numbered.", "input": "<p>These are some sample paragraphs.</p>\n<p>This is another one.</p>", "output": "<ol>\n <li><p>These are some sample paragraphs.</p></li>\n <li><p>This is another one.</p></li>\n</ol>"}
{"instruction": "Debug the following code for finding the median of three numbers.", "input": "def find_median(a, b, c):\n    if a > b: \n        if b > c:\n            return b \n        elif a > c:\n            return c\n        else:\n            return a\n    elif b > c:\n        return b\n    elif a > c:\n        return a\n    else:\n        return c", "output": "def find_median(a, b, c):\n    # Calculate the maximum of the three numbers\n    max_num = max(a, b, c)\n    # Calculate the minimum of the three numbers\n    min_num = min(a, b, c)\n    # Calculate the median value as the sum of the three numbers minus the maximum and minimum\n    median = a + b + c - max_num - min_num\n    return median\n\nmedian_value = find_median(2, 3, 5)\nprint(median_value) # 3"}
{"instruction": "Edit the existing JavaScript code to make it pass Eslint.", "input": "var foo = \"foo\"\nif (foo) {\n    console.log(\"foo is true\")\n}", "output": "var foo = \"foo\";\nif (foo) {\n    console.log(\"foo is true\");\n}"}
{"instruction": "Identify which line of code contains a syntax error?", "input": "def getFibonacciNumber(n):\n  a, b = 0, 1\n  for i in range 0, n\n    a, b = b, a + b\n  return a", "output": "The line \"for i in range 0, n\" contains a syntax error. The syntax for the for loop should be \"for i in range(0, n)\"."}
{"instruction": "Modify the function to also remove all whitespace from the string.", "input": "", "output": "import re\n\ndef remove_special_chars_and_whitespace(s):\n    return re.sub(r'\\s','', re.sub(r'[^\\w\\s]','', s))"}
{"instruction": "Edit the Java code to filter out the persons whose age is less than 18.", "input": "List<Person> persons = new ArrayList<>();\n\nfor (Person person : persons) {\n    System.out.println(person.getName());\n}", "output": "List<Person> persons = new ArrayList<>();\n\nfor (Person person : persons) {\n    if (person.getAge() >= 18) {\n        System.out.println(person.getName());\n    }\n}"}
{"instruction": "How would you create a debug statement to help identify an error in code", "input": "", "output": "print(f\"Error at line {lineno}: {error}\")"}
{"instruction": "Using the comment as a guide, edit the following CSS so that the text of the id 'heading_text' is green when an element of class 'selected' is active.", "input": ".selected {\n\tborder: 1px solid green;\n}", "output": ".selected {\n\tborder: 1px solid green;\n}\n#heading_text {\n    color: green;\n}\n.selected:active #heading_text {\n    color: green;\n}"}
{"instruction": "Describe how to debug a C++ program using GDB.", "input": "", "output": "Debugging a C++ program using GDB involves running the program with the \u2018gdb\u2019 command and then setting breakpoints and examining variables. This can be done by typing in \u2018break\u2019 followed by the line number, or \u2018b\u2019 followed by the function name, where the program should halt. Once the program is halted, variables and registers can be inspected to determine what is causing the program to fail. Finally, the \u2018continue\u2019 or \u2018c\u2019 command can be used to resume normal execution."}
{"instruction": "Edit the given SQL query to make it efficient.", "input": "SELECT * FROM table1, table2 \nWHERE table1.id = table2.id", "output": "SELECT * FROM table1 \nINNER JOIN table2 \nON table1.id = table2.id\n\nThe suggested modification is to replace the two-table join with an inner join. This will be more efficient as it reduces the number of cartesian products which have to be computed."}
{"instruction": "Modify the existing code so it prints out the numbers from 0 to 10 in reverser order.", "input": "for (let i = 0; i < 10; i++) {\n\tconsole.log(i);\n}", "output": "for (let i = 10; i >= 0; i--) {\n\tconsole.log(i);\n}"}
{"instruction": "Edit the following C++ code to print the prime numbers between 1 and 100.", "input": "#include <iostream>  \nusing namespace std;  \n  \nint main()  \n{  \n    int i, j;  \n    cout << \"The prime numbers between 1 and 100 are:\";  \n    for (i = 1; i <= 100; i++)  \n    {  \n        for (j = 2; j <= (i / 2); j++)  \n        {     \n            if (i % j == 0)  \n                break;  \n        }  \n      \n        // If the prime number is found  \n        if (j > (i / 2))  \n            cout << i << \" \";  \n    }  \n    return 0;  \n}", "output": "#include <iostream>  \nusing namespace std;  \n  \nint main()  \n{  \n    int i, j;  \n    cout << \"The prime numbers between 1 and 100 are:\";  \n    for (i = 1; i <= 100; i++)  \n    {  \n        int isPrime = 1;\n        for (j = 2; j <= (i / 2); j++)  \n        {  \n            if (i % j == 0)  \n            {  \n                isPrime = 0;  \n                break;  \n            }  \n        }  \n      \n        if(isPrime == 1)  \n            cout << i << \" \";  \n    }  \n    return 0;  \n}"}
{"instruction": "Edit this code to show a message after 2 seconds", "input": "<script>\n    alert(\"Hello World!\");\n</script>", "output": "<script>\n    setTimeout(function(){ \n        alert(\"Hello World!\"); \n    }, 2000);\n</script>"}
{"instruction": "Edit the following code to make the output more reusable.", "input": "def get_name(names):\n    print(\"Here's my name:\")\n    for name in names:\n        print(name)\n    return", "output": "def get_name(names):\n    result = []\n    for name in names:\n        result.append(name)\n    return result"}
{"instruction": "Given the following Java code, can you spot the error?", "input": "public class MyClass {\n  int x = 10;\n  int y = 20;\n\n  public static int add(int x, int y) {\n    int sum = x + y;\n    return sum;\n  }\n}", "output": "The method add() is a static method and cannot directly access the instance variables x and y. The error can be fixed by passing in the two parameters x and y to the add() method: \n\npublic static int add(int x, int y) {\n    int sum = x + y;\n    return sum;\n}"}
{"instruction": "Develop a program to identify the longest common prefix between two strings.", "input": "String1 = \"Hellocat\"\nString2 = \"Hellokong\"", "output": "def longestCommonPrefix(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    result = \"\" \n    j = 0\n    i = 0\n    while(i <= n1 - 1 and j <= n2 - 1): \n        if (str1[i] != str2[j]): \n            break\n        result += str1[i] \n        i += 1\n        j += 1\n  \n    return result"}
{"instruction": "Edit the following HTML code to add an ID attribute with value \"demo-id\" to the <h1> element.", "input": "<h1>This is a heading</h1>", "output": "<h1 id=\"demo-id\">This is a heading</h1>"}
{"instruction": "Edit the code so that it produces the desired output.", "input": "answer = n\nif answer % 2 == 0:\n    print('even')\nelse:\n    print('odd')\nOutput:\"", "output": "answer = n\nif answer % 2 == 0:\n    print('even')\nelif answer % 2 == 1:\n    print('odd')"}
{"instruction": "Edit the following code such that output is an array of objects of key value pairs.", "input": "let fruit = [\"apple\", \"banana\", \"orange\"];\nlet colors = [\"red\", \"yellow\", \"orange\"];", "output": "let fruits = [\"apple\", \"banana\", \"orange\"];\nlet colors = [\"red\", \"yellow\", \"orange\"];\n\nlet fruitObj = [];\n\nfor (let i = 0; i < fruits.length; i++) {\n    let obj = {};\n    obj.name = fruits[i];\n    obj.color = colors[i];\n    fruitObj.push(obj);\n}"}
{"instruction": "Modify the following code to handle an input which is a negative number.", "input": "def power_func(number):\n    if number >= 0:\n        return number**2", "output": "def power_func(number):\n    if number < 0:\n        return \"Invalid input!\"\n    else:\n        return number**2"}
{"instruction": "Modify the code to create an AI model to classify the given dataset.", "input": "dataset = {\n    'x1': ['apple', 'banana'],\n    'x2': ['red', 'yellow'],\n    'label': ['fruit', 'fruit']\n}", "output": "class Model(nn.Module):\n    def __init__(self):\n        super(Model, self).__init__()\n        self.fc1 = nn.Linear(2, 32)\n        self.fc2 = nn.Linear(32, 32)\n        self.fc3 = nn.Linear(32, 2)\n\n    def forward(self, x):\n        x = x.view(-1, 2)\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        x = F.softmax(x, dim=-1)\n        return x\n\nmodel = Model()\ncriterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.005)"}
{"instruction": "Edit the following snippet of code to make the program print 'Hello World!'", "input": "print('Hello world)", "output": "print('Hello World!')"}
{"instruction": "Edit the following Java code to print the elements of an array in the form of a matrix.", "input": "public class Matrix \n{ \n    public static void main(String[] args) \n    { \n        int[][] myArray = {{1,2,3}, \n                            {4,5,6}, \n                            {7,8,9}}; \n    } \n}", "output": "public class Matrix \n{ \n    public static void main(String[] args) \n    { \n        int[][] myArray = {{1,2,3}, \n                            {4,5,6}, \n                            {7,8,9}}; \n        for (int i = 0; i < myArray.length; i++) \n        { \n            for (int j = 0; j < myArray[i].length; j++) \n            { \n                System.out.print(myArray[i][j] + \" \"); \n            } \n            System.out.println();\n        } \n    } \n}"}
{"instruction": "Modify the following code to remove all punctuation and special characters.", "input": "function removeSpecialCharacters(str) {\nvar pattern = new RegExp(\"[ `!@#$%^&*()+\\-=\\[\\]{};':\\\"\\\\|,.<>\\/?~]\");\nreturn str.replace(pattern, '');\n}", "output": "function removeSpecialCharacters(str) {\n    var pattern = new RegExp(\"[^a-zA-Z0-9]\");\n    return str.replace(pattern, '');\n}"}
{"instruction": "Edit the given code to calculate the sum of given numbers using a for loop.", "input": "numbers = [2, 4, 6, 8]\nsum = 0", "output": "\"\"\"\nEdit the given code to calculate the sum of given numbers using a for loop\n\"\"\"\n\nnumbers = [2, 4, 6, 8]\nsum = 0\n\nfor number in numbers:\n    sum += number\n\nprint(sum)"}
{"instruction": "How would you modify the following code to make it more efficient?", "input": "def find_word(word, text):\n    if word in text:\n        return \"Word found\"\n    else:\n        return \"Word not found\"", "output": "def find_word(word, text):\n    # Use the 'in' operator to check if the word is in the text\n    if word in text:\n        return \"Word found\"\n    else:\n        return \"Word not found\"\n\n# Use the 'count' method to check if the word is in the text more efficiently\nif text.count(word) > 0:\n    return \"Word found\"\nelse:\n    return \"Word not found\""}
{"instruction": "Modify the code to remove the duplicate elements from the given array.", "input": "[5, 4, 5, 3, 2, 3, 1]", "output": "let myArray = [5, 4, 5, 3, 2, 3, 1];\nlet uniqueArray = []; \n  \nmyArray.forEach((item) => { \n    if (uniqueArray.indexOf(item) === -1) { \n        uniqueArray.push(item); \n    } \n});"}
{"instruction": "How would you modify the code to check whether the list contains an even number?", "input": "list_data = [1, 2, 3, 4]\nfor item in list_data:  \n    print(item)", "output": "list_data = [1, 2, 3, 4]\nflag = False\nfor item in list_data:  \n    print(item)\n    if item % 2 == 0:\n       flag = True\nif flag:\n    print(\"List contains even number.\")"}
{"instruction": "Edit the following line of code in a Java program to calculate the sum of all elements in an array.", "input": "int sum = 0;\nfor int i = 0; i < nums.length; i--", "output": "int sum = 0;\nfor(int i = 0; i < nums.length; i++) {\n sum += nums[i];\n}"}
{"instruction": "Change the following code to create a new string without spaces.", "input": "string = \"Hello World\"", "output": "string = string.replace(' ', '') # new string is \"HelloWorld\""}
{"instruction": "Edit the following HTML code to include a new form field.", "input": "<html>\n<head>\n    <title>My Form</title>\n</head>\n<body>\n    <form>\n        <label for=\"name\">Name</label>\n        <input type=\"text\" id=\"name\">\n    </form>\n</body>\n</html>", "output": "<html>\n<head>\n    <title>My Form</title>\n</head>\n<body>\n    <form>\n        <label for=\"name\">Name</label>\n        <input type=\"text\" id=\"name\">\n        <label for=\"address\">Address</label>\n        <input type=\"text\" id=\"address\">\n    </form>\n</body>\n</html>"}
{"instruction": "Edit the following code so that it will print out all the integer numbers between 0 and 10.", "input": "for x in range(10):\n\u00a0 \u00a0 print(x)", "output": "for x in range(11):\n\u00a0 \u00a0 print(x)"}
{"instruction": "Write a Python program to exchange the values of two different variables.", "input": "x = 10 \ny = 20", "output": "x, y = y, x"}
{"instruction": "Write a function that exchanges the first and last elements of a list.", "input": "", "output": "def exchange_first_last(lst):\n    first_item = lst[0]\n    last_item = lst[-1]\n    lst[0] = last_item\n    lst[-1] = first_item\n    return lst"}
{"instruction": "Debug the following code snippet in C to determine the cause of the error.", "input": "int main() \n{ \n    int array[50], number, i, c=0; \n  \n    printf(\"Enter the number to be searched\\n\"); \n    scanf(\"%d\", &number); \n  \n    for (i = 0; i < 5; i++) { \n        scanf(\"%d\", &array[i]); \n        if (array[i] == number) { \n            c++; \n        } \n    } \n  \n    if (c == 0) { \n        printf(\"Number not found\\n\"); \n    } else { \n        printf(\"%d is present %d times.\", number, c); \n    } \n  \n    return 0; \n}", "output": "The for loop should be updated to the following to ensure that the correct number of elements in the array are read and the subsequent checks are valid:\n\nfor (i = 0; i < 50; i++) { \n    scanf(\"%d\", &array[i]); \n    if (array[i] == number) { \n        c++; \n    } \n}"}
{"instruction": "Suggest an approach to debug a function written in Javascript that is not returning the expected result.", "input": "", "output": "One approach to debug the function would be to use console.log statements to print out the values of the variables inside the function. This would help identify where the problem is and what needs to be changed in order to get the expected result."}
{"instruction": "Describe what the 'Error 404 Not Found' page means.", "input": "", "output": "Error 404 Not Found is an HTTP status code that is sent when the server is unable to find the requested page. It indicates that the page you are looking for could not be found on the server. This page may have been deleted, moved, or temporarily unavailable."}
{"instruction": "Edit this HTML code to make it compliant with the HTML5 standard.", "input": "<html>\n<head>\n  <title>My HTML Page</title>\n</head>\n<body>\n  <p>My HTML Page</p>\n</body>\n</html>", "output": "<!DOCTYPE html>\n<html>\n<head>\n  <title>My HTML Page</title>\n</head>\n<body>\n  <p>My HTML Page</p>\n</body>\n</html>"}
{"instruction": "Modify the following JavaScript code to make it print the result on the console.", "input": "var num1 = 10;\nvar num2 = 20;", "output": "var num1 = 10;\nvar num2 = 20;\nconsole.log(num1 + num2);"}
{"instruction": "Identify the bug in the given code snippet.", "input": "function double_sum(nums) {\n for (let i = 0; i <= nums.length; i++) {\n  sum += nums[i] * 2;\n }\n}", "output": "The bug in the code is that it is looping one time too many. The correct version should use a less than or equal operator ('<=') instead of a less than operator ('<') in the for loop."}
{"instruction": "Edit the given code to add a function that calculates the area of a circle given its radius.", "input": "def circumference(r):\n    '''Calculates the circumference of a circle given its radius'''\n    return 2* PI * r", "output": "def circumference(r):\n    '''Calculates the circumference of a circle given its radius'''\n    return 2* PI * r\n\ndef area(r):\n    '''Calculates the area of a circle given its radius'''\n    return PI * r * r"}
{"instruction": "How could we modify the following code to handle potential errors when computing sum?", "input": "num1 = input(\"Enter a number: \")\nnum2 = input(\"Enter another number: \")\n\nsum = int(num1) + int(num2)", "output": "num1 = input(\"Enter a number: \")\nnum2 = input(\"Enter another number: \")\n\ntry: \n    sum = int(num1) + int(num2)\nexcept ValueError:\n    print(\"Error: Please enter a valid number.\")"}
{"instruction": "Modify the following python code so that it accepts two numbers as input and returns the maximum of those numbers.", "input": "def get_max(num1):\n return num1", "output": "def get_max(num1, num2):\n return max(num1, num2)"}
{"instruction": "Edit the following Python code to make it error-free.", "input": "a = 33\nab = a +", "output": "a = 33\nab = a + b"}
{"instruction": "Edit the following C program to print the right-most digit of the given number.", "input": "#include<stdio.h> \n \nint main() \n{ \n    int num; \n    scanf(\"%d\", &num); \n   \n    // Compute the rightmost digit \n       \n    printf(\"%d\", num); \n   \n    return 0; \n}", "output": "#include<stdio.h> \n \nint main() \n{ \n    int num; \n    scanf(\"%d\", &num); \n   \n    // Compute the rightmost digit \n    int right_most_digit = num % 10;  \n       \n    printf(\"%d\", right_most_digit); \n   \n    return 0; \n}"}
{"instruction": "Fix the bug in the following code to sort a given list of numbers in descending order.", "input": "nums = [2, 3, 1, 4]", "output": "nums = [2, 3, 1, 4]\nnums.sort(reverse=True)\nprint(nums) # Output: [4, 3, 2, 1]"}
{"instruction": "Edit the existing code to accept more than two arguments", "input": "def get_sum(a, b):\n    return a + b", "output": "def get_sum(*args):\n    sum = 0\n    for number in args:\n        sum += number\n\n    return sum"}
{"instruction": "Observe the following code snippet and identify any errors that it contains", "input": "for i in range(10):\n    print(\"Hello world!\")", "output": "The code snippet does not contain any errors and will print \"Hello world!\" ten times."}
{"instruction": "Write a function in Java that takes an input string and changes the case of each letter to its opposite (i.e. upper case to lower case and vice versa).", "input": "String input = \"Hello World\";", "output": "public static String changeCase(String input) {\n    StringBuilder outputString = new StringBuilder();\n    for (int i = 0; i < input.length(); i++) {\n        char c = input.charAt(i);\n        if (Character.isUpperCase(c)) {\n            outputString.append(Character.toLowerCase(c));\n        } else {\n            outputString.append(Character.toUpperCase(c));\n        }\n    }\n    return outputString.toString();\n}"}
{"instruction": "Edit the Java code below to produce the output \"My name is NAME\".", "input": "public class Test { \n public static void main(String[] args) { \n System.out.println(\"My name is\"); \n } \n}", "output": "public class Test { \n public static void main(String[] args) { \n System.out.println(\"My name is NAME\"); \n } \n}"}
{"instruction": "Find the errors in this HTML page.", "input": "<html>\n  <title> My Webpage </title>\n  <body>\n    <h2>Welcome!</h2>\n  </head>\n</html>", "output": "The error in the HTML page is that there is no closing <body> tag. The HTML page should have a closing </body> tag after the <h2>Welcome!</h2> tag."}
{"instruction": "Change the given array to a singly linked list without using a loop.", "input": "array = [1, 2, 3, 4, 5]", "output": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \ndef convertToLinkedList(arr):\n    # Last Node \n    last = None\n  \n    # convert given array to linked list \n    for i in range(len(arr) - 1, -1, -1): \n        # create a new node \n        node = Node(arr[i]) \n  \n        # link existing list with new node \n        node.next = last\n        last = node\n  \n    return node\n\n# Driver code\narray = [1, 2, 3, 4, 5]\nhead = convertToLinkedList(array) \nwhile head != None: \n    print(head.data) \n    head = head.next"}
{"instruction": "Create a function to find the longest common prefix of two strings.", "input": "str1 = \"hello\", str2 = \"helmet\"", "output": "def longest_common_prefix(str1, str2):\n    lcp = \"\"\n    i = 0\n    while i < len(str1) and i < len(str2) and str1[i] == str2[i]:\n        lcp += str1[i]\n        i += 1\n    return lcp"}
{"instruction": "Edit the program such that it prints the elements in a deck of cards in a specific format.", "input": "", "output": "# Symbols for the different ranks\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"Jack\", \"Queen\", \"King\", \"Ace\"]\n# Symbols for the different suits\nsuits = [\"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\"]\n\n# Create a deck of cards as a 2D array\ndeck = []\nfor i in range(len(ranks)):\n    for j in range(len(suits)):\n        deck.append([ranks[i], suits[j]])\n\n# Print the elements in the deck array\nfor i in range(len(deck)):\n    rank = deck[i][0]\n    suit = deck[i][1]\n    print(\"Card %d: %s of %s\" % (i+1, rank, suit))"}
{"instruction": "Edit the following JS code to include a check to avoid creating duplicate requests.", "input": "sendRequest(url) {\n  // Code to send request\n}\n\nmakeRequest(url) {\n  sendRequest(url);\n}", "output": "sendRequest(url) {\n  // Code to send request\n}\n\nrequests = []; // Array to keep track of requests\n\nmakeRequest(url) {\n  if (!requests.includes(url)) { // Check if request doesn't already exist\n    sendRequest(url);\n    requests.push(url); // Add request to list\n  }\n}"}
{"instruction": "Edit the following code to make the loop run for 10 iterations.", "input": "for (int i = 0; i < 5; i++) {\n   System.out.println(i); \n }", "output": "for (int i = 0; i < 10; i++) {\n  System.out.println(i); \n}"}
{"instruction": "Using CSS, modify the background color of a div.", "input": "", "output": "div { \n  background-color: blue;\n}"}
{"instruction": "Debug a logic error in this JavaScript code that returns the wrong result.", "input": "function multiply(a,b) {\n    return a + b;\n}", "output": "function multiply(a,b) {\n    return a * b;\n}"}
{"instruction": "Modify a given shell script to generate a text-based report of the commands run in the bash shell.", "input": "", "output": "#!/bin/bash\n\n# Capture the output of command\nresult=$(bash -c \"${COMMAND}\")\n# Store the output of command in a file\necho \"$result\" >> output.txt\n# Include timestamp\necho \"Result at: $(date)\" >> output.txt\n# Add a newline to results file\necho >> output.txt"}
{"instruction": "Find and remove the bug from this Python code.", "input": "def function(a):\n    b = a / 0.5\n    c = a / 2.0\n    if b == c:\n        return \"equal\"\n    else:\n        return \"not equal\"", "output": "def function(a):\n    b = a * 2\n    c = a * 0.5\n    if b == c:\n        return \"equal\"\n    else:\n        return \"not equal\""}
{"instruction": "Given a Python function, edit the function such that it correctly prints the second highest value of the list.", "input": "def getSecondMax(a):\n    print(max(a))", "output": "def getSecondMax(a):\n    s = sorted(a)[-2]\n    print(s)"}
{"instruction": "Add error handling to the code snippet.", "input": "def calculate_average(numbers):\n    sum = 0\n    for number in numbers:\n        sum += number\n    return sum/len(numbers)", "output": "def calculate_average(numbers):\n    sum = 0\n    if len(numbers) == 0:\n        raise ValueError(\"list of numbers should not be empty\")\n    for number in numbers:\n        sum += number\n    try:\n        return sum/len(numbers)\n    except ZeroDivisionError:\n        print(\"division by 0 attempted\")"}
{"instruction": "Modify the following code segment to add multiple values in an array", "input": "var myArray  = [];\nmyArray[0] = 'x';", "output": "var myArray = [];\nmyArray.push('x', 'y', 'z');"}
{"instruction": "Inspect the given code and find any possible bugs.", "input": "def find_sum(lst):\n    \"\"\"Return the sum of a given list of numbers.\"\"\"\n    res = 0\n    for x in list:\n        res += x\n    return res", "output": "def find_sum(lst):\n    \"\"\"Return the sum of a given list of numbers.\"\"\"\n    res = 0\n    for x in lst:\n        res += x\n    return res # was missing, was iterating over list instead of lst."}
{"instruction": "Modify the code below to pull data from the API endpoint provided.", "input": "Endpoint: https://jsonplaceholder.typicode.com/posts", "output": "import requests\n\nurl = 'https://jsonplaceholder.typicode.com/posts'\n\nresponse = requests.get(url)\ndata = response.json()\n\nfor post in data:\n    title = post['title']\n    body = post['body']\n    \n    print('Title: ', title)\n    print('Body: ', body)"}
{"instruction": "Edit the code so that it calculates the exponential of a given number.", "input": "public double calculatePower(double base, double power) {\n    return base * power;\n}", "output": "public double calculatePower(double base, double power) {\n    return Math.pow(base, power);\n}"}
{"instruction": "Use jquery to dynamically select an element of a given HTML form and change its value.", "input": "Form element: input with id=\"name\"", "output": "$(\"#name\").val(\"John Doe\");"}
{"instruction": "Edit the given HTML code to center all the elements.", "input": "<div>\n    <h1>Hello World!</h1>\n    <p>This is a paragraph</p>\n</div>", "output": "<div style=\"text-align: center;\">\n    <h1>Hello World!</h1>\n    <p>This is a paragraph</p>\n</div>"}
{"instruction": "Edit the given C++ code for reversing a given string.", "input": "#include <iostream>\nusing namespace std;\n\nint main() \n{\n    string str = \"Hello World!\";\n    cout << str;\n    return 0;\n}", "output": "#include <iostream>\n#include <algorithm> \nusing namespace std;\n\nint main() \n{\n    string str = \"Hello World!\";\n    reverse(str.begin(), str.end());\n    cout << str;\n    return 0;\n}"}
{"instruction": "Debug the following code to print out the result of the polynomial.", "input": "polynomial equation: f(x) = x\u00b3 + 5x - 62\nx = 9", "output": "\"\"\"\nDebug the following code to print out the result of the polynomial.\n\"\"\"\n\ndef evaluate_polynomial(coefficients, x):\n    result = 0\n    for i in range(len(coefficients)):\n        result += coefficients[i] * (x ** (len(coefficients) - i - 1))\n    return result\n\ncoefficients = [1, 5, -62]\nx = 9\n\nprint(evaluate_polynomial(coefficients, x)) # 390"}
{"instruction": "Edit the following function to allow editing of existing key-value pairs in the object.", "input": "let myObj = {\n    name: 'Gabe', \n    age: 33\n}\n\nfunction addPair(obj, key, value) {\n    obj[key] = value;\n}", "output": "let myObj = {\n    name: 'Gabe', \n    age: 33\n}\n\nfunction addPair(obj, key, value) {\n    if(obj.hasOwnProperty(key)){\n        obj[key] = value;\n    } else {\n        obj[key] = value;\n    }\n}"}
{"instruction": "Modify the following HTML to apply an external style sheet.", "input": "<html> \n  <head> \n    <title>This Is a Test</title> \n  </head> \n  <body>\n    <h1>Hello World!</h1> \n  </body>\n</html>", "output": "<!DOCTYPE html>\n<html> \n  <head> \n    <title>This Is a Test</title> \n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"> \n  </head> \n  <body>\n    <h1>Hello World!</h1> \n  </body>\n</html>"}
{"instruction": "Create a function in Python to modify the given list and remove all strings with length less than three.", "input": "mylist = ['Apple', 'Cat', 'Hello', 'Hi']", "output": "def remove_short(mylist):\n    mylist = [x for x in mylist if len(x) >= 3]\n    return mylist\n    \nprint(remove_short(mylist))\n# Output: ['Apple', 'Hello']"}
{"instruction": "Modify the given Ruby program to find the sum of all odd numbers between a given range", "input": "1, 10", "output": "def sum_odd_numbers(start, finish)\n  total = 0\n  (start..finish).each do |number|\n    total += number if number % 2 == 1 \n  end\n  total\nend\n\np sum_odd_numbers(1, 10)"}
{"instruction": "Modify a given code to sort a two-dimensional array (matrix) using bubble sort.", "input": "Matrix: \n[[1, 5, 2], \n[8, 4, 6],\n[3, 7, 9]]", "output": "def bubble_sort(arr): \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+1][k] : \n                    arr[j][k], arr[j+1][k] = arr[j+1][k], arr[j][k]\n  \narr = [[1, 5, 2], \n       [8, 4, 6], \n       [3, 7, 9]]\n\nbubble_sort(arr)\nprint(\"Sorted matrix: \") \nfor row in arr: \n    print(row)"}
{"instruction": "Fix this indentation error in the following Python code", "input": "def double(number):\n return number * 2", "output": "def double(number):\n    return number * 2"}
{"instruction": "Modify the following code to generate the Fibonacci sequence up to the nth term", "input": "", "output": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b"}
{"instruction": "Edit the given HTML code to use a common CSS class for all elements", "input": "<div class=\"header\">\n    <h1>Title</h1>\n    <h2>Subtitle</h2>\n</div>", "output": "<div class=\"common-class\">\n    <h1 class=\"common-class\">Title</h1>\n    <h2 class=\"common-class\">Subtitle</h2>\n</div>"}
{"instruction": "Edit a given HTML code to make the font size of 1st paragraph 12px.", "input": "<body>\n    <p>This is the first paragraph.</p>\n    <p>This is the second paragraph.</p>\n</body>", "output": "<body>\n    <p style=\"font-size: 12px;\">This is the first paragraph.</p>\n    <p>This is the second paragraph.</p>\n</body>"}
{"instruction": "Write a JavaScript program to find the longest common prefix string amongst two given strings?", "input": "\"hello\" and \"heaven\"", "output": "function longestCommonPrefix(str1, str2) {\n    let prefix = '';\n    let min_len = Math.min(str1.length, str2.length);\n    for (let i = 0; i < min_len; i++) {\n        if (str1[i] === str2[i]) {\n            prefix += str1[i];\n        } else {\n            break;\n        }\n    }\n    return prefix;\n}\nlet str1 = 'hello'; \nlet str2 = 'heaven';\nconsole.log(longestCommonPrefix(str1,str2));"}
{"instruction": "Fix the following JavaScript bug.", "input": "function helloWorld() {\n  console.log('Hello' + 'World')", "output": "function helloWorld() {\n  console.log('Hello' + ' ' + 'World')"}
{"instruction": "Edit the following function to only accept lowercase parameters.", "input": "def greeting(name):\n    print('Hello, ' + name + '!')", "output": "def greeting(name):\n    name = name.lower()\n    print('Hello, ' + name + '!')"}
{"instruction": "Debug the following program so that it prints the correct output", "input": "x = [5, 4, 3, 2, 1]\nfor i in x\n    print(i)", "output": "x=[5,4,3,2,1]\nfor i in x:\n    print(i)"}
{"instruction": "Edit the given code snippet and make it run in O(N) time complexity.", "input": "int[] arr = {1, 2, 3, 4, 5};\nint result = 0;\nfor (int i = 0; i < arr.Length; i++)\n{\n    for (int j = 0; j < arr.Length; j++)\n    {\n        if (arr[i] % arr[j] == 0)\n        {\n            result += arr[i];\n        }\n    }\n}", "output": "int[] arr = {1, 2, 3, 4, 5};\nint result = 0;\nfor (int i = 0; i < arr.Length; i++)\n{\n    result += arr[i];\n    for (int j = i + 1; j < arr.Length; j++)\n    {\n        if (arr[i] % arr[j] == 0)\n        {\n            result += arr[j];\n        }\n    }\n}"}
{"instruction": "How can we debug our JavaScript code?", "input": "", "output": "We can debug our JavaScript code by using the console.log() method to log values and events to the console. We can also use the JavaScript debugger statement to pause the execution at a particular point in the code, and step through the code line by line. We can also add breakpoints and inspect variables at different stages of the program."}
{"instruction": "Edit the following class to make sure any variables created as part of the class cannot be modified by the program", "input": "class Example:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y", "output": "class Example:\n    def __init__(self, x, y):\n        self.__x = x\n        self.__y = y\n    @property\n    def x(self):\n        return self.__x\n    @x.setter\n    def x(self, val):\n        raise AttributeError(\"Cannot modify x\")\n    @property\n    def y(self):\n        return self.__y\n    @y.setter\n    def y(self, val):\n        raise AttributeError(\"Cannot modify y\")"}
{"instruction": "Modify and update the given HTML code to include a background color.", "input": "<html>\n<head>\n  <title>My Page</title>\n</head>\n<body>\n  <h1>My Page</h1>\n</body>\n</html>", "output": "<html>\n<head>\n  <title>My Page</title>\n</head>\n<body style=\"background-color: #FFFFFF;\">\n  <h1>My Page</h1>\n</body>\n</html>"}
{"instruction": "You need to edit a Python code snippet to add a loop and make it print the square of the numbers from 1 to 10.", "input": "", "output": "for i in range(1, 11):\n    square = i * i\n    print(square)"}
{"instruction": "Identify what type of error the code has", "input": "x = 10\ny = \"10\"\nz = x + y", "output": "This code produces a TypeError as it is attempting to add an integer to a string."}
{"instruction": "Below is the code of a shopping list application. Modify it to add a function to calculate the total cost of all items in the list.", "input": "shopping_list = {\n    'item1': 2.5,\n    'item2': 3.5,\n    'item3': 4.25\n}", "output": "shopping_list = {\n    'item1': 2.5,\n    'item2': 3.5,\n    'item3': 4.25\n}\n\ndef calculate_cost(list):\n    cost = 0\n    for item in list:\n        cost += list[item]\n    return cost\n\ntotal_cost = calculate_cost(shopping_list)\nprint(total_cost)  # prints 10.25"}
{"instruction": "Modify the code below to use regular expressions to validate a phone number in the format \"123-456-7890\".", "input": "", "output": "if (phone.match(/^\\d{3}-\\d{3}-\\d{4}$/)) {\n    console.log(\"Valid phone number\");\n} else {\n    console.log(\"Invalid phone number\");\n}"}
{"instruction": "Edit this text to make it more concise without losing any information.", "input": "The research assisted in understanding the ways in which we can better optimize our data structures. We discovered many new ways of more efficiently using the resources that we were given.", "output": "Research revealed ways to optimize data structures more efficiently, leading to new resource-saving techniques."}
{"instruction": "Debug this Java code to make it work.", "input": "public class test\n{\n  public static void main(String args[])\n  {\n    int a = 5;\n    int b = 0;\n    int c = a + b;\n    System.out.println(\"Result is: \" + c);\n  }\n}", "output": "public class test\n{\n  public static void main(String args[])\n  {\n    int a = 5;\n    int b = 0;\n    if(b!=0)\n    {\n      int c = a + b;\n      System.out.println(\"Result is: \" + c);\n    }\n    else\n    {\n      System.out.println(\"Error: Cannot divide by 0!\");\n    }\n  }\n}"}
{"instruction": "Change this code to print the reversed version of a string.", "input": "string s = \"Hello World!\";", "output": "string s = \"Hello World!\"; \nreverse(s.begin(), s.end()); \ncout << s; \n// Outputs: !dlroW olleH"}
{"instruction": "Change the list elements to binary numbers.", "input": "mylist=[3, 8, 9]", "output": "mylist = [bin(i) for i in mylist]"}
{"instruction": "Modify the given C# program to count all the vowels in a given string.", "input": "string str = \"This is a sample string.\";", "output": "string str = \"This is a sample string.\";\nint count = 0; \n \nforeach (char ch in str) \n{ \n    switch (ch) \n    { \n        case 'a': \n        case 'e': \n        case 'i': \n        case 'o': \n        case 'u': \n            count++; \n            break; \n    } \n} \n\nConsole.WriteLine(\"Number of vowels in the given string: \" + count);"}
{"instruction": "Edit the following HTML code snippet to give the <body> tag the class 'main'.", "input": "<html>\n    <head>\n        <title>Page Title</title>\n    </head>\n</html>", "output": "<html>\n    <head>\n        <title>Page Title</title>\n    </head>\n    <body class=\"main\">\n    </body>\n</html>"}
{"instruction": "Edit the output of a C program so that the last line prints \"Hello World!\"", "input": "#include <stdio.h>\n\nint main()\n{\n    printf(\"Hello!\");\n    return 0;\n}", "output": "#include <stdio.h>\n\nint main() \n{ \n    printf(\"Hello!\"); \n    printf(\"Hello World!\"); \n    return 0; \n}"}
{"instruction": "Modify the following python code to calculate the average of a list of numbers.", "input": "def list_average(numbers):\n    '''This function will calculate the average of a list of numbers.'''", "output": "def list_average(numbers):\n    '''This function will calculate the average of a list of numbers.'''\n    return sum(numbers) / len(numbers)"}
{"instruction": "You need to edit this given HTML code to apply a class name \"example\" to the second element.", "input": "<ul>\n <li>One</li>\n <li>Two</li>\n <li>Three</li>\n</ul>", "output": "<ul>\n <li>One</li>\n <li class=\"example\">Two</li>\n <li>Three</li>\n</ul>"}
{"instruction": "In the following snippet, make the necessary changes to store the result as a float value", "input": "a = 5\nb = 20\nresult = a / b;", "output": "a = 5\nb = 20\nresult = float(a / b);"}
{"instruction": "Change the given string to list.", "input": "Data Science", "output": "['Data', 'Science']"}
{"instruction": "Edit the following code snippet to output \"five\" instead of \"four\".", "input": "echo \"four\";", "output": "echo \"five\";"}
{"instruction": "Write a Java code to find the longest common prefix in a string array.", "input": "String [] arr = {\"flower\",\"flow\",\"flight\"}", "output": "public static String longestCommonPrefix(String[] arr) \n{ \n    if (arr.length == 0) \n        return \"\"; \n  \n    String prefix = arr[0]; \n  \n    for (int i = 1; i < arr.length; i++) \n    { \n        while (arr[i].indexOf(prefix) != 0) \n        {\n            prefix = prefix.substring(0, prefix.length() - 1); \n            if (prefix.isEmpty()) \n                return \"\";  \n        } \n    } \n    return prefix; \n}"}
{"instruction": "Modify the following code so that it takes a string as a parameter, reverses it and prints out the reversed string.", "input": "str = \"Hello World!\"", "output": "def reverse_string(str):\n  reverse = \"\" \n  # Traverse through each letter of the input string \n  for i in range(len(str) - 1, -1, -1): \n    reverse = reverse + str[i] \n  print(reverse)"}
{"instruction": "Edit the following Java program and make it compile without any errors.", "input": "public class Main { \n    public static void main(String[] args) { \n        System.print(\"Hello, World!\"); \n    } \n}", "output": "public class Main { \n    public static void main(String[] args) { \n        System.out.println(\"Hello, World!\"); \n    } \n}"}
